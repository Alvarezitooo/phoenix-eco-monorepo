import streamlit as st
import os
from dotenv import load_dotenv
from services.api_client import (
    suggerer_competences_transferables,
    get_france_travail_offer_details,
    analyser_culture_entreprise,
    APIError
)
from services.letter_service import (
    generer_lettre,
    extraire_mots_cles_annonce,
    evaluate_letter
)
from models.letter_request import LetterRequest
from models.user_profile import UserProfile
from services.content_extractor import extract_cv_content, extract_annonce_content, FileProcessingError
from services.trajectory_service import generate_reconversion_plan
from services.rgpd_manager import RGPDUserManager, SecurePremiumStorage, RGPDViolationError # Nouveaux imports
from services.data_anonymizer import DataAnonymizer # Ajout pour l'anonymisation
from services.cv_optimization_service import CvOptimizationService # Ajout pour l'optimisation du CV
from services.security_scanner import SecurityScanner, SecurityScanError # Ajout pour le scan de s√©curit√©
import logging
import random # Ajout pour les astuces al√©atoires
from docx import Document # Ajout pour la g√©n√©ration DOCX
import io # Ajout pour la gestion des flux de bytes en m√©moire
import time # Ajout pour la logique de limitation de taux
import uuid # Ajout pour la g√©n√©ration d'UUID
import tempfile # Ajout pour la gestion des fichiers temporaires

load_dotenv() # Charge les variables d'environnement √† partir du fichier .env

# --- Configuration de la Page ---
st.set_page_config(
    page_title="G√©n√©rateur de Lettre de Motivation IA",
    page_icon="ü§ñ",
    layout="centered",
)

# --- Conseils utiles (pour l'attente) ---
TIPS = [
    "üí° Conseil utile : Saviez-vous que 80% des recruteurs parcourent d'abord votre CV en diagonale ? Assurez-vous que les informations cl√©s sont visibles en un coup d'≈ìil !",
    "üí° Conseil utile : Une lettre de motivation n'est pas un r√©sum√© de votre CV. C'est une histoire qui explique POURQUOI vous √™tes le candidat id√©al pour CE poste.",
    "üí° Conseil utile : L'IA est un outil puissant, mais la touche humaine reste irrempla√ßable. Relisez toujours et personnalisez !",
    "üí° Conseil utile : Votre r√©seau professionnel est une mine d'or. Cultivez-le, √©changez, et n'h√©sitez pas √† demander conseil.",
    "üí° Conseil utile : La pers√©v√©rance est la cl√©. Chaque refus est une opportunit√© d'apprendre et de s'am√©liorer.",
    "üí° Conseil utile : Un bon prompt pour l'IA, c'est comme une bonne question √† un expert : plus elle est pr√©cise, plus la r√©ponse sera pertinente.",
    "üí° Conseil utile : La clart√© et la concision sont vos meilleurs atouts dans toute communication professionnelle.",
    "üí° Conseil utile : N'ayez pas peur de mettre en avant vos comp√©tences transf√©rables, surtout en reconversion. Elles sont votre force !",
    "üí° Conseil utile : Pr√©parez-vous aux entretiens en anticipant les questions et en ayant des exemples concrets de vos r√©alisations.",
    "üí° Conseil utile : Le march√© du travail √©volue constamment. Restez curieux et continuez √† apprendre tout au long de votre carri√®re.",
]

# --- Fonctions de l'Application ---

def generate_docx(text_content: str) -> bytes:
    """G√©n√®re un document DOCX √† partir d'une cha√Æne de caract√®res."""
    document = Document()
    # Remplacer les doubles retours √† la ligne par des paragraphes pour un meilleur formatage
    paragraphs = text_content.split('\n\n')
    for para_text in paragraphs:
        document.add_paragraph(para_text)
    
    # Sauvegarder le document en m√©moire
    byte_io = io.BytesIO()
    document.save(byte_io)
    byte_io.seek(0) # Remettre le curseur au d√©but du fichier
    return byte_io.getvalue()

def main():

    """
    Fonction principale de l'application Streamlit.
    """
    st.title("üìÑ G√©n√©rateur de Lettre de Motivation IA")
    st.subheader("Sp√©cialement affin√© pour la reconversion professionnelle")

    # Initialiser les variables de session si elles n'existent pas
    if 'annonce_content' not in st.session_state:
        st.session_state.annonce_content = ""
    if 'user_id' not in st.session_state:
        st.session_state.user_id = "simulated_user_" + str(uuid.uuid4()) # ID utilisateur simul√©
    
    # Initialisation des gestionnaires RGPD
    rgpd_user_manager = RGPDUserManager()
    try:
        secure_storage = SecurePremiumStorage()
    except ValueError as e:
        st.error(f"Erreur de configuration RGPD : {e}. Veuillez d√©finir la variable d'environnement 'USER_DATA_ENCRYPTION_KEY'.")
        st.stop()

    data_anonymizer = DataAnonymizer() # Instanciation du DataAnonymizer
    cv_optimization_service = CvOptimizationService() # Instanciation du CvOptimizationService
    security_scanner = SecurityScanner() # Instanciation du SecurityScanner

    # --- Simulation du niveau d'abonnement et du consentement (pour la d√©mo) ---
    st.sidebar.header("Param√®tres Utilisateur (D√©mo RGPD)")
    user_tier = st.sidebar.radio(
        "Niveau d'abonnement simul√© :",
        ('free', 'premium', 'premium_plus'),
        index=0, # 'free' par d√©faut
        key='user_tier_radio'
    )
    explicit_consent = st.sidebar.checkbox(
        "Je consens √† la conservation de mes donn√©es (CV anonymis√©, lettres) pour la dur√©e de mon abonnement.",
        value=False,
        key='explicit_consent_checkbox'
    )

    if user_tier != 'free' and not explicit_consent:
        st.sidebar.warning("Pour les abonnements Premium, le consentement explicite est requis pour la conservation des donn√©es.")

    # --- Bandeau de consentement RGPD ---
    st.info("""
    **Protection des donn√©es** : Vos donn√©es (CV, lettre g√©n√©r√©e) sont trait√©es **uniquement en m√©moire** et **supprim√©es imm√©diatement** apr√®s g√©n√©ration. Aucune sauvegarde n'est effectu√©e sur nos serveurs. Le traitement IA est r√©alis√© via Gemini (Google). Pour plus de d√©tails, consultez notre politique de confidentialit√© (√† venir).
    """)

    

    with st.expander("üí° Comment √ßa marche ? / √Ä propos de l'outil"):
        st.markdown("""
        Bienvenue dans votre **G√©n√©rateur de Lettre de Motivation IA** ! Cet outil a √©t√© con√ßu pour vous aider √† r√©diger des lettres percutantes et personnalis√©es, en particulier si vous √™tes en **reconversion professionnelle**.

        **Notre Philosophie :**
        Nous croyons que chaque parcours est unique. L'IA n'est pas l√† pour remplacer votre cr√©ativit√©, mais pour l'amplifier. Elle agit comme un co-pilote intelligent, transformant vos informations brutes (CV, annonce) en un narratif convaincant, tout en valorisant votre exp√©rience et votre motivation.

        **Comment √ßa marche ?**
        1.  **Votre CV & l'Annonce :** Fournissez votre CV (PDF ou TXT) et le texte de l'annonce. L'IA analyse ces documents pour comprendre votre profil et les exigences du poste.
        2.  **Personnalisation :** Choisissez le ton souhait√© et, si vous √™tes en reconversion, donnez des d√©tails sur votre ancien et nouveau domaine. Plus vous √™tes pr√©cis, plus la lettre sera pertinente !
        3.  **G√©n√©ration Intelligente :** Notre IA, entra√Æn√©e sp√©cifiquement pour la r√©daction de lettres de motivation, r√©dige un brouillon. Elle est particuli√®rement dou√©e pour transformer les parcours de reconversion en atouts, en mettant en lumi√®re vos comp√©tences transf√©rables et votre motivation.
        4.  **√âdition & T√©l√©chargement :** La lettre g√©n√©r√©e appara√Æt dans une zone √©ditable. Vous pouvez la peaufiner, la personnaliser davantage, puis la t√©l√©charger au format TXT ou DOCX, ou la copier directement dans votre presse-papiers.

        **Pourquoi cet outil ?**
        Dans un march√© du travail comp√©titif, une lettre de motivation bien r√©dig√©e fait toute la diff√©rence. Cet outil vous fait gagner du temps, r√©duit le stress de la page blanche, et vous aide √† pr√©senter votre candidature sous son meilleur jour, en particulier lorsque votre parcours n√©cessite une explication claire et valorisante.

        N√© de l'exp√©rience des d√©fis de la reconversion, cet outil est con√ßu pour transformer vos doutes en atouts et vous guider vers un nouveau chapitre professionnel.
        """)

    st.markdown("""
    Cet outil vous aide √† cr√©er une lettre de motivation percutante en quelques secondes.
    1.  **Chargez votre CV** (PDF ou TXT)
    2.  **Chargez l'annonce** (TXT)
    3.  **Pr√©cisez votre situation** et laissez l'IA transformer votre parcours en atout !
    """)

    # --- Zone de T√©l√©versement ---
    uploaded_cv = st.file_uploader(
        "1. Chargez votre CV",
        type=['pdf', 'txt'],
        help="Le fichier ne doit pas d√©passer 5MB."
    )

    uploaded_annonce = st.file_uploader(
        "2. Chargez l'annonce",
        type=['txt', 'pdf'],
        help="Un simple fichier texte avec le contenu de l'annonce."
    )

    st.markdown("**OU**")

    offer_id = st.text_input(
        "2.1. Entrez l'ID d'une offre France Travail (si vous ne chargez pas de fichier annonce)",
        help="Ex: 167XQYV"
    )

    # --- Options de G√©n√©ration ---
    st.markdown("**3. Personnalisez votre lettre**")
    col1, col2 = st.columns(2)

    with col1:
        ton_choisi = st.selectbox(
            "Choisissez le ton",
            ("Formel", "Dynamique", "Sobre", "Cr√©atif", "Startup", "Associatif"),
            index=0, # "Formel" par d√©faut
            help="Le ton influence le style d'√©criture de l'IA."
        )

    with col2:
        est_reconversion = st.checkbox(
            "C'est une reconversion",
            value=True, # Coch√© par d√©faut pour mettre en avant la fonctionnalit√©
            help="Cochez cette case si vous changez de carri√®re. L'IA adaptera son discours pour valoriser votre parcours."
        )

    ancien_domaine = ""
    nouveau_domaine = ""
    competences_transferables = ""

    if est_reconversion:
        st.markdown("**D√©tails de votre reconversion :**")
        ancien_domaine = st.text_input(
            "Votre ancien domaine d'activit√© (ex: Marketing, Comptabilit√©, B√¢timent)",
            help="Soyez pr√©cis pour aider l'IA √† faire les liens."
        )
        nouveau_domaine = st.text_input(
            "Votre nouveau domaine d'activit√© souhait√© (ex: Cybers√©curit√©, D√©veloppement Web, Data Science)",
            help="C'est ici que vous projetez votre avenir !"
        )

        # Initialiser la session_state pour les comp√©tences sugg√©r√©es si elle n'existe pas
        if 'suggested_competences' not in st.session_state:
            st.session_state.suggested_competences = ""

        # Bouton pour sugg√©rer les comp√©tences
        if st.button("‚ú® Sugg√©rer les comp√©tences transf√©rables"):
            if ancien_domaine and nouveau_domaine:
                with st.spinner("L'IA analyse les domaines pour sugg√©rer les comp√©tences..."):
                    try:
                        suggested_text = suggerer_competences_transferables(ancien_domaine, nouveau_domaine)
                        st.session_state.suggested_competences = suggested_text
                        st.success("Comp√©tences sugg√©r√©es ! Vous pouvez les modifier si besoin.")
                    except APIError as e:
                        st.error(f"‚ùå Erreur lors de la suggestion des comp√©tences. Probl√®me avec l'API Gemini : {e}. Veuillez r√©essayer plus tard.")
                    except Exception as e:
                        st.error(f"üö® Une erreur inattendue est survenue lors de la suggestion : {e}")
            else:
                st.warning("Veuillez renseigner l'ancien et le nouveau domaine pour obtenir des suggestions.")

        # Zone de texte pour afficher/√©diter les comp√©tences transf√©rables
        competences_transferables = st.text_area(
            "Comp√©tences cl√©s transf√©rables (vous pouvez √©diter ou utiliser la suggestion) :",
            value=st.session_state.suggested_competences,
            help="Listez les comp√©tences de votre ancienne carri√®re qui sont pertinentes pour votre nouveau projet."
        )

    # --- Section Analyse de la Culture d'Entreprise (Mirror Match) ---
    st.markdown("**4. Affinez avec l'analyse de la culture d'entreprise (Optionnel)**")
    with st.expander("üîç Analyse de la Culture d'Entreprise (Mirror Match)"):
        st.markdown("""
        Collez le contenu de la page "√Ä propos" de l'entreprise et/ou des posts LinkedIn r√©cents.
        L'IA analysera ces informations pour adapter le ton et les valeurs de votre lettre.
        """)
        company_about_page = st.text_area(
            "Contenu de la page '√Ä propos' de l'entreprise :",
            key="company_about_page",
            height=150,
            help="Copiez-collez le texte de la section '√Ä propos' ou 'Notre histoire' du site web de l'entreprise."
        )
        linkedin_posts = st.text_area(
            "Posts LinkedIn r√©cents (un post par ligne) :",
            key="linkedin_posts",
            height=150,
            help="Copiez-collez quelques posts r√©cents de la page LinkedIn de l'entreprise, un par ligne."
        )



    # --- Section Trajectory Builder ---
    st.markdown("**5. Construisez votre Trajectoire de Reconversion (Exp√©rimental)**")
    with st.expander("üöÄ Trajectory Builder"):
        st.markdown("""
        D√©crivez votre profil actuel et votre objectif de reconversion pour obtenir un plan d√©taill√©.
        """)
        current_skills_input = st.text_area(
            "Vos comp√©tences actuelles (s√©par√©es par des virgules) :",
            key="current_skills_input",
            height=100,
            help="Ex: Gestion de projet, Marketing digital, Analyse de donn√©es"
        )
        current_experience_input = st.text_area(
            "Votre exp√©rience professionnelle actuelle ou pass√©e :",
            key="current_experience_input",
            height=150,
            help="D√©crivez vos r√¥les, responsabilit√©s et r√©alisations cl√©s."
        )
        aspirations_input = st.text_area(
            "Vos aspirations de carri√®re ou le nouveau domaine souhait√© :",
            key="aspirations_input",
            height=100,
            help="Ex: Devenir Data Scientist, Travailler dans la cybers√©curit√©, Lancer ma startup"
        )
        target_role_input = st.text_input(
            "R√¥le cible de reconversion (ex: D√©veloppeur Python, Analyste SOC) :",
            key="target_role_input",
            help="Soyez pr√©cis sur le r√¥le que vous visez."
        )

        if st.button("‚ú® G√©n√©rer mon Plan de Reconversion"):
            if current_skills_input and current_experience_input and aspirations_input and target_role_input:
                with st.spinner("L'IA √©labore votre plan de reconversion..."):
                    try:
                        user_profile = UserProfile(
                            current_skills=[s.strip() for s in current_skills_input.split(',') if s.strip()],
                            current_experience=current_experience_input,
                            aspirations=aspirations_input
                        )
                        reconversion_plan = generate_reconversion_plan(user_profile, target_role_input)
                        st.success("Votre plan de reconversion a √©t√© g√©n√©r√© !")
                        
                        st.subheader(f" Objectif : {reconversion_plan.goal}")
                        st.write(reconversion_plan.summary)
                        
                        # Affichage des m√©tadonn√©es du plan
                        col1, col2 = st.columns(2)
                        with col1:
                            if reconversion_plan.estimated_total_duration_weeks:
                                st.metric("‚è±Ô∏è Dur√©e totale", f"{reconversion_plan.estimated_total_duration_weeks} semaines")
                        with col2:
                            if reconversion_plan.success_probability is not None:
                                st.metric(" Probabilit√© de succ√®s", f"{reconversion_plan.success_probability:.0%}")

                        st.markdown("###  √âtapes du Plan de Reconversion")
                        
                        for i, step in enumerate(reconversion_plan.steps):
                            with st.expander(f"**√âtape {i+1}: {step.title}**", expanded=i==0):
                                st.write(step.description)
                                
                                if step.duration_weeks:
                                    st.info(f"‚è±Ô∏è **Dur√©e estim√©e** : {step.duration_weeks} semaines")
                                
                                if step.resources:
                                    st.markdown("####  Ressources Recommand√©es")
                                    
                                    for resource in step.resources:
                                        # Ic√¥nes par type de ressource
                                        icons = {
                                            "cours_en_ligne": "üìö",
                                            "livre": "üìñ", 
                                            "certification": "üèÖ",
                                            "mentorat": "ü§ù",
                                            "projet_pratique": "üí°",
                                            "article": "üì∞",
                                            "outil": "‚öôÔ∏è",
                                            "autre": "üîó"
                                        }
                                        
                                        icon = icons.get(resource.type, "")
                                        
                                        # Affichage propre de chaque ressource
                                        st.markdown(f"**{icon} {resource.name}**")
                                        
                                        if resource.description:
                                            st.write(f" {resource.description}")
                                        
                                        if resource.link:
                                            st.write(f" [Acc√©der √† la ressource]({resource.link})")
                                        
                                        st.write("--- ")  # S√©parateur entre ressources

                    except APIError as e:
                        st.error(f"Impossible de g√©n√©rer le plan de reconversion : {e}")
                    except Exception as e:
                        st.error(f"Une erreur inattendue est survenue lors de la g√©n√©ration du plan : {e}")
            else:
                st.warning("Veuillez remplir tous les champs du profil et du r√¥le cible pour g√©n√©rer le plan.")

    # --- Section Optimisation CV (Premium) ---
    st.markdown("**6. Optimisez votre CV (Fonctionnalit√© Premium)**")
    with st.expander("üìù Optimisation de CV"):
        if user_tier == 'free':
            st.info("Cette fonctionnalit√© est r√©serv√©e aux abonnements Premium et Premium Plus.")
        else:
            st.markdown("""
            Optimisez votre CV pour mieux mettre en avant vos comp√©tences transf√©rables.
            """)
            if uploaded_cv is None:
                st.warning("Veuillez d'abord charger votre CV pour utiliser cette fonctionnalit√©.")
            else:
                if st.button("‚ú® Optimiser mon CV"):
                    if competences_transferables:
                        with st.spinner("L'IA optimise votre CV..."):
                            try:
                                # R√©cup√©rer le contenu du CV upload√©
                                cv_content_for_opt = extract_cv_content(uploaded_cv)
                                optimized_cv_text = cv_optimization_service.optimize_cv(
                                    cv_content_for_opt, competences_transferables, user_tier
                                )
                                st.success("Votre CV a √©t√© optimis√© !")
                                st.text_area(
                                    "Voici votre CV optimis√© (vous pouvez le copier) :",
                                    optimized_cv_text,
                                    height=400,
                                    key="optimized_cv_editor"
                                )
                                # Option de t√©l√©chargement DOCX pour le CV optimis√©
                                docx_file_opt = generate_docx(optimized_cv_text)
                                st.download_button(
                                    label="üìÑ T√©l√©charger le CV optimis√© (DOCX)",
                                    data=docx_file_opt,
                                    file_name='cv_optimise.docx',
                                    mime='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                                )
                            except APIError as e:
                                st.error(f"Impossible d'optimiser le CV : {e}")
                            except FileProcessingError as e:
                                st.error(f"Erreur lors du traitement du CV pour l'optimisation : {e}")
                            except Exception as e:
                                st.error(f"Une erreur inattendue est survenue lors de l'optimisation du CV : {e}")
                    else:
                        st.warning("Veuillez d'abord sugg√©rer ou entrer vos comp√©tences transf√©rables.")

    # --- Boutons d'action ---
    col_buttons_1, col_buttons_2 = st.columns(2)

    # --- Logique de Limitation de Taux (Rate Limiting) ---
    if 'last_generation_time' not in st.session_state:
        st.session_state.last_generation_time = 0

    cooldown_time = 60 # en secondes
    time_since_last_generation = time.time() - st.session_state.last_generation_time
    is_on_cooldown = time_since_last_generation < cooldown_time

    with col_buttons_1:
        if st.button("‚ú® G√©n√©rer la lettre de motivation", disabled=is_on_cooldown):
            if is_on_cooldown:
                st.warning(f"Veuillez attendre {int(cooldown_time - time_since_last_generation)} secondes avant de g√©n√©rer une nouvelle lettre.")
            elif uploaded_cv is not None and (uploaded_annonce is not None or offer_id):
                with st.spinner("Pr√©paration des documents... Votre CV et l'annonce sont en cours d'analyse."):
                    try:
                        progress_text = st.empty()
                        progress_bar = st.progress(0)

                        progress_text.info("√âtape 1/3 : Lecture et traitement de vos fichiers...")
                        progress_bar.progress(33)
                        
                        cv_content = ""
                        annonce_content = ""

                        # --- Validation et Lecture S√©curis√©e du CV ---
                        try:
                            with tempfile.NamedTemporaryFile(delete=False) as temp_cv_file:
                                temp_cv_file.write(uploaded_cv.getvalue())
                                temp_cv_path = temp_cv_file.name
                            
                            if not security_scanner.scan_file(temp_cv_path):
                                st.error("üö® Fichier CV d√©tect√© comme potentiellement malveillant. Scan de s√©curit√© √©chou√©.")
                                st.stop()

                            cv_content = extract_cv_content(uploaded_cv)
                        except FileProcessingError as e:
                            st.error(f"üö® Erreur lors du traitement du CV : {e}")
                            st.stop()
                        except SecurityScanError as e:
                            st.error(f"üö® Erreur de s√©curit√© lors du scan du CV : {e}")
                            st.stop()
                        finally:
                            if 'temp_cv_path' in locals() and os.path.exists(temp_cv_path):
                                os.remove(temp_cv_path) # S'assurer que le fichier temporaire est supprim√©

                        annonce_content = ""
                        offer_details = None # Initialiser offer_details

                        if offer_id: # Si un ID d'offre est fourni
                            try:
                                offer_details = get_france_travail_offer_details(offer_id)
                                if offer_details and 'description' in offer_details:
                                    annonce_content = offer_details['description']
                                    st.session_state.annonce_content = annonce_content # Sauvegarde dans session_state
                                    st.info(f"Annonce r√©cup√©r√©e via France Travail API (ID: {offer_id}).")
                                else:
                                    st.warning("Impossible de r√©cup√©rer la description de l'offre via l'API. Veuillez v√©rifier l'ID.")
                                    return # Arr√™te l'ex√©cution si l'API √©choue
                            except APIError as e:
                                st.error(f"Erreur lors de la r√©cup√©ration de l'offre France Travail : {e}. Veuillez v√©rifier l'ID ou r√©essayer plus tard.")
                                return # Arr√™te l'ex√©cution en cas d'erreur API
                        elif uploaded_annonce is not None: # Sinon, si un fichier est upload√©
                            try:
                                with tempfile.NamedTemporaryFile(delete=False) as temp_annonce_file:
                                    temp_annonce_file.write(uploaded_annonce.getvalue())
                                    temp_annonce_path = temp_annonce_file.name

                                if not security_scanner.scan_file(temp_annonce_path):
                                    st.error("üö® Fichier annonce d√©tect√© comme potentiellement malveillant. Scan de s√©curit√© √©chou√©.")
                                    st.stop()

                                annonce_content = extract_annonce_content(uploaded_annonce)
                                st.session_state.annonce_content = annonce_content # Sauvegarde dans session_state
                            except FileProcessingError as e:
                                st.error(f"üö® Erreur lors du traitement de l'annonce : {e}")
                                st.stop()
                            except SecurityScanError as e:
                                st.error(f"üö® Erreur de s√©curit√© lors du scan de l'annonce : {e}")
                                st.stop()
                            finally:
                                if 'temp_annonce_path' in locals() and os.path.exists(temp_annonce_path):
                                    os.remove(temp_annonce_path) # S'assurer que le fichier temporaire est supprim√©
                        else:
                            st.warning("Veuillez charger une annonce ou fournir un ID d'offre France Travail.")
                            return # Arr√™te l'ex√©cution si aucune annonce n'est fournie

                        progress_text.info(f"√âtape 2/3 : L'intelligence artificielle r√©dige votre lettre... Cela peut prendre quelques instants.\n\n{random.choice(TIPS)}")  # nosec B311
                        progress_bar.progress(66)
                        # G√©n√©ration de la lettre
                        company_insights = None
                        if company_about_page or linkedin_posts:
                            with st.spinner("√âtape 2.5/3 : Analyse de la culture d'entreprise..."):
                                try:
                                    company_insights = analyser_culture_entreprise(company_about_page, linkedin_posts)
                                    st.success("Analyse de la culture d'entreprise termin√©e !")
                                except APIError as e:
                                    st.warning(f"Impossible d'analyser la culture d'entreprise. Probl√®me avec l'API Gemini : {e}. La lettre sera g√©n√©r√©e sans cette personnalisation. Veuillez r√©essayer plus tard.")
                                except Exception as e:
                                    st.warning(f"Une erreur inattendue est survenue lors de l'analyse de la culture d'entreprise : {e}. La lettre sera g√©n√©r√©e sans cette personnalisation.")

                        request_data = LetterRequest(
                            cv_contenu=cv_content,
                            annonce_contenu=annonce_content,
                            ton_souhaite=ton_choisi.lower(),
                            est_reconversion=est_reconversion,
                            ancien_domaine=ancien_domaine,
                            nouveau_domaine=nouveau_domaine,
                            competences_transferables=competences_transferables,
                            offer_details=offer_details,
                            company_insights=company_insights, # Ajout des insights de l'entreprise
                            user_tier=user_tier # Ajout du niveau d'abonnement
                        )
                        lettre_response = generer_lettre(request_data)
                        lettre_generee = lettre_response.lettre_generee

                        # --- Gestion des utilisateurs et RGPD (pour la d√©mo) ---
                        if rgpd_user_manager.can_store_data(user_tier, explicit_consent):
                            try:
                                # Anonymisation des donn√©es avant stockage
                                anonymized_cv_content = data_anonymizer.anonymize_text(cv_content)
                                anonymized_lettre_generee = data_anonymizer.anonymize_text(lettre_generee)

                                secure_storage.store_user_document(
                                    st.session_state.user_id, 'cv', anonymized_cv_content, user_tier
                                )
                                secure_storage.store_user_document(
                                    st.session_state.user_id, 'letter', anonymized_lettre_generee, user_tier
                                )
                                st.success("Vos donn√©es (anonymis√©es) ont √©t√© sauvegard√©es en toute s√©curit√©.")
                            except RGPDViolationError as e:
                                st.error(f"Erreur RGPD : {e}")
                            except Exception as e:
                                st.error(f"Erreur lors de la sauvegarde s√©curis√©e : {e}")
                        else:
                            st.info("Vos donn√©es ne sont pas conserv√©es (utilisateur gratuit ou consentement non donn√©).")

                        # Mettre √† jour le temps de la derni√®re g√©n√©ration pour le rate limiting
                        st.session_state.last_generation_time = time.time()

                        progress_text.info("√âtape 3/3 : Finalisation et affichage de votre lettre...")
                        progress_bar.progress(100)
                        progress_text.empty() # Efface le texte de progression
                        progress_bar.empty() # Efface la barre de progression
                        # Affichage du r√©sultat
                        st.success("üéâ Votre lettre de motivation a √©t√© g√©n√©r√©e !")
                        
                        # Stocker la lettre g√©n√©r√©e dans session_state pour l'√©dition
                        st.session_state.lettre_editable = lettre_generee

                        # Zone de texte √©ditable
                        edited_letter = st.text_area(
                            "Voici votre lettre (vous pouvez l'√©diter ici) :",
                            st.session_state.lettre_editable,
                            height=400,
                            key="lettre_motivation_editor"
                        )

                        # Mettre √† jour la lettre dans session_state si l'utilisateur l'√©dite
                        st.session_state.lettre_editable = edited_letter

                        # Bouton Copier dans le presse-papiers
                        if st.button("üìã Copier la lettre"):
                            st.components.v1.html(
                                f"""
                                <script>
                                    navigator.clipboard.writeText(`{st.session_state.lettre_editable}`).then(function() {{{{ 
                                        console.log('Async: Copying to clipboard was successful!');
}}}}, function(err) {{{{ 
                                    console.error('Async: Could not copy text: ', err);
                                }}}});
                            </script>
                            """,
                            height=0, width=0
                        )
                        st.success("Lettre copi√©e dans le presse-papiers !")

                        # Option pour afficher l'analyse ATS
                        show_ats_analysis = st.checkbox("Afficher l'analyse ATS (pour les experts !)", value=False)

                        if show_ats_analysis:
                            st.markdown("--- ")
                            st.subheader(" Analyse ATS (Applicant Tracking System)")
                            st.info("Cette section vous aide √† v√©rifier la pertinence de votre lettre par rapport aux mots-cl√©s de l'annonce.")

                            try:
                                # V√©rification que les donn√©es n√©cessaires sont disponibles
                                if 'lettre_editable' not in st.session_state:
                                    st.error("‚ùå Aucune lettre g√©n√©r√©e. Veuillez d'abord g√©n√©rer une lettre.")
                                elif 'annonce_content' not in st.session_state or not st.session_state.annonce_content:
                                    st.error("‚ùå Contenu de l'annonce manquant. Veuillez recharger l'annonce.")
                                else:
                                    # Debug : afficher les longueurs
                                    st.write(f" Debug - Longueur lettre: {len(st.session_state.lettre_editable)} caract√®res")
                                    st.write(f" Debug - Longueur annonce: {len(st.session_state.annonce_content)} caract√®res")
                                    
                                    # Extraction des mots-cl√©s avec gestion d'erreur
                                    try:
                                        mots_cles_annonce = extraire_mots_cles_annonce(st.session_state.annonce_content)
                                        st.write(f" Debug - Mots-cl√©s annonce extraits: {len(mots_cles_annonce)}")
                                        
                                        mots_cles_lettre = extraire_mots_cles_annonce(st.session_state.lettre_editable)
                                        st.write(f" Debug - Mots-cl√©s lettre extraits: {len(mots_cles_lettre)}")
                                        
                                        mots_trouves = set(mots_cles_annonce).intersection(set(mots_cles_lettre))
                                        mots_manquants = set(mots_cles_annonce) - set(mots_cles_lettre)
                                        
                                        # Affichage des r√©sultats
                                        st.markdown(f"**Mots-cl√©s de l'annonce ({len(mots_cles_annonce)}) :**")
                                        if mots_cles_annonce:
                                            # Limiter l'affichage pour √©viter les probl√®mes
                                            mots_affiches = sorted(list(mots_cles_annonce))[:50]  # Max 50 mots
                                            st.code(", ".join(mots_affiches) + ("..." if len(mots_cles_annonce) > 50 else ""))
                                        else:
                                            st.warning("Aucun mot-cl√© extrait de l'annonce")

                                        st.markdown(f"**Mots-cl√©s trouv√©s dans la lettre ({len(mots_trouves)}) :**")
                                        if mots_trouves:
                                            mots_trouves_affiches = sorted(list(mots_trouves))[:50]
                                            st.success(", ".join(mots_trouves_affiches) + ("..." if len(mots_trouves) > 50 else ""))
                                        else:
                                            st.warning("Aucun mot-cl√© de l'annonce trouv√© dans la lettre.")

                                        st.markdown(f"**Mots-cl√©s manquants dans la lettre ({len(mots_manquants)}) :**")
                                        if mots_manquants:
                                            mots_manquants_affiches = sorted(list(mots_manquants))[:50]
                                            st.error(", ".join(mots_manquants_affiches) + ("..." if len(mots_manquants) > 50 else ""))
                                        else:
                                            st.success("Tous les mots-cl√©s de l'annonce sont pr√©sents dans la lettre !")
                                            
                                        # Calcul du pourcentage de correspondance
                                        if mots_cles_annonce:
                                            pourcentage = (len(mots_trouves) / len(mots_cles_annonce)) * 100
                                            st.metric(" Taux de correspondance ATS", f"{pourcentage:.1f}%")
                                        
                                    except Exception as e:
                                        st.error(f"‚ùå Erreur lors de l'extraction des mots-cl√©s : {str(e)}")
                                        st.write(f" Debug - Type d'erreur: {type(e).__name__}")
                                        
                            except Exception as e:
                                st.error(f"‚ùå Erreur g√©n√©rale dans l'analyse ATS : {str(e)}")
                                st.write(f" Debug - Erreur compl√®te: {e}")
                                
                            st.markdown("--- ")

                        # Option pour afficher l'analyse Smart Coach
                        show_smart_coach_analysis = st.checkbox("Afficher l'analyse Smart Coach (Feedback IA !)", value=False)

                        if show_smart_coach_analysis:
                            st.markdown("--- ")
                            st.subheader("üß† Analyse Smart Coach (Feedback IA)")
                            st.info("L'IA √©value votre lettre et vous propose des pistes d'am√©lioration.")
                            with st.spinner("L'IA analyse votre lettre..."):
                                try:
                                    coaching_report = evaluate_letter(st.session_state.lettre_editable, st.session_state.annonce_content)
                                    st.markdown(f"**Score Global : {coaching_report.score:.1f}/10**")
                                    for suggestion in coaching_report.suggestions:
                                        st.write(f"- {suggestion}")
                                    st.markdown("**D√©tail des Crit√®res :**")
                                    for critere, detail in coaching_report.rationale.items():
                                        st.write(f"**{critere.replace('_', ' ').title()}** : {detail}")
                                except APIError as e:
                                    st.error(f"Impossible d'obtenir l'analyse Smart Coach : {e}")
                                except Exception as e:
                                    st.error(f"Une erreur inattendue est survenue lors de l'analyse Smart Coach : {e}")
                            st.markdown("--- ")

                        # Option de t√©l√©chargement TXT
                            st.download_button(
                                label="üì• T√©l√©charger la lettre (TXT)",
                                data=st.session_state.lettre_editable.encode('utf-8'),
                                file_name='lettre_de_motivation.txt',
                                mime='text/plain'
                            )

                            # Option de t√©l√©chargement DOCX
                            docx_file = generate_docx(st.session_state.lettre_editable)
                            st.download_button(
                                label="üìÑ T√©l√©charger la lettre (DOCX)",
                                data=docx_file,
                                file_name='lettre_de_motivation.docx',
                                mime='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                            )

                        # --- Historique des Lettres et Gestion des Donn√©es (Premium) ---
                        st.markdown("--- ")
                        st.subheader("üìö Historique et Gestion des Donn√©es")
                        if user_tier != 'free' and explicit_consent:
                            st.info("En tant qu'utilisateur Premium, vous pouvez consulter l'historique de vos lettres et g√©rer vos donn√©es.")
                            user_history = secure_storage.get_user_history(st.session_state.user_id)
                            if user_history:
                                for i, doc in enumerate(user_history):
                                    st.markdown(f"#### Document {i+1} ({doc['type']}) - G√©n√©r√© le {doc['created_at']}")
                                    st.text_area(f"Contenu du document {doc['id']}", doc['content'], height=200, key=f"history_doc_{doc['id']}", disabled=True)
                                    st.markdown("--- ")
                                if st.button("üóëÔ∏è Supprimer toutes mes donn√©es sauvegard√©es"):
                                    secure_storage.delete_all_user_data(st.session_state.user_id)
                                    st.success("Toutes vos donn√©es sauvegard√©es ont √©t√© supprim√©es.")
                                    st.rerun() # Rafra√Æchir pour montrer l'historique vide
                            else:
                                st.info("Aucun historique de lettres trouv√© pour le moment.")
                        else:
                            st.info("L'historique des lettres est une fonctionnalit√© Premium. Abonnez-vous pour en b√©n√©ficier !")

                    except (APIError, FileProcessingError, ValueError) as e:
                        st.error("‚ùå Une erreur est survenue lors de la g√©n√©ration. Veuillez r√©essayer.")
                        logging.exception("Erreur lors de la g√©n√©ration via l'interface web.")
                    except Exception as e:
                        st.error("üö® Une erreur inattendue est survenue. L'ing√©nieur est sur le coup !")
                        logging.exception("Erreur critique inattendue dans l'app Streamlit.")
            else:
                st.warning("‚ö†Ô∏è Veuillez charger votre CV et l'annonce avant de continuer.")

    with col_buttons_2:
        if st.button("üîÑ R√©initialiser"):
            st.session_state.clear() # Efface toutes les variables de session
            st.rerun() # Relance l'application pour tout r√©initialiser


if __name__ == "__main__":
    # V√©rification de la cl√© API au d√©marrage (fail-fast)
    if not os.getenv('GOOGLE_API_KEY'):
        st.error("ERREUR CRITIQUE : La variable d'environnement 'GOOGLE_API_KEY' n'est pas configur√©e.")
        st.info("Veuillez configurer cette variable d'environnement avant de lancer l'application.")
        st.stop() # Arr√™te l'ex√©cution si la cl√© est manquante

    main()
