"""
Service de coaching IA utilisant Google Gemini.
G√©n√®re encouragements et feedback d'entretiens.
"""

import os
from typing import Dict

import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()


class AICoachService:
    """Service de coaching IA avec Google Gemini."""

    def __init__(self):
        """Initialise le mod√®le Gemini."""
        api_key = os.environ.get("GOOGLE_API_KEY")
        if not api_key:
            raise ValueError("GOOGLE_API_KEY requis dans .env")

        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel("gemini-1.5-flash")

    def generate_encouragement(self, mood: int, confidence: int, notes: str) -> str:
        """
        G√©n√®re un encouragement personnalis√© bas√© sur l'√©tat de l'utilisateur.

        Args:
            mood: Score d'humeur (1-10)
            confidence: Score de confiance (1-10)
            notes: Notes de l'utilisateur

        Returns:
            Message d'encouragement personnalis√©
        """
        prompt = f"""
        Tu es Phoenix, un coach IA bienveillant sp√©cialis√© dans l'accompagnement 
        des reconversions professionnelles.
        
        Un utilisateur partage son √©tat aujourd'hui :
        - Humeur : {mood}/10
        - Confiance : {confidence}/10
        - Notes : "{notes}"
        
        G√©n√®re un encouragement personnalis√© (2-3 phrases max) qui :
        - Soit authentiquement bienveillant (pas g√©n√©rique)
        - Prenne en compte son √©tat √©motionnel
        - L'encourage dans sa reconversion
        - Reste professionnel mais chaleureux
        
        Commence par un emoji appropri√©.
        """

        try:
            response = self.model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            # Fallback intelligent bas√© sur les scores
            return self._generate_fallback_encouragement(mood, confidence)

    def _generate_fallback_encouragement(self, mood: int, confidence: int) -> str:
        """Fallback d'encouragement si l'IA n'est pas disponible."""
        if mood >= 7 and confidence >= 7:
            return "üåü Quelle √©nergie ! Tu rayonnes de confiance. Les recruteurs vont le sentir."
        elif mood >= 5 and confidence >= 5:
            return "üí™ Tu progresses bien. Chaque jour te rapproche de ton objectif de reconversion."
        else:
            return "ü´Ç Les doutes font partie du chemin. Ta pers√©v√©rance est ta plus grande force."

    def generate_weekly_oracle_report(self, weekly_mood_entries: str) -> str:
        """
        G√©n√®re un rapport hebdomadaire "Phoenix Oracle" bas√© sur les entr√©es d'humeur.
        """
        prompt = f"""
<role>
Tu es le "Phoenix Oracle", un coach strat√®ge, data-analyst et psychologue du travail. Tu es connu pour ta perspicacit√©, ta capacit√© √† voir des sch√©mas invisibles et ta bienveillance exigeante. Ton objectif est de fournir √† l'utilisateur une clart√© absolue sur sa trajectoire √©motionnelle et de le mettre en action.
</role>

<context>
L'utilisateur est en pleine reconversion professionnelle. Voici ses donn√©es de suivi √©motionnel des 7 derniers jours :
{weekly_mood_entries}
</context>

<task>
Effectue une analyse interne en suivant ces √©tapes (Chain-of-Thought) avant de g√©n√©rer la r√©ponse finale. Ne montre pas cette analyse √† l'utilisateur.
<reasoning>
1.  **Analyse des Donn√©es Brutes :** Calcule la moyenne de 'mood_score' et 'confidence_level'. Identifie le jour le plus haut et le plus bas pour chaque m√©trique.
2.  **D√©tection de Tendances :** Y a-t-il une tendance √† la hausse ou √† la baisse sur la semaine ? La confiance suit-elle l'humeur ou est-elle d√©corr√©l√©e ?
3.  **Analyse des Notes (Analyse S√©mantique) :** Lis les 'notes'. Identifie les th√®mes r√©currents : 'procrastination', 'succ√®s', 'peur', 'entretien', 'r√©seautage', 'formation'.
4.  **Identification de Corr√©lation :** Trouve une corr√©lation entre les √©v√©nements d√©crits dans les notes et les pics/creux √©motionnels. Par exemple : "Le jour o√π l'utilisateur a mentionn√© un entretien, sa confiance a augment√© de 2 points."
5.  **Diagnostic Strat√©gique :** Sur la base de cette analyse, quel est le principal levier de progression pour l'utilisateur cette semaine ? Quel est son principal frein ?
6.  **Conception du D√©fi :** Cr√©e un d√©fi SMART (Sp√©cifique, Mesurable, Atteignable, R√©aliste, Temporel) pour la semaine √† venir qui s'attaque directement au frein identifi√©.
</reasoning>

G√©n√®re maintenant ta synth√®se pour l'utilisateur. Utilise le format Markdown ci-dessous. Sois percutant, inspirant et actionnable.

<output>
###  Oracle Hebdomadaire de Phoenix

Bonjour [Pr√©nom de l'utilisateur], j'ai analys√© ta semaine. Voici ce que les donn√©es r√©v√®lent sur ton voyage.

**‚ú® Ton Point de C√©l√©bration :**
[D√©cris ici le plus grand succ√®s ou la corr√©lation positive la plus forte que tu as identifi√©e. Sois sp√©cifique. Exemple : "J'ai not√© que ta confiance a atteint un pic de 9/10 ce jeudi, juste apr√®s que tu aies mentionn√© avoir 'r√©ussi un exercice de code complexe'. C'est la preuve tangible que la mise en action nourrit ta confiance."]

**‚ö†Ô∏è Ton Point de Vigilance :**
[D√©cris ici le sch√©ma n√©gatif ou le frein principal de mani√®re bienveillante mais directe. Utilise une technique de recadrage cognitif. Exemple : "J'observe une baisse de ton humeur les jours o√π tu notes 'recherche d'offres'. Il semble que cette t√¢che consomme ton √©nergie. Ne voyons pas cela comme un √©chec, mais comme un signal : nous devons rendre cette recherche plus strat√©gique et moins √©nergivore."]

** Ton D√©fi de la Semaine :**
[Pr√©sente ici le d√©fi SMART que tu as con√ßu. Il doit √™tre clair et mesurable. Exemple : "Ton d√©fi : Au lieu de chercher des offres tous les jours, bloque seulement 2 sessions de 45 minutes cette semaine. Mais pendant ces sessions, au lieu de seulement postuler, ton objectif est d'identifier 3 personnes travaillant dans les entreprises qui t'int√©ressent et de leur envoyer un message personnalis√© sur LinkedIn. Qualit√© > Quantit√©."]

Garde le cap. La transformation est un marathon, pas un sprint.
</output>
"""
        try:
            response = self.model.generate_content(prompt)
            return response.text.strip()
        except Exception as e:
            return f"D√©sol√©, je n'ai pas pu g√©n√©rer le rapport Oracle cette semaine. Erreur: {e}"

    def generate_interview_feedback(
        self, cv_summary: str, job_context: str, question: str, user_response: str
    ) -> Dict:
        """
        G√©n√®re un feedback sur une r√©ponse d'entretien.

        Args:
            cv_summary: R√©sum√© du CV de l'utilisateur
            job_context: Contexte du poste
            question: Question pos√©e
            user_response: R√©ponse de l'utilisateur

        Returns:
            Dictionnaire avec score, point fort et am√©lioration
        """
        prompt = f"""
Tu es un coach d'entretien expert. Analyse cette r√©ponse d'entretien et fournis un feedback constructif.

CONTEXTE:
- CV: {cv_summary}
- Poste: {job_context}
- Question: {question}
- R√©ponse: {user_response}

CONSIGNE: Fournis un feedback au format JSON exact suivant:
{{
  "score": [note sur 10],
  "strength": "[point fort principal en une phrase]",
  "improvement": "[axe d'am√©lioration concret en une phrase]"
}}

R√©ponds UNIQUEMENT avec le JSON, rien d'autre.
"""
        try:
            response = self.model.generate_content(prompt)
            import json

            feedback_text = response.text.strip()
            # Clean potential markdown formatting
            if feedback_text.startswith("```json"):
                feedback_text = (
                    feedback_text.replace("```json", "").replace("```", "").strip()
                )
            return json.loads(feedback_text)
        except Exception as e:
            return self._generate_fallback_feedback(user_response)

    def _generate_fallback_feedback(self, response: str) -> Dict:
        """Feedback de fallback bas√© sur des heuristiques."""
        word_count = len(response.split())
        score = min(9.0, max(4.0, word_count / 15 + 5.0))

        return {
            "score": round(score, 1),
            "strength": "Votre r√©ponse est claire et contient des √©l√©ments pertinents.",
            "improvement": "Elle pourrait √™tre plus structur√©e pour un impact maximal.",
        }
