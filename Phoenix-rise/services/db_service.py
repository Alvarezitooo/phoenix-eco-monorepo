"""
Service de base de donn√©es pour Phoenix Rise.
G√®re toutes les interactions avec Supabase PostgreSQL.
"""

import streamlit as st
from supabase import Client
from typing import List, Dict
from datetime import timedelta
from utils.security import InputValidator, DataAnonymizer

class DBService:
    """Service de gestion des donn√©es utilisateur."""
    
    def __init__(self, client: Client):
        """Initialise avec le client Supabase."""
        self.client = client

    def get_mood_entries(self, user_id: str) -> List[Dict]:
        """
        R√©cup√®re les entr√©es d'humeur de l'utilisateur.
        
        Args:
            user_id: ID de l'utilisateur (valid√©)
            
        Returns:
            Liste des entr√©es d'humeur
        """
        try:
            # Validation s√©curis√©e de l'user_id
            if not user_id or not isinstance(user_id, str) or len(user_id) < 10:
                st.error("üîí Identifiant utilisateur invalide")
                return []
            
            response = self.client.table('mood_entries').select("*").eq(
                'user_id', user_id
            ).order('created_at', desc=True).limit(30).execute()
            
            return response.data or []
            
        except Exception as e:
            # Log s√©curis√© sans exposition d'informations sensibles
            st.error("üîí Erreur de r√©cup√©ration des donn√©es. Veuillez r√©essayer.")
            return []

    def add_mood_entry(self, user_id: str, mood: int, energy: int, confidence: int, notes: str) -> Dict:
        """
        Ajoute une nouvelle entr√©e d'humeur avec validation s√©curis√©e.
        
        Args:
            user_id: ID de l'utilisateur (UUID valid√©)
            mood: Score d'humeur (1-10)
            energy: Niveau d'√©nergie (1-10) 
            confidence: Niveau de confiance (1-10)
            notes: Notes optionnelles (s√©curis√©es)
            
        Returns:
            Dictionnaire avec success et data/error
        """
        try:
            # Validation s√©curis√©e de tous les inputs
            if not InputValidator.validate_user_id(user_id):
                return {"success": False, "error": "Identifiant utilisateur invalide"}
            
            mood = InputValidator.validate_mood_score(mood)
            energy = InputValidator.validate_mood_score(energy)
            confidence = InputValidator.validate_mood_score(confidence)
            
            if mood is None or energy is None or confidence is None:
                return {"success": False, "error": "Scores invalides (doivent √™tre entre 1 et 10)"}
            
            # Nettoyage s√©curis√© des notes (protection XSS)
            safe_notes = InputValidator.sanitize_text(notes, max_length=500)
            
            response = self.client.table('mood_entries').insert({
                "user_id": user_id,
                "mood_score": mood,
                "energy_level": energy,
                "confidence_level": confidence,
                "notes": safe_notes
            }).execute()
            
            return {
                "success": True, 
                "data": response.data[0] if response.data else None
            }
            
        except Exception as e:
            # Log s√©curis√© sans exposition de donn√©es sensibles
            st.error("üîí Erreur lors de l'enregistrement. Veuillez r√©essayer.")
            return {"success": False, "error": "Erreur de sauvegarde"}

    def get_user_stats(self, user_id: str) -> Dict:
        """
        Calcule les statistiques utilisateur.
        
        Returns:
            Dictionnaire avec moyennes et tendances
        """
        entries = self.get_mood_entries(user_id)
        
        if not entries:
            return {"total_entries": 0}
        
        mood_scores = [entry['mood_score'] for entry in entries]
        confidence_scores = [entry['confidence_level'] for entry in entries]
        
        return {
            "total_entries": len(entries),
            "avg_mood": round(sum(mood_scores) / len(mood_scores), 1),
            "avg_confidence": round(sum(confidence_scores) / len(confidence_scores), 1),
            "trend": "üìà" if len(entries) > 1 and mood_scores[0] > mood_scores[-1] else "‚û°Ô∏è"
        }
