#!/usr/bin/env python3
"""
üîç PHOENIX ECOSYSTEM VALIDATOR
Script de validation compl√®te de l'√©cosyst√®me Phoenix avant d√©ploiement
"""

import os
import sys
from pathlib import Path
from typing import Dict, List, Tuple
import json
import subprocess

class PhoenixEcosystemValidator:
    """Validateur complet de l'√©cosyst√®me Phoenix"""
    
    def __init__(self):
        self.monorepo_root = Path(__file__).resolve().parent
        self.results = {}
        
    def validate_all(self) -> Dict[str, bool]:
        """Validation compl√®te de l'√©cosyst√®me"""
        print("üîç PHOENIX ECOSYSTEM VALIDATION - STARTING")
        print("=" * 60)
        
        # Tests de structure
        self.results["structure"] = self.validate_structure()
        self.results["dependencies"] = self.validate_dependencies()
        self.results["docker"] = self.validate_docker_configs()
        self.results["render"] = self.validate_render_config()
        self.results["packages"] = self.validate_shared_packages()
        self.results["services"] = self.validate_services()
        
        # Rapport final
        self.generate_report()
        
        return self.results
    
    def validate_structure(self) -> bool:
        """Valide la structure du monorepo"""
        print("\nüìÇ STRUCTURE VALIDATION")
        print("-" * 30)
        
        required_paths = [
            "apps/phoenix-letters/app.py",
            "apps/phoenix-letters/main.py", 
            "apps/phoenix-letters/requirements.txt",
            "apps/phoenix-cv/app.py",
            "apps/phoenix-cv/main.py",
            "apps/phoenix-cv/requirements.txt", 
            "apps/phoenix-backend-unified/app.py",
            "apps/phoenix-backend-unified/main.py",
            "apps/phoenix-backend-unified/requirements.txt",
            "apps/phoenix-iris-api/app.py",
            "apps/phoenix-iris-api/main.py",
            "apps/phoenix-iris-api/requirements.txt",
            "apps/phoenix-website/package.json",
            "agent_ia/app.py",
            "agent_ia/requirements.txt",
            "infrastructure/data-pipeline/app.py",
            "infrastructure/data-pipeline/requirements.txt",
            "infrastructure/Dockerfile.worker",
            "Dockerfile",
            "render.yaml"
        ]
        
        missing = []
        for path_str in required_paths:
            path = self.monorepo_root / path_str
            if path.exists():
                print(f"‚úÖ {path_str}")
            else:
                print(f"‚ùå {path_str}")
                missing.append(path_str)
        
        if missing:
            print(f"\n‚ö†Ô∏è Fichiers manquants: {len(missing)}")
            return False
        else:
            print(f"\n‚úÖ Structure compl√®te - {len(required_paths)} fichiers valid√©s")
            return True
    
    def validate_dependencies(self) -> bool:
        """Valide les d√©pendances Python"""
        print("\nüì¶ DEPENDENCIES VALIDATION")
        print("-" * 30)
        
        requirements_files = [
            "apps/phoenix-letters/requirements.txt",
            "apps/phoenix-cv/requirements.txt", 
            "apps/phoenix-backend-unified/requirements.txt",
            "apps/phoenix-iris-api/requirements.txt",
            "agent_ia/requirements.txt",
            "infrastructure/data-pipeline/requirements.txt"
        ]
        
        all_valid = True
        for req_file in requirements_files:
            path = self.monorepo_root / req_file
            if path.exists():
                content = path.read_text()
                if len(content.strip()) > 0:
                    lines = [l for l in content.split('\n') if l.strip() and not l.startswith('#')]
                    print(f"‚úÖ {req_file} - {len(lines)} d√©pendances")
                else:
                    print(f"‚ùå {req_file} - Fichier vide")
                    all_valid = False
            else:
                print(f"‚ùå {req_file} - Manquant")
                all_valid = False
        
        return all_valid
    
    def validate_docker_configs(self) -> bool:
        """Valide les configurations Docker"""
        print("\nüê≥ DOCKER VALIDATION")
        print("-" * 30)
        
        docker_files = [
            "Dockerfile",
            "infrastructure/Dockerfile.worker"
        ]
        
        all_valid = True
        for docker_file in docker_files:
            path = self.monorepo_root / docker_file
            if path.exists():
                content = path.read_text()
                if "FROM python" in content and "WORKDIR" in content:
                    print(f"‚úÖ {docker_file} - Configuration valide")
                else:
                    print(f"‚ùå {docker_file} - Configuration incompl√®te")
                    all_valid = False
            else:
                print(f"‚ùå {docker_file} - Manquant")
                all_valid = False
        
        return all_valid
    
    def validate_render_config(self) -> bool:
        """Valide la configuration Render"""
        print("\n‚ö° RENDER CONFIGURATION VALIDATION")
        print("-" * 30)
        
        render_path = self.monorepo_root / "render.yaml"
        if not render_path.exists():
            print("‚ùå render.yaml manquant")
            return False
        
        content = render_path.read_text()
        
        expected_services = [
            "phoenix-letters",
            "phoenix-cv", 
            "phoenix-website",
            "phoenix-backend-unified",
            "phoenix-iris-api",
            "phoenix-event-bridge",
            "phoenix-user-profile",
            "phoenix-agents-ai"
        ]
        
        services_found = 0
        for service in expected_services:
            if f"name: {service}" in content:
                print(f"‚úÖ Service {service}")
                services_found += 1
            else:
                print(f"‚ùå Service {service} manquant")
        
        print(f"\nüìä Services configur√©s: {services_found}/{len(expected_services)}")
        return services_found == len(expected_services)
    
    def validate_shared_packages(self) -> bool:
        """Valide les packages partag√©s"""
        print("\nüîó SHARED PACKAGES VALIDATION") 
        print("-" * 30)
        
        packages_dir = self.monorepo_root / "packages"
        if not packages_dir.exists():
            print("‚ùå Dossier packages/ manquant")
            return False
        
        required_packages = [
            "phoenix_shared_auth",
            "phoenix_shared_ui", 
            "phoenix_shared_models",
            "phoenix_event_bridge"
        ]
        
        packages_found = 0
        for package in required_packages:
            package_path = packages_dir / package
            if package_path.exists():
                init_file = package_path / "__init__.py"
                if init_file.exists():
                    print(f"‚úÖ Package {package}")
                    packages_found += 1
                else:
                    print(f"‚ö†Ô∏è Package {package} - __init__.py manquant")
            else:
                print(f"‚ùå Package {package} manquant")
        
        print(f"\nüìä Packages valid√©s: {packages_found}/{len(required_packages)}")
        return packages_found >= 3  # Au moins 3 sur 4
    
    def validate_services(self) -> bool:
        """Valide la coh√©rence des services"""
        print("\nüîß SERVICES CONSISTENCY VALIDATION")
        print("-" * 30)
        
        # V√©rification points d'entr√©e
        services = [
            ("apps/phoenix-letters", "app.py", "streamlit"),
            ("apps/phoenix-cv", "app.py", "streamlit"), 
            ("apps/phoenix-backend-unified", "app.py", "fastapi"),
            ("apps/phoenix-iris-api", "app.py", "fastapi"),
            ("agent_ia", "app.py", "fastapi"),
            ("infrastructure/data-pipeline", "app.py", "asyncio")
        ]
        
        all_valid = True
        for service_dir, entry_point, service_type in services:
            path = self.monorepo_root / service_dir / entry_point
            if path.exists():
                content = path.read_text()
                if service_type == "streamlit" and "streamlit" in content:
                    print(f"‚úÖ {service_dir} - {service_type} service valide")
                elif service_type == "fastapi" and ("FastAPI" in content or "app" in content):
                    print(f"‚úÖ {service_dir} - {service_type} service valide") 
                elif service_type == "asyncio" and "asyncio" in content:
                    print(f"‚úÖ {service_dir} - {service_type} service valide")
                else:
                    print(f"‚ö†Ô∏è {service_dir} - Configuration {service_type} √† v√©rifier")
            else:
                print(f"‚ùå {service_dir} - Point d'entr√©e manquant")
                all_valid = False
        
        return all_valid
    
    def generate_report(self):
        """G√©n√®re le rapport final"""
        print("\n" + "=" * 60)
        print("üìã PHOENIX ECOSYSTEM VALIDATION REPORT")
        print("=" * 60)
        
        total_tests = len(self.results)
        passed_tests = sum(self.results.values())
        
        for test, result in self.results.items():
            status = "‚úÖ PASS" if result else "‚ùå FAIL"
            print(f"{test.upper():<20} {status}")
        
        print("-" * 60)
        print(f"R√âSULTAT GLOBAL: {passed_tests}/{total_tests} tests r√©ussis")
        
        if passed_tests == total_tests:
            print("\nüéâ √âCOSYST√àME PHOENIX PR√äT POUR LE D√âPLOIEMENT !")
            print("   Tous les services sont configur√©s et int√©gr√©s.")
        elif passed_tests >= total_tests * 0.8:
            print(f"\n‚ö†Ô∏è √âCOSYST√àME PHOENIX PRESQUE PR√äT ({passed_tests}/{total_tests})")
            print("   Quelques ajustements mineurs requis.")
        else:
            print(f"\n‚ùå √âCOSYST√àME PHOENIX N√âCESSITE DES CORRECTIONS ({passed_tests}/{total_tests})")
            print("   Plusieurs probl√®mes √† r√©soudre avant d√©ploiement.")


def main():
    """Point d'entr√©e principal"""
    validator = PhoenixEcosystemValidator()
    results = validator.validate_all()
    
    # Code de sortie bas√© sur les r√©sultats
    total_tests = len(results)
    passed_tests = sum(results.values())
    
    if passed_tests == total_tests:
        sys.exit(0)  # Succ√®s complet
    elif passed_tests >= total_tests * 0.8:
        sys.exit(1)  # Avertissements
    else:
        sys.exit(2)  # Erreurs critiques


if __name__ == "__main__":
    main()