"""
üß† Tagger NLP √âmotion/Valeur - Recherche-Action Phoenix
Analyse s√©mantique √©thique des notes utilisateur pour la recherche

Author: Claude Phoenix DevSecOps Guardian  
Version: 1.0.0 - √âthique & Privacy First
"""

import re
from dataclasses import dataclass
from typing import Dict, List, Set, Tuple
from enum import Enum


class EmotionTag(Enum):
    """Tags √©motionnels identifi√©s dans les notes utilisateur"""
    BURNOUT = "burnout"
    ANXIETE = "anxi√©t√©" 
    CONFIANCE = "confiance"
    MOTIVATION = "motivation"
    FRUSTRATION = "frustration"
    ESPOIR = "espoir"
    PEUR = "peur"
    JOIE = "joie"
    STRESS = "stress"
    SOULAGEMENT = "soulagement"


class ValueTag(Enum):
    """Tags de valeurs et aspirations identifi√©s"""
    QUETE_DE_SENS = "qu√™te_de_sens"
    EQUILIBRE_VIE_PRO = "√©quilibre_vie_pro"
    RECONNAISSANCE = "reconnaissance"
    AUTONOMIE = "autonomie"
    CREATIVITE = "cr√©ativit√©"
    IMPACT_SOCIAL = "impact_social"
    SECURITE_FINANCIERE = "s√©curit√©_financi√®re"
    APPRENTISSAGE = "apprentissage"
    LEADERSHIP = "leadership"
    COLLABORATION = "collaboration"


class TransitionPhase(Enum):
    """Phases de transition professionnelle"""
    QUESTIONNEMENT = "questionnement"
    EXPLORATION = "exploration"
    PREPARATION = "pr√©paration"
    ACTION = "action"
    INTEGRATION = "int√©gration"
    BILAN = "bilan"


@dataclass
class NLPTagResult:
    """R√©sultat de l'analyse NLP d'une note utilisateur"""
    original_text_length: int
    emotion_tags: List[EmotionTag]
    value_tags: List[ValueTag]  
    transition_phase: TransitionPhase
    confidence_score: float
    anonymized_keywords: List[str]
    

class EthicalNLPTagger:
    """
    Tagger NLP √©thique pour analyse des dynamiques de reconversion
    
    PRINCIPE: Analyse s√©mantique respectueuse, jamais de stockage de texte brut
    """
    
    def __init__(self):
        """Initialisation des dictionnaires s√©mantiques √©thiques"""
        self.emotion_patterns = self._build_emotion_patterns()
        self.value_patterns = self._build_value_patterns()
        self.transition_patterns = self._build_transition_patterns()
        
    def _build_emotion_patterns(self) -> Dict[EmotionTag, List[str]]:
        """Construction des patterns d'√©motions (mots-cl√©s fran√ßais)"""
        return {
            EmotionTag.BURNOUT: [
                '√©puisement', '√©puis√©', 'fatigu√©', 'burn.?out', 'plus la force',
                'vid√©', '√† bout', 'craqu√©', 'surmenage', 'surcharg√©'
            ],
            EmotionTag.ANXIETE: [
                'anxi√©t√©', 'anxieux', 'angoiss√©', 'inquiet', 'stress',
                'panique', 'appr√©hension', 'nerveux', 'tension'
            ],
            EmotionTag.CONFIANCE: [
                'confiant', 'confiance', 's√ªr de moi', 'optimiste', 
                'serein', 'assurance', 'foi en', 'certain'
            ],
            EmotionTag.MOTIVATION: [
                'motiv√©', 'motivation', 'envie', 'enthousiasme', 'dynamique',
                '√©nergie', 'd√©termin√©', 'ambition', 'volont√©'
            ],
            EmotionTag.FRUSTRATION: [
                'frustr√©', 'frustration', 'agac√©', 'irrit√©', 'col√®re',
                'ras le bol', 'marre', 'exasp√©r√©'
            ],
            EmotionTag.ESPOIR: [
                'espoir', 'esp√©rer', 'optimisme', 'positif', 'avenir',
                'perspectives', 'lumi√®re', 'renaissance'
            ],
            EmotionTag.PEUR: [
                'peur', 'crainte', 'appr√©hension', 'terroris√©', 'effray√©',
                'inqui√©tude', 'angoisse', 'trouille'
            ],
            EmotionTag.JOIE: [
                'joie', 'heureux', 'bonheur', 'ravi', 'content',
                'satisfait', '√©panouissement', 'plaisir'
            ],
            EmotionTag.STRESS: [
                'stress', 'stress√©', 'pression', 'tension', 'nervosit√©',
                'anxi√©t√©', 'surmenage'
            ],
            EmotionTag.SOULAGEMENT: [
                'soulag√©', 'soulagement', 'lib√©r√©', 'd√©livr√©', 'apais√©',
                'rassur√©', 'd√©tendu'
            ]
        }
    
    def _build_value_patterns(self) -> Dict[ValueTag, List[str]]:
        """Construction des patterns de valeurs et aspirations"""
        return {
            ValueTag.QUETE_DE_SENS: [
                'sens', 'signification', 'utilit√©', 'impact', 'valeurs',
                'mission', 'raison d.√™tre', 'pourquoi', 'vocation'
            ],
            ValueTag.EQUILIBRE_VIE_PRO: [
                '√©quilibre', 'vie personnelle', 'famille', 'temps libre',
                'conciliation', 'bien.√™tre', 'life.work.balance'
            ],
            ValueTag.RECONNAISSANCE: [
                'reconnaissance', 'appr√©ci√©', 'valoris√©', 'respect√©',
                'consid√©ration', 'm√©rite', 'gratitude'
            ],
            ValueTag.AUTONOMIE: [
                'autonomie', 'ind√©pendance', 'libert√©', 'd√©cision',
                'contr√¥le', 'responsabilit√©', 'entrepreneur'
            ],
            ValueTag.CREATIVITE: [
                'cr√©ativit√©', 'cr√©atif', 'innovation', 'imagination',
                'artistique', 'original', 'inventif'
            ],
            ValueTag.IMPACT_SOCIAL: [
                'impact social', 'soci√©t√©', 'communaut√©', 'aider',
                'contribution', 'changement', 'engagement'
            ],
            ValueTag.SECURITE_FINANCIERE: [
                's√©curit√© financi√®re', 'argent', 'salaire', 'revenus',
                'stabilit√©', '√©conomique', 'financier'
            ],
            ValueTag.APPRENTISSAGE: [
                'apprendre', 'formation', 'd√©veloppement', 'comp√©tences',
                'connaissances', '√©voluer', 'croissance'
            ],
            ValueTag.LEADERSHIP: [
                'leadership', 'diriger', 'manager', '√©quipe', 'responsable',
                'influence', 'guider'
            ],
            ValueTag.COLLABORATION: [
                'collaboration', '√©quipe', 'ensemble', 'coop√©ration',
                'collectif', 'partage', 'solidarit√©'
            ]
        }
    
    def _build_transition_patterns(self) -> Dict[TransitionPhase, List[str]]:
        """Construction des patterns de phases de transition"""
        return {
            TransitionPhase.QUESTIONNEMENT: [
                'questions', 'doutes', 'r√©flexion', 'pourquoi', 'sens',
                'remise en question', 'interrogation'
            ],
            TransitionPhase.EXPLORATION: [
                'explorer', 'd√©couvrir', 'rechercher', 'possibilit√©s',
                'options', 'pistes', 'opportunit√©s'
            ],
            TransitionPhase.PREPARATION: [
                'formation', 'pr√©parer', 'planifier', 'apprendre',
                'comp√©tences', 'pr√©paration', '√©tudier'
            ],
            TransitionPhase.ACTION: [
                'postuler', 'candidature', 'entretien', 'projet',
                'action', 'lancement', 'd√©marche'
            ],
            TransitionPhase.INTEGRATION: [
                'adaptation', 'int√©gration', 'nouveau poste', 'd√©buter',
                'commencer', 'premiers pas'
            ],
            TransitionPhase.BILAN: [
                'bilan', '√©valuation', 'r√©sultats', 'retour',
                'analyse', 'satisfaction', 'acquis'
            ]
        }
    
    def tag_user_notes(self, text: str, preserve_privacy: bool = True) -> NLPTagResult:
        """
        Analyse √©thique des notes utilisateur avec protection totale de la vie priv√©e
        
        Args:
            text: Texte √† analyser (jamais stock√©)
            preserve_privacy: Mode protection maximale (d√©faut: True)
            
        Returns:
            NLPTagResult: R√©sultats agr√©g√©s sans donn√©es personnelles
        """
        if not text or len(text.strip()) < 10:
            return NLPTagResult(
                original_text_length=len(text),
                emotion_tags=[],
                value_tags=[],
                transition_phase=TransitionPhase.QUESTIONNEMENT,
                confidence_score=0.0,
                anonymized_keywords=[]
            )
        
        # Normalisation du texte (minuscules, suppression accents)
        normalized_text = self._normalize_text(text.lower())
        
        # Analyse des √©motions
        emotion_tags = self._detect_emotions(normalized_text)
        
        # Analyse des valeurs  
        value_tags = self._detect_values(normalized_text)
        
        # D√©tection de la phase de transition
        transition_phase = self._detect_transition_phase(normalized_text)
        
        # Score de confiance bas√© sur le nombre de matches
        confidence_score = self._calculate_confidence_score(
            len(emotion_tags), len(value_tags), len(normalized_text)
        )
        
        # Extraction de mots-cl√©s anonymis√©s (sans donn√©es personnelles)
        anonymized_keywords = []
        if not preserve_privacy:  # Seulement si explicitement autoris√©
            anonymized_keywords = self._extract_safe_keywords(normalized_text)
        
        return NLPTagResult(
            original_text_length=len(text),
            emotion_tags=emotion_tags,
            value_tags=value_tags,
            transition_phase=transition_phase,
            confidence_score=confidence_score,
            anonymized_keywords=anonymized_keywords
        )
    
    def _normalize_text(self, text: str) -> str:
        """Normalisation du texte pour l'analyse"""
        # Suppression des caract√®res sp√©ciaux, garde les lettres et espaces
        text = re.sub(r'[^\w\s]', ' ', text)
        # Suppression des espaces multiples
        text = re.sub(r'\s+', ' ', text)
        return text.strip()
    
    def _detect_emotions(self, text: str) -> List[EmotionTag]:
        """D√©tection des √©motions dans le texte"""
        detected_emotions = []
        
        for emotion, patterns in self.emotion_patterns.items():
            for pattern in patterns:
                if re.search(pattern, text):
                    detected_emotions.append(emotion)
                    break  # Un seul match suffit par √©motion
                    
        return detected_emotions
    
    def _detect_values(self, text: str) -> List[ValueTag]:
        """D√©tection des valeurs dans le texte"""
        detected_values = []
        
        for value, patterns in self.value_patterns.items():
            for pattern in patterns:
                if re.search(pattern, text):
                    detected_values.append(value)
                    break  # Un seul match suffit par valeur
                    
        return detected_values
    
    def _detect_transition_phase(self, text: str) -> TransitionPhase:
        """D√©tection de la phase de transition dominante"""
        phase_scores = {}
        
        for phase, patterns in self.transition_patterns.items():
            score = 0
            for pattern in patterns:
                matches = len(re.findall(pattern, text))
                score += matches
            phase_scores[phase] = score
        
        # Phase avec le score le plus √©lev√©
        if max(phase_scores.values()) == 0:
            return TransitionPhase.QUESTIONNEMENT  # Par d√©faut
            
        return max(phase_scores, key=phase_scores.get)
    
    def _calculate_confidence_score(self, emotion_count: int, value_count: int, text_length: int) -> float:
        """Calcul du score de confiance de l'analyse"""
        if text_length < 50:
            return 0.3  # Texte trop court
        
        total_tags = emotion_count + value_count
        
        # Score bas√© sur la richesse s√©mantique
        if total_tags == 0:
            return 0.1
        elif total_tags <= 2:
            return 0.5
        elif total_tags <= 4:
            return 0.7
        else:
            return 0.9
    
    def _extract_safe_keywords(self, text: str) -> List[str]:
        """
        Extraction de mots-cl√©s anonymis√©s (sans donn√©es personnelles)
        
        ATTENTION: Ne jamais utiliser en mode production sans consentement explicite
        """
        # Liste de mots "s√ªrs" (sans donn√©es personnelles)
        safe_words = []
        words = text.split()
        
        # Filtrage des mots potentiellement personnels
        personal_indicators = [
            'je', 'mon', 'ma', 'mes', 'moi', 'nous', 'notre', 'nos',
            '@', '.com', '.fr', 't√©l', 't√©l√©phone', 'adresse'
        ]
        
        for word in words:
            if len(word) > 4 and not any(indicator in word.lower() for indicator in personal_indicators):
                safe_words.append(word)
        
        return safe_words[:10]  # Maximum 10 mots-cl√©s


def batch_analyze_notes(notes: List[str], preserve_privacy: bool = True) -> List[NLPTagResult]:
    """
    Analyse en lot de notes utilisateur avec protection de la vie priv√©e
    
    Args:
        notes: Liste des notes √† analyser
        preserve_privacy: Mode protection maximale
        
    Returns:
        List[NLPTagResult]: R√©sultats d'analyse anonymis√©s
    """
    tagger = EthicalNLPTagger()
    results = []
    
    for note in notes:
        if note and note.strip():
            result = tagger.tag_user_notes(note, preserve_privacy)
            results.append(result)
    
    return results


def get_aggregated_insights(results: List[NLPTagResult]) -> Dict:
    """
    G√©n√©ration d'insights agr√©g√©s pour la recherche (anonymes)
    
    Args:
        results: R√©sultats d'analyses individuelles
        
    Returns:
        Dict: Statistiques agr√©g√©es anonymes
    """
    if not results:
        return {}
    
    # Comptage des √©motions
    emotion_counts = {}
    for result in results:
        for emotion in result.emotion_tags:
            emotion_counts[emotion.value] = emotion_counts.get(emotion.value, 0) + 1
    
    # Comptage des valeurs
    value_counts = {}
    for result in results:
        for value in result.value_tags:
            value_counts[value.value] = value_counts.get(value.value, 0) + 1
    
    # Phases de transition
    phase_counts = {}
    for result in results:
        phase = result.transition_phase.value
        phase_counts[phase] = phase_counts.get(phase, 0) + 1
    
    # Score de confiance moyen
    avg_confidence = sum(r.confidence_score for r in results) / len(results)
    
    return {
        "total_analyses": len(results),
        "emotion_distribution": emotion_counts,
        "value_distribution": value_counts, 
        "transition_phase_distribution": phase_counts,
        "average_confidence_score": round(avg_confidence, 2),
        "ethics_compliance": True,
        "privacy_preserved": True
    }


# üî¨ EXEMPLE D'UTILISATION √âTHIQUE
if __name__ == "__main__":
    # Donn√©es de test (non personnelles)
    test_notes = [
        "Je me sens √©puis√© par mon travail actuel, j'aimerais trouver plus de sens dans ce que je fais.",
        "J'explore diff√©rentes possibilit√©s de reconversion, je cherche plus d'autonomie et de cr√©ativit√©.",
        "Je suis motiv√© pour changer de carri√®re, je veux avoir un impact social plus important."
    ]
    
    # Analyse √©thique
    tagger = EthicalNLPTagger()
    results = []
    
    print("üî¨ ANALYSE NLP √âTHIQUE - RECHERCHE-ACTION PHOENIX")
    print("=" * 60)
    
    for i, note in enumerate(test_notes, 1):
        result = tagger.tag_user_notes(note, preserve_privacy=True)
        results.append(result)
        
        print(f"\nNote {i} (longueur: {result.original_text_length} caract√®res)")
        print(f"√âmotions d√©tect√©es: {[e.value for e in result.emotion_tags]}")
        print(f"Valeurs d√©tect√©es: {[v.value for v in result.value_tags]}")
        print(f"Phase de transition: {result.transition_phase.value}")
        print(f"Score de confiance: {result.confidence_score}")
    
    # Insights agr√©g√©s
    print("\n" + "=" * 60)
    print("üìä INSIGHTS AGR√âG√âS (ANONYMES)")
    print("=" * 60)
    insights = get_aggregated_insights(results)
    
    for key, value in insights.items():
        print(f"{key}: {value}")