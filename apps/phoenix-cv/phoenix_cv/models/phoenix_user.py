"""
Phoenix User Entity - Copie locale pour Ã©viter les problÃ¨mes d'import
EntitÃ© utilisateur unifiÃ©e pour Phoenix CV
"""

import uuid
from dataclasses import dataclass, field
from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Set


class PhoenixApp(Enum):
    """Applications de l'Ã©cosystÃ¨me Phoenix"""
    LETTERS = "letters"
    CV = "cv"
    RISE = "rise"
    SITE = "site"


class UserTier(Enum):
    """Niveaux d'abonnement utilisateur"""
    FREE = "free"
    PREMIUM = "premium"
    PREMIUM_PLUS = "premium_plus"


class AppPermission(Enum):
    """Permissions spÃ©cifiques par application"""
    # Phoenix Letters
    GENERATE_LETTER = "generate_letter"
    PREMIUM_TEMPLATES = "premium_templates"
    UNLIMITED_GENERATIONS = "unlimited_generations"
    
    # Phoenix CV
    GENERATE_CV = "generate_cv"
    ATS_OPTIMIZATION = "ats_optimization"
    PREMIUM_CV_TEMPLATES = "premium_cv_templates"
    
    # Phoenix Rise
    COACHING_ACCESS = "coaching_access"
    PREMIUM_COACHING = "premium_coaching"
    MOOD_TRACKING = "mood_tracking"
    
    # Cross-app
    CROSS_APP_DATA = "cross_app_data"
    IRIS_INTEGRATION = "iris_integration"


@dataclass
class PhoenixUser:
    """Utilisateur unifiÃ© Phoenix avec support multi-applications"""
    
    # Identification
    user_id: str = field(default_factory=lambda: str(uuid.uuid4()))
    email: str = ""
    username: Optional[str] = None
    
    # Profil
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    created_at: datetime = field(default_factory=datetime.now)
    last_login: Optional[datetime] = None
    
    # Abonnement et permissions
    tier: UserTier = UserTier.FREE
    app_permissions: Dict[PhoenixApp, Set[AppPermission]] = field(default_factory=dict)
    
    # DonnÃ©es par application
    app_data: Dict[PhoenixApp, Dict] = field(default_factory=dict)
    
    # MÃ©tadonnÃ©es
    is_active: bool = True
    email_verified: bool = False
    
    # ðŸ”¬ RECHERCHE-ACTION PHOENIX - Consentement Ã‰thique
    research_consent: bool = False  # Opt-in explicite pour contribution anonymisÃ©e Ã  la recherche
    
    def has_permission(self, app: PhoenixApp, permission: AppPermission) -> bool:
        """VÃ©rifie si l'utilisateur a une permission spÃ©cifique"""
        return permission in self.app_permissions.get(app, set())
    
    def is_premium(self) -> bool:
        """VÃ©rifie si l'utilisateur a un abonnement premium"""
        return self.tier in [UserTier.PREMIUM, UserTier.PREMIUM_PLUS]