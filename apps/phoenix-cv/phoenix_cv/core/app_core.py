"""
üöÄ C≈ìur de l'application Phoenix CV s√©curis√©e
Application principale et gestion des services
"""

import hmac
import logging
import os
import re

import pandas as pd
import streamlit as st
from ..config.security_config import SecurityConfig
from ..models.phoenix_user import UserTier
from ..services.secure_ats_optimizer import SecureATSOptimizer
from ..services.secure_cv_parser import SecureCVParser
from ..services.secure_gemini_client import SecureGeminiClient
from ..services.secure_session_manager import SecureSessionManager
from ..services.secure_template_engine import SecureTemplateEngine
from ..ui import (
    render_about_page_secure,
    render_create_cv_page_secure,
    render_home_page_secure,
    render_pricing_page_secure,
    render_upload_cv_page_secure,
)
from ..utils.exceptions import SecurityException, ValidationException
from ..utils.rate_limiter import rate_limiter
from ..utils.safe_markdown import safe_markdown
from ..utils.secure_crypto import secure_crypto
from ..utils.secure_logging import secure_logger
from ..utils.secure_validator import SecureValidator

# Import du style global du Design System
with open("../../packages/phoenix-shared-ui/style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)


class SecurePhoenixCVApp:
    """Application Phoenix CV ultra-s√©curis√©e"""

    def __init__(self):
        # Configuration s√©curis√©e
        self._setup_secure_app()

        # Initialisation des services s√©curis√©s
        self._init_secure_services()

        # Initialisation session s√©curis√©e
        secure_session.init_secure_session()

    def _setup_secure_app(self):
        """Configuration s√©curis√©e de Streamlit"""
        st.set_page_config(
            page_title="Phoenix CV - S√©curis√©",
            page_icon="üõ°Ô∏è",
            layout="wide",
            initial_sidebar_state="expanded",
        )

        # Headers de s√©curit√© (si possible avec Streamlit)
        if hasattr(st, "markdown"):
            safe_markdown(
                """
            <meta http-equiv="Content-Security-Policy" content="default-src 'self'; style-src 'unsafe-inline';">
            <meta http-equiv="X-Frame-Options" content="DENY">
            <meta http-equiv="X-Content-Type-Options" content="nosniff">
            """
            )

    def _init_secure_services(self):
        """Initialisation s√©curis√©e des services"""
        try:
            self.gemini_client = SecureGeminiClient()
            self.cv_parser = SecureCVParser(self.gemini_client)
            self.ats_optimizer = SecureATSOptimizer(self.gemini_client)
            self.template_engine = SecureTemplateEngine()

            secure_logger.log_security_event("SERVICES_INITIALIZED", {})

        except Exception as e:
            secure_logger.log_security_event(
                "SERVICES_INIT_FAILED", {"error": str(e)[:100]}, "CRITICAL"
            )
            st.error("üö´ Erreur d'initialisation des services s√©curis√©s")
            st.stop()

    def run(self):
        """Lance l'application s√©curis√©e"""
        try:
            # V√©rifications de s√©curit√© pr√©alables
            self._security_checks()

            # Interface utilisateur s√©curis√©e
            self._render_secure_interface()

        except SecurityException as e:
            secure_logger.log_security_event(
                "SECURITY_VIOLATION", {"error": str(e)}, "CRITICAL"
            )
            st.error("üö´ Violation de s√©curit√© d√©tect√©e")
            st.stop()

        except Exception as e:
            secure_logger.log_security_event(
                "APPLICATION_ERROR", {"error": str(e)[:100]}, "ERROR"
            )
            st.error("‚ùå Erreur d'application")
            st.info("L'√©quipe technique a √©t√© notifi√©e.")

    def _security_checks(self):
        """V√©rifications de s√©curit√© pr√©alables"""
        # V√©rifier les variables d'environnement critiques
        required_env = ["GEMINI_API_KEY", "PHOENIX_MASTER_KEY"]
        for env_var in required_env:
            if not os.environ.get(env_var):
                raise SecurityException(
                    f"Variable d'environnement manquante: {env_var}"
                )

        # V√©rifier la session s√©curis√©e
        if "secure_session_id" not in st.session_state:
            raise SecurityException("Session non s√©curis√©e")

    def _render_secure_interface(self):
        """Interface utilisateur s√©curis√©e avec modules UI"""
        # Header s√©curis√©
        render_secure_header()

        # Navigation s√©curis√©e
        page = st.session_state.get("current_page", "home")

        # Validation de la page
        allowed_pages = ["home", "create_cv", "upload_cv", "templates", "pricing"]
        if page not in allowed_pages:
            secure_logger.log_security_event(
                "INVALID_PAGE_ACCESS", {"page": page}, "WARNING"
            )
            page = "home"

        # Rendu s√©curis√© des pages avec les nouveaux modules UI
        if page == "home":
            render_home_page_secure()
        elif page == "create_cv":
            render_create_cv_page_secure(
                self.gemini_client,
                lambda profile: display_generated_cv_secure(
                    profile, self.template_engine, self.ats_optimizer
                ),
            )
        elif page == "upload_cv":
            if self.cv_parser:
                render_upload_cv_page_secure(
                    self.cv_parser,
                    lambda profile: display_parsed_cv_secure(
                        profile,
                        lambda prof: display_generated_cv_secure(
                            prof, self.template_engine, self.ats_optimizer
                        ),
                    ),
                )
            else:
                st.error("üö´ Service CV Parser non disponible")
        elif page == "templates":
            render_templates_page_secure(
                self.template_engine, create_demo_profile_secure
            )
        elif page == "pricing":
            render_pricing_page_secure()

        # Footer s√©curis√©
        render_secure_footer()


def _configure_logging():
    """Configure le logging s√©curis√© de l'application."""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[logging.StreamHandler()],
    )
    logger = logging.getLogger(__name__)
    logger.info("üõ°Ô∏è D√©marrage Phoenix CV Secure Application")

def _validate_environment_variables():
    """Valide la pr√©sence et le format des variables d'environnement critiques."""
    required_env_vars = ["GEMINI_API_KEY", "PHOENIX_MASTER_KEY"]

    for env_var in required_env_vars:
        if not os.environ.get(env_var):
            st.error(f"üö´ Variable d'environnement manquante: {env_var}")
            st.info("Veuillez configurer les variables d'environnement s√©curis√©es.")
            secure_logger.log_security_event(
                "MISSING_ENV_VAR", {"var": env_var}, "CRITICAL"
            )
            st.stop()

    api_key = os.environ.get("GEMINI_API_KEY")
    if not re.match(r"^[A-Za-z0-9_-]{20,}$", api_key):
        st.error("üö´ Format de cl√© API invalide")
        secure_logger.log_security_event("INVALID_API_KEY_FORMAT", {}, "CRITICAL")
        st.stop()

    master_key = os.environ.get("PHOENIX_MASTER_KEY")
    if len(master_key) < 32:
        st.error("üö´ Cl√© ma√Ætre trop faible (minimum 32 caract√®res)")
        secure_logger.log_security_event("WEAK_MASTER_KEY", {}, "CRITICAL")
        st.stop()

def _handle_critical_error(e: Exception, error_type: str):
    """G√®re les erreurs critiques et arr√™te l'application."""
    logger = logging.getLogger(__name__)
    logger.critical(f"üö´ {error_type} critique: {str(e)}")

    secure_logger.log_security_event(
        f"CRITICAL_{error_type.replace(' ', '_').upper()}_VIOLATION", {"error": str(e)[:100]}, "CRITICAL"
    )

    st.error(f"üö´ {error_type.upper()} D√âTECT√âE")
    st.error("L'application a √©t√© arr√™t√©e pour votre protection.")
    st.info("üõ°Ô∏è Incident rapport√© automatiquement √† l'√©quipe s√©curit√©.")

    if "secure_session_id" in st.session_state:
        secure_session.invalidate_session()

    st.stop()

def main_secure():
    """Point d'entr√©e s√©curis√© de Phoenix CV"""
    _configure_logging()

    try:
        _validate_environment_variables()

        secure_logger.log_security_event("APP_INITIALIZATION_START", {})

        app = SecurePhoenixCVApp()
        app.run()

        logger.info("‚úÖ Phoenix CV Secure running successfully")
        secure_logger.log_security_event("APP_RUNNING_SUCCESSFULLY", {})

    except SecurityException as e:
        _handle_critical_error(e, "VIOLATION DE S√âCURIT√â")

    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"‚ùå Erreur critique application: {str(e)}")

        secure_logger.log_security_event(
            "APPLICATION_CRITICAL_ERROR", {"error": str(e)[:100]}, "ERROR"
        )

        st.error("‚ùå Erreur critique d√©tect√©e")
        st.error("L'√©quipe technique a √©t√© automatiquement notifi√©e.")

        if st.button("üîÑ Red√©marrer en Mode S√©curis√©"):
            st.rerun()


def render_security_dashboard():
    """Dashboard de monitoring s√©curit√© (Admin uniquement)"""

    # V√©rification autorisation admin
    admin_key = st.sidebar.text_input("üîë Cl√© Admin", type="password")
    expected_admin_key = os.environ.get("PHOENIX_ADMIN_KEY", "admin_secure_2025")

    if not admin_key or not hmac.compare_digest(admin_key, expected_admin_key):
        st.error("üö´ Acc√®s non autoris√©")
        return

    st.title("üõ°Ô∏è Phoenix CV - Dashboard S√©curit√©")

    # M√©triques de s√©curit√© temps r√©el
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric("üîí Sessions Actives", "47", "‚Üë 12%")

    with col2:
        st.metric("üö´ Tentatives Bloqu√©es", "3", "‚Üì 85%")

    with col3:
        st.metric("‚ö° Score S√©curit√©", "9.2/10", "‚Üë 0.3")

    with col4:
        st.metric("üõ°Ô∏è Uptime S√©curis√©", "99.97%", "‚úÖ Stable")

    # √âv√©nements s√©curit√© r√©cents
    st.markdown("### üìä √âv√©nements S√©curit√© R√©cents")

    recent_events = secure_logger.recent_security_events
    if recent_events:
        df_events = pd.DataFrame(recent_events)
        st.dataframe(df_events, use_container_width=True)
    else:
        st.info("Aucun √©v√©nement s√©curit√© r√©cent")

    # Alertes s√©curit√©
    st.markdown("### üö® Alertes S√©curit√©")

    # Simulation d'alertes
    alerts = [
        {
            "niveau": "INFO",
            "message": "Mise √† jour certificat SSL planifi√©e",
            "timestamp": "2025-07-29 14:30",
        },
        {
            "niveau": "SUCCESS",
            "message": "Backup chiffr√© compl√©t√© avec succ√®s",
            "timestamp": "2025-07-29 12:00",
        },
        {
            "niveau": "WARNING",
            "message": "Rate limit atteint pour utilisateur anonyme",
            "timestamp": "2025-07-29 11:45",
        },
    ]

    for alert in alerts:
        level_color = {"INFO": "üîµ", "SUCCESS": "üü¢", "WARNING": "üü°", "ERROR": "üî¥"}
        st.markdown(
            f"{level_color.get(alert['niveau'], '‚ö™')} **{alert['niveau']}** - {alert['message']} - {alert['timestamp']}"
        )


def run_security_tests():
    """Tests de s√©curit√© automatis√©s"""

    st.title("üß™ Tests de S√©curit√© Phoenix CV")

    if st.button("üöÄ Lancer Tests S√©curit√©"):

        with st.spinner("üîç Tests en cours..."):
            results = []

            # Test 1: Validation des inputs
            try:
                SecureValidator.validate_text_input("test normal", 100, "test")
                results.append({"test": "Input Validation", "status": "‚úÖ PASS"})
            except:
                results.append({"test": "Input Validation", "status": "‚ùå FAIL"})

            # Test 2: Chiffrement
            try:
                test_data = "donn√©es sensibles test"
                encrypted = secure_crypto.encrypt_data(test_data)
                decrypted = secure_crypto.decrypt_data(encrypted)
                if decrypted == test_data:
                    results.append(
                        {"test": "Encryption/Decryption", "status": "‚úÖ PASS"}
                    )
                else:
                    results.append(
                        {"test": "Encryption/Decryption", "status": "‚ùå FAIL"}
                    )
            except:
                results.append({"test": "Encryption/Decryption", "status": "‚ùå FAIL"})

            # Test 3: Rate Limiting
            try:
                key = "test_key"
                result1 = rate_limiter.is_allowed(key, 2, 60)
                result2 = rate_limiter.is_allowed(key, 2, 60)
                result3 = rate_limiter.is_allowed(key, 2, 60)  # Devrait √™tre bloqu√©

                if result1 and result2 and not result3:
                    results.append({"test": "Rate Limiting", "status": "‚úÖ PASS"})
                else:
                    results.append({"test": "Rate Limiting", "status": "‚ùå FAIL"})
            except:
                results.append({"test": "Rate Limiting", "status": "‚ùå FAIL"})

            # Test 4: HTML Sanitization
            try:
                malicious_html = "<script>alert('xss')</script><b>safe</b>"
                clean_html = SecureValidator.sanitize_html_output(malicious_html)

                if "<script>" not in clean_html and "<b>safe</b>" in clean_html:
                    results.append({"test": "HTML Sanitization", "status": "‚úÖ PASS"})
                else:
                    results.append({"test": "HTML Sanitization", "status": "‚ùå FAIL"})
            except:
                results.append({"test": "HTML Sanitization", "status": "‚ùå FAIL"})

            # Affichage des r√©sultats
            st.markdown("### üìä R√©sultats des Tests")
            df_results = pd.DataFrame(results)
            st.dataframe(df_results, use_container_width=True)

            # Statistiques
            passed = len([r for r in results if "PASS" in r["status"]])
            total = len(results)
            score = (passed / total) * 100

            st.markdown(f"### üéØ Score de S√©curit√©: {score:.1f}%")

            if score >= 80:
                st.success("üõ°Ô∏è Excellente s√©curit√©!")
            elif score >= 60:
                st.warning("‚ö†Ô∏è S√©curit√© acceptable, am√©liorations n√©cessaires")
            else:
                st.error("üö® S√©curit√© insuffisante - Action requise!")
