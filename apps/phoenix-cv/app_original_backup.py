"""
üöÄ PHOENIX CV - G√©n√©rateur IA de CV pour Reconversions Professionnelles
Version Marketing Simplifi√©e - Pr√™t pour d√©mo
"""

import json
import os
import tempfile
from datetime import datetime
from io import BytesIO

import docx
import google.generativeai as genai
import PyPDF2
import streamlit as st


# Chargement des variables d'environnement depuis .env
def load_env_file():
    """Charge les variables d'environnement depuis le fichier .env"""
    env_path = os.path.join(os.path.dirname(__file__), ".env")
    if os.path.exists(env_path):
        with open(env_path, "r") as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith("#") and "=" in line:
                    key, value = line.split("=", 1)
                    os.environ[key.strip()] = value.strip()


# Charger le fichier .env au d√©marrage
load_env_file()


def configure_page():
    """Configuration de la page Streamlit optimis√©e mobile"""
    st.set_page_config(
        page_title="Phoenix CV - G√©n√©rateur IA de CV",
        page_icon="üöÄ",
        layout="wide",
        initial_sidebar_state="auto",  # Auto-collapse sur mobile
    )

    # CSS mobile-first
    st.markdown(
        """
    <style>
    /* Mobile-first responsive design */
    @media (max-width: 768px) {
        .main .block-container {
            padding-top: 1rem;
            padding-left: 1rem;
            padding-right: 1rem;
            max-width: 100%;
        }
        
        /* Sidebar auto-hide sur mobile */
        .css-1d391kg {
            padding-top: 1rem;
        }
        
        /* Boutons plus gros pour touch */
        .stButton > button {
            height: 3rem;
            font-size: 1.1rem;
            font-weight: bold;
        }
        
        /* Text inputs plus hauts */
        .stTextInput > div > div > input {
            height: 3rem;
            font-size: 1rem;
        }
        
        /* Textarea plus accessible */
        .stTextArea > div > div > textarea {
            font-size: 1rem;
            min-height: 120px;
        }
    }
    
    /* Am√©lioration g√©n√©rale */
    .stButton > button {
        border-radius: 8px;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    </style>
    """,
        unsafe_allow_html=True,
    )


def is_dev_mode():
    """V√©rifie si l'application est en mode d√©veloppement"""
    return os.environ.get("DEV_MODE", "false").lower() == "true"


def setup_gemini():
    """Configuration s√©curis√©e de Gemini AI"""
    if is_dev_mode():
        st.warning(
            "üé≠ **MODE D√âMONSTRATION** - Les r√©sultats g√©n√©r√©s sont des exemples pour pr√©senter les fonctionnalit√©s. En mode production, Phoenix CV utilise l'IA Gemini pour des r√©sultats personnalis√©s et optimis√©s."
        )
        return None  # Pas besoin du mod√®le en mode dev

    api_key = os.environ.get("GEMINI_API_KEY") or st.secrets.get("GEMINI_API_KEY")

    if not api_key:
        st.error("üö´ Cl√© API Gemini manquante")
        st.info("Veuillez configurer GEMINI_API_KEY dans les variables d'environnement")
        st.stop()

    genai.configure(api_key=api_key)
    return genai.GenerativeModel("gemini-1.5-flash")


def extract_text_from_pdf(uploaded_file):
    """Extraction de texte depuis un PDF"""
    try:
        pdf_reader = PyPDF2.PdfReader(BytesIO(uploaded_file.read()))
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        return text
    except Exception as e:
        st.error(f"Erreur lors de la lecture du PDF: {str(e)}")
        return None


def extract_text_from_docx(uploaded_file):
    """Extraction de texte depuis un DOCX"""
    try:
        doc = docx.Document(BytesIO(uploaded_file.read()))
        text = ""
        for paragraph in doc.paragraphs:
            text += paragraph.text + "\\n"
        return text
    except Exception as e:
        st.error(f"Erreur lors de la lecture du DOCX: {str(e)}")
        return None


def get_mock_cv_content(profile_data, target_job):
    """G√©n√®re un CV mock pour le mode d√©veloppement"""
    return f"""# CV - Reconversion Professionnelle

## üë§ Profil Professionnel
Professionnel en reconversion vers **{target_job}**, fort de mon exp√©rience diversifi√©e et de mes comp√©tences transf√©rables. Motiv√© par les nouveaux d√©fis et d√©termin√© √† apporter une valeur ajout√©e gr√¢ce √† mon parcours atypique.

## ‚ö° Comp√©tences Cl√©s
- **Leadership & Management** : Gestion d'√©quipe et coordination de projets
- **Communication** : Excellent relationnel client et pr√©sentation
- **Adaptation** : Capacit√© d'apprentissage rapide et flexibilit√©
- **Analyse** : R√©solution de probl√®mes et prise de d√©cision
- **Num√©rique** : Ma√Ætrise des outils digitaux et nouvelles technologies

## üíº Exp√©rience Professionnelle

### Exp√©rience Ant√©rieure (Transf√©rable)
**Responsable d'√©quipe** - Secteur pr√©c√©dent (2020-2024)
- Encadrement d'une √©quipe de 10 personnes
- Am√©lioration des processus : +25% d'efficacit√©
- Gestion budg√©taire : 500K‚Ç¨ annuels
- Formation et d√©veloppement des collaborateurs

### Projets de Reconversion
**Formation & Projets personnels** (2024)
- Certification professionnelle en {target_job}
- R√©alisation de projets pratiques
- Veille technologique active
- Networking sectoriel

## üéì Formation
- **Formation sp√©cialis√©e** en {target_job} (2024)
- **Dipl√¥me initial** - Domaine d'origine (2018)
- **Certifications compl√©mentaires** : Google Analytics, Project Management

## üöÄ Atouts pour la Reconversion
- **Vision transversale** gr√¢ce √† mon parcours diversifi√©
- **Motivation exceptionnelle** pour ce nouveau d√©fi
- **Comp√©tences relationnelles** d√©velopp√©es
- **Capacit√© d'adaptation** prouv√©e
- **Engagement** dans une d√©marche d'am√©lioration continue

---
*‚ö†Ô∏è D√âMONSTRATION - Ce CV est g√©n√©r√© avec des donn√©es d'exemple pour la pr√©sentation. Le vrai service utilise l'IA Gemini pour des r√©sultats personnalis√©s et optimis√©s selon votre profil r√©el.*"""


def get_mock_analysis(cv_content, job_description):
    """G√©n√®re une analyse mock pour le mode d√©veloppement"""
    return """## üìä Analyse de Correspondance CV/Offre

### üéØ Score de Correspondance : 78%

### ‚úÖ Points Forts
- **Exp√©rience manag√©riale** directement transf√©rable
- **Comp√©tences en gestion de projet** tr√®s recherch√©es
- **Capacit√© d'adaptation** clairement d√©montr√©e
- **Formation r√©cente** dans le domaine cible
- **Soft skills** exceptionnelles

### ‚ö†Ô∏è Points d'Am√©lioration
- **Exp√©rience technique** √† approfondir
- **Certifications sp√©cialis√©es** √† obtenir
- **Portfolio** de projets √† √©toffer
- **R√©seau professionnel** √† d√©velopper dans le nouveau secteur

### üîç Mots-Cl√©s Manquants
- Technologies sp√©cifiques au poste
- Certifications sectorielles
- Outils m√©tier sp√©cialis√©s
- Jargon technique du domaine

### üöÄ Recommandations d'Optimisation
1. **Ajouter une section "Projets"** mettant en avant vos r√©alisations
2. **Int√©grer les mots-cl√©s** de l'offre d'emploi
3. **Quantifier vos r√©sultats** avec des chiffres pr√©cis
4. **Mettre en avant votre formation** en reconversion
5. **Adapter le titre** pour correspondre au poste vis√©

### üí° Conseils Sp√©cifiques
- Commencez votre CV par un **r√©sum√© accrocheur** expliquant votre reconversion
- Utilisez des **verbes d'action** pour d√©crire vos exp√©riences
- Cr√©ez des **liens** entre votre exp√©rience pass√©e et le poste cible
- Montrez votre **proactivit√©** dans l'apprentissage du nouveau domaine

*‚ö†Ô∏è D√âMONSTRATION - Cette analyse est g√©n√©r√©e avec des donn√©es d'exemple pour la pr√©sentation. Le vrai service utilise l'IA Gemini pour des analyses personnalis√©es et pr√©cises selon votre CV et l'offre d'emploi r√©els.*"""


def generate_cv_content(model, profile_data, target_job=""):
    """G√©n√®re le contenu du CV avec Gemini AI ou mock selon le mode"""

    # Mode DEV : Retourne un CV mock
    if is_dev_mode():
        return get_mock_cv_content(profile_data, target_job)

    # Mode PROD : Utilise l'API Gemini avec fallback
    prompt = f"""
    Tu es un expert en reconversion professionnelle et r√©daction de CV.
    
    Cr√©e un CV professionnel et moderne pour une reconversion professionnelle bas√© sur ces informations :
    
    PROFIL :
    {profile_data}
    
    POSTE VIS√â : {target_job if target_job else "Poste en reconversion professionnelle"}
    
    INSTRUCTIONS :
    - Mets l'accent sur les comp√©tences transf√©rables
    - Valorise l'exp√©rience m√™me si elle vient d'un autre secteur
    - Utilise un ton professionnel et confiant
    - Structure : Profil professionnel, Comp√©tences cl√©s, Exp√©rience, Formation, Atouts
    - Maximum 2 pages √©quivalent
    
    R√©ponds uniquement avec le contenu du CV format√© en markdown.
    """

    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erreur API Gemini: {str(e)}")
        st.info("üîÑ Utilisation du fallback intelligent...")
        return get_mock_cv_content(profile_data, target_job)


def analyze_cv_for_job(model, cv_content, job_description):
    """Analyse la correspondance CV/Offre d'emploi avec fallback intelligent"""

    # Mode DEV : Retourne une analyse mock
    if is_dev_mode():
        return get_mock_analysis(cv_content, job_description)

    # Mode PROD : Utilise l'API Gemini avec fallback
    prompt = f"""
    Tu es un expert ATS (Applicant Tracking System) et recruteur.
    
    Analyse la correspondance entre ce CV et cette offre d'emploi :
    
    CV :
    {cv_content}
    
    OFFRE D'EMPLOI :
    {job_description}
    
    Fournis une analyse structur√©e avec :
    1. Score de correspondance (0-100%)
    2. Points forts (3-5 √©l√©ments)
    3. Points d'am√©lioration (3-5 √©l√©ments)
    4. Mots-cl√©s manquants importants
    5. Recommandations d'optimisation
    
    Sois constructif et pr√©cis.
    """

    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Erreur API Gemini: {str(e)}")
        st.info("üîÑ Utilisation du fallback intelligent...")
        return get_mock_analysis(cv_content, job_description)


def render_header():
    """Rendu du header de l'application"""

    # Google Analytics (uniquement en production)
    if not is_dev_mode():
        st.markdown(
            """
        <!-- Google Analytics -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=G-XXXXXXXXXX"></script>
        <script>
          window.dataLayer = window.dataLayer || [];
          function gtag(){dataLayer.push(arguments);}
          gtag('js', new Date());
          gtag('config', 'G-XXXXXXXXXX');
        </script>
        """,
            unsafe_allow_html=True,
        )

    # Indicateur de mode
    mode_indicator = ""
    if is_dev_mode():
        mode_indicator = '<div style="background: #fff3cd; padding: 0.75rem; border-radius: 5px; margin-bottom: 1rem; border-left: 4px solid #ffc107;"><p style="margin: 0; color: #856404;"><strong>üé≠ MODE D√âMONSTRATION</strong> - R√©sultats d\'exemple pour pr√©sentation. En production, Phoenix CV g√©n√®re des contenus personnalis√©s avec l\'IA.</p></div>'

    st.markdown(
        f"""
    {mode_indicator}
    <div style="text-align: center; padding: 1.5rem 0;">
        <h1 style="margin-bottom: 0.5rem; font-size: clamp(1.8rem, 4vw, 2.5rem);">üöÄ Phoenix CV</h1>
        <h3 style="margin-bottom: 0.5rem; font-size: clamp(1rem, 3vw, 1.3rem); font-weight: 600;">
            G√©n√©rateur IA de CV pour Reconversions
        </h3>
        <p style="color: #666; margin-bottom: 1rem; font-size: clamp(0.9rem, 2.5vw, 1rem);">
            R√©volutionnez votre reconversion avec l'IA
        </p>
        <div style="margin-top: 1rem;">
            <div style="background: #e8f5e8; padding: 0.5rem 1rem; border-radius: 25px; color: #2e7d2e; 
                        font-size: clamp(0.8rem, 2vw, 0.9rem); display: inline-block; max-width: 90%;">
                ‚úÖ Gratuit ‚Ä¢ üöÄ IA Avanc√©e ‚Ä¢ üéØ Sp√©cialis√© Reconversions
            </div>
        </div>
    </div>
    """,
        unsafe_allow_html=True,
    )


def render_sidebar():
    """Rendu de la sidebar de navigation optimis√©e"""

    # Logo/Brand dans la sidebar
    st.sidebar.markdown(
        """
    <div style="text-align: center; padding: 1rem 0;">
        <h3>üöÄ Phoenix CV</h3>
        <p style="color: #666; margin: 0;">IA Reconversions</p>
    </div>
    """,
        unsafe_allow_html=True,
    )

    st.sidebar.markdown("---")

    # Navigation avec descriptions
    st.sidebar.markdown("### üéØ Navigation")

    pages = {
        "üè† D√©couvrir": "home",
        "‚ú® Cr√©er un CV": "create",
        "üìÑ Analyser CV": "analyze",
        "üé® Templates": "templates",
        "üí∞ Tarifs": "pricing",
    }

    selected_page = st.sidebar.radio(
        "", list(pages.keys()), label_visibility="collapsed"
    )

    # Call-to-action dans sidebar
    st.sidebar.markdown("---")

    if not is_dev_mode():
        # Seulement en production
        st.sidebar.markdown(
            """
        <div style="background: #e8f5e8; padding: 1rem; border-radius: 8px; text-align: center;">
            <h4 style="margin: 0; color: #2e7d2e;">üí° Besoin d'aide ?</h4>
            <p style="margin: 0.5rem 0; font-size: 0.9rem;">Contactez-nous !</p>
            <a href="mailto:contact.phoenixletters@gmail.com" style="text-decoration: none;">
                <button style="background: #28a745; color: white; border: none; padding: 0.5rem 1rem; border-radius: 5px; cursor: pointer;">
                    üìß Contact
                </button>
            </a>
        </div>
        """,
            unsafe_allow_html=True,
        )

    return pages[selected_page]


def render_home_page():
    """Page d'accueil optimis√©e conversion"""

    # CTA Principal mobile-optimized
    st.markdown(
        """
    <div style="text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                padding: clamp(1.5rem, 4vw, 2rem); border-radius: 15px; margin: 1rem 0; color: white;">
        <h2 style="color: white; margin-bottom: 1rem; font-size: clamp(1.3rem, 4vw, 1.8rem); line-height: 1.3;">
            üéØ Cr√©ez votre CV de reconversion en 5 minutes
        </h2>
        <p style="color: #f0f0f0; font-size: clamp(0.95rem, 3vw, 1.1rem); margin-bottom: 1.5rem; line-height: 1.4;">
            L'IA sp√©cialis√©e reconversions qui valorise VRAIMENT votre parcours atypique
        </p>
    </div>
    """,
        unsafe_allow_html=True,
    )

    # Boutons d'action mobile-first
    # Sur mobile : pleine largeur, sur desktop : colonnes
    is_mobile = (
        st.sidebar.button(
            "üì± Mode Mobile", help="Toggle mobile view", key="mobile_toggle"
        )
        if "mobile_view" not in st.session_state
        else st.session_state.get("mobile_view", False)
    )

    if st.container():  # Toujours pleine largeur pour meilleure UX mobile
        if st.button(
            "üöÄ **CR√âER MON CV MAINTENANT**",
            type="primary",
            use_container_width=True,
            key="main_cta",
        ):
            st.session_state["current_page"] = "create"
            st.rerun()

        st.markdown("<div style='margin: 0.5rem 0;'></div>", unsafe_allow_html=True)

        if st.button(
            "üìä **ANALYSER MON CV EXISTANT**",
            use_container_width=True,
            key="analyze_cta",
        ):
            st.session_state["current_page"] = "analyze"
            st.rerun()

    st.markdown("---")

    st.markdown(
        """
    ## üåü Pourquoi Phoenix CV r√©volutionne les reconversions ?
    
    ### üéØ **Sp√©cialis√© Reconversions** (Seul sur le march√© fran√ßais)
    - ‚úÖ **Valorise vos comp√©tences transf√©rables** automatiquement
    - ‚úÖ **Adapte votre profil** au nouveau secteur vis√©
    - ‚úÖ **Optimise pour ATS** m√™me avec parcours atypique
    
    ### ü§ñ **IA Nouvelle G√©n√©ration**
    - ‚úÖ **Google Gemini 1.5 Flash** - La plus avanc√©e
    - ‚úÖ **Analyse s√©mantique** des offres d'emploi
    - ‚úÖ **G√©n√©ration contextuelle** selon votre secteur cible
    
    ### üõ°Ô∏è **100% S√©curis√© & Priv√©**
    - ‚úÖ **Traitement local** de vos donn√©es
    - ‚úÖ **Conformit√© RGPD** stricte
    - ‚úÖ **Z√©ro sauvegarde** de vos informations
    """
    )

    # T√©moignages/R√©sultats
    st.markdown(
        """
    <div style="background: #f8f9fa; padding: 1.5rem; border-radius: 10px; margin: 2rem 0;">
        <h3 style="text-align: center; color: #333;">üìä R√©sultats Prouv√©s</h3>
    </div>
    """,
        unsafe_allow_html=True,
    )

    # Stats responsive : stack vertical sur mobile, horizontal sur desktop
    st.markdown(
        """
    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem; margin: 1rem 0;">
    
        <div style="text-align: center; padding: 1.5rem; background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <h2 style="color: #28a745; margin: 0; font-size: clamp(1.8rem, 5vw, 2.5rem);">+85%</h2>
            <p style="margin: 0.5rem 0; font-weight: bold; font-size: clamp(0.9rem, 2.5vw, 1rem);">R√©ponses positives</p>
            <small style="color: #666; font-size: clamp(0.8rem, 2vw, 0.9rem);">VS CV traditionnel</small>
        </div>
        
        <div style="text-align: center; padding: 1.5rem; background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <h2 style="color: #007bff; margin: 0; font-size: clamp(1.8rem, 5vw, 2.5rem);">5 min</h2>
            <p style="margin: 0.5rem 0; font-weight: bold; font-size: clamp(0.9rem, 2.5vw, 1rem);">Temps de cr√©ation</p>
            <small style="color: #666; font-size: clamp(0.8rem, 2vw, 0.9rem);">Au lieu de 2-3 heures</small>
        </div>
        
        <div style="text-align: center; padding: 1.5rem; background: white; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <h2 style="color: #ffc107; margin: 0; font-size: clamp(1.8rem, 5vw, 2.5rem);">100%</h2>
            <p style="margin: 0.5rem 0; font-weight: bold; font-size: clamp(0.9rem, 2.5vw, 1rem);">Compatible ATS</p>
            <small style="color: #666; font-size: clamp(0.8rem, 2vw, 0.9rem);">Passe tous les filtres</small>
        </div>
        
    </div>
    """,
        unsafe_allow_html=True,
    )

    # Newsletter signup
    st.markdown("---")
    st.markdown(
        """
    <div style="text-align: center; padding: 1.5rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; color: white;">
        <h4 style="color: white; margin-bottom: 1rem;">üéØ Restez inform√© des nouveaut√©s Phoenix CV</h4>
        <p style="color: #f0f0f0; margin-bottom: 1rem;">Conseils reconversion, nouvelles fonctionnalit√©s, success stories...</p>
    </div>
    """,
        unsafe_allow_html=True,
    )

    # Email collection mobile-first
    with st.container():
        email_signup = st.text_input(
            "üìß Votre email",
            placeholder="votre.email@exemple.com",
            label_visibility="collapsed",
            key="newsletter_email",
        )

        st.markdown("<div style='margin: 0.5rem 0;'></div>", unsafe_allow_html=True)

        if st.button(
            "‚úÖ **S'ABONNER AUX MISES √Ä JOUR**",
            type="primary",
            use_container_width=True,
            key="newsletter_btn",
        ):
            if email_signup and "@" in email_signup:
                st.success(
                    "üéâ Merci ! Vous recevrez nos mises √† jour (bient√¥t disponible)"
                )
                # TODO: Int√©grer avec un service d'email marketing
            else:
                st.error("‚ö†Ô∏è Veuillez entrer un email valide")

    st.markdown(
        """
    <div style="text-align: center; padding: 1rem; background: #e8f4f8; border-radius: 10px;">
        <p style="color: #666; margin: 0;"><small>üîí Vos donn√©es sont prot√©g√©es. Pas de spam, d√©sabonnement facile.</small></p>
    </div>
    """,
        unsafe_allow_html=True,
    )


def render_create_cv_page(model):
    """Page de cr√©ation de CV"""
    st.markdown("## ‚ú® Cr√©er votre CV de Reconversion")

    with st.form("cv_form"):
        st.markdown("### üë§ Informations Personnelles")
        col1, col2 = st.columns(2)

        with col1:
            prenom = st.text_input("Pr√©nom *")
            nom = st.text_input("Nom *")
            email = st.text_input("Email *")

        with col2:
            telephone = st.text_input("T√©l√©phone")
            ville = st.text_input("Ville")
            linkedin = st.text_input("LinkedIn (optionnel)")

        st.markdown("### üéØ Objectif Professionnel")
        secteur_origine = st.text_input(
            "Secteur d'origine", placeholder="Ex: Commerce, Enseignement, Industrie..."
        )
        secteur_cible = st.text_input(
            "Secteur vis√© *", placeholder="Ex: D√©veloppement web, Marketing digital..."
        )
        poste_vise = st.text_input(
            "Poste recherch√© *",
            placeholder="Ex: D√©veloppeur Front-end, Chef de projet...",
        )

        st.markdown("### üíº Exp√©rience Professionnelle")
        experiences = st.text_area(
            "D√©crivez vos exp√©riences principales (3-5 derni√®res)",
            height=150,
            placeholder="Ex: Manager √©quipe 15 personnes chez ABC Corp (2020-2024)\\n- Gestion budget 500K‚Ç¨\\n- Am√©lioration productivit√© +25%...",
        )

        st.markdown("### üéì Formation")
        formations = st.text_area(
            "Formation et certifications",
            height=100,
            placeholder="Ex: Master Marketing - Universit√© Paris (2018)\\nCertification Google Analytics (2023)...",
        )

        st.markdown("### ‚ö° Comp√©tences")
        competences = st.text_area(
            "Comp√©tences techniques et soft skills",
            height=100,
            placeholder="Ex: Management d'√©quipe, Gestion de projet, Excel avanc√©, Anglais courant...",
        )

        submitted = st.form_submit_button("üöÄ G√©n√©rer mon CV", type="primary")

        if submitted:
            if (
                not prenom
                or not nom
                or not email
                or not secteur_cible
                or not poste_vise
            ):
                st.error("‚ö†Ô∏è Veuillez remplir tous les champs obligatoires (*)")
                return

            # Compilation des donn√©es
            profile_data = f"""
            IDENTIT√â : {prenom} {nom}
            CONTACT : {email} | {telephone} | {ville}
            LINKEDIN : {linkedin}
            
            RECONVERSION : {secteur_origine} ‚Üí {secteur_cible}
            POSTE VIS√â : {poste_vise}
            
            EXP√âRIENCES :
            {experiences}
            
            FORMATION :
            {formations}
            
            COMP√âTENCES :
            {competences}
            """

            with st.spinner("ü§ñ G√©n√©ration de votre CV en cours..."):
                cv_content = generate_cv_content(model, profile_data, poste_vise)

                if cv_content:
                    st.success("‚úÖ CV g√©n√©r√© avec succ√®s !")

                    # Affichage du CV
                    st.markdown("### üìÑ Votre CV G√©n√©r√©")
                    st.markdown(cv_content)

                    # Bouton de t√©l√©chargement
                    st.download_button(
                        label="üíæ T√©l√©charger le CV (Markdown)",
                        data=cv_content,
                        file_name=f"CV_{prenom}_{nom}_{datetime.now().strftime('%Y%m%d')}.md",
                        mime="text/markdown",
                    )


def render_analyze_cv_page(model):
    """Page d'analyse de CV"""
    st.markdown("## üìÑ Analyser votre CV existant")

    # Upload de CV
    uploaded_file = st.file_uploader(
        "üìÅ T√©l√©chargez votre CV",
        type=["pdf", "docx", "txt"],
        help="Formats accept√©s: PDF, DOCX, TXT",
    )

    cv_text = ""

    if uploaded_file:
        if uploaded_file.type == "application/pdf":
            cv_text = extract_text_from_pdf(uploaded_file)
        elif (
            uploaded_file.type
            == "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        ):
            cv_text = extract_text_from_docx(uploaded_file)
        else:  # txt
            cv_text = str(uploaded_file.read(), "utf-8")

        if cv_text:
            st.success("‚úÖ CV analys√© avec succ√®s")

            with st.expander("üëÄ Aper√ßu du contenu extrait"):
                st.text_area(
                    "Contenu",
                    cv_text[:1000] + "..." if len(cv_text) > 1000 else cv_text,
                    height=200,
                )

    # Analyse avec offre d'emploi
    st.markdown("### üéØ Analyse de Correspondance")
    job_description = st.text_area(
        "Collez l'offre d'emploi qui vous int√©resse",
        height=200,
        placeholder="Copiez-collez ici le texte de l'offre d'emploi pour analyser la correspondance avec votre CV...",
    )

    if (
        st.button("üîç Analyser la Correspondance", type="primary")
        and cv_text
        and job_description
    ):
        with st.spinner("ü§ñ Analyse en cours..."):
            analysis = analyze_cv_for_job(model, cv_text, job_description)

            if analysis:
                st.markdown("### üìä R√©sultats de l'Analyse")
                st.markdown(analysis)


def render_templates_page():
    """Page des templates"""
    st.markdown("## üé® Templates de CV")

    templates = [
        {
            "name": "üéØ Reconversion Moderne",
            "description": "Template optimis√© pour les reconversions professionnelles",
            "features": [
                "Focus comp√©tences transf√©rables",
                "Design moderne",
                "ATS-friendly",
            ],
        },
        {
            "name": "üíº Professionnel Classic",
            "description": "Template √©l√©gant pour secteurs traditionnels",
            "features": ["Style sobre", "Mise en page claire", "Polyvalent"],
        },
        {
            "name": "üöÄ Tech & Innovation",
            "description": "Template dynamique pour secteurs technologiques",
            "features": ["Design cr√©atif", "Sections techniques", "Portfolio int√©gr√©"],
        },
    ]

    cols = st.columns(3)

    for i, template in enumerate(templates):
        with cols[i]:
            st.markdown(f"### {template['name']}")
            st.markdown(template["description"])

            for feature in template["features"]:
                st.markdown(f"‚úÖ {feature}")

            st.button(f"Aper√ßu", key=f"preview_{i}", disabled=True)
            st.markdown("*Bient√¥t disponible*")


def render_pricing_page():
    """Page des tarifs"""
    st.markdown("## üí∞ Nos Offres")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown(
            """
        ### üÜì Gratuit
        **0‚Ç¨/mois**
        
        ‚úÖ 1 CV par mois  
        ‚úÖ Templates de base  
        ‚úÖ G√©n√©ration IA  
        ‚ùå Analyse de correspondance  
        ‚ùå Templates premium  
        ‚ùå Support prioritaire  
        """
        )
        st.button("Commencer Gratuit", type="secondary")

    with col2:
        st.markdown(
            """
        ### ‚≠ê Premium
        **9.99‚Ç¨/mois**
        
        ‚úÖ CV illimit√©s  
        ‚úÖ Tous les templates  
        ‚úÖ G√©n√©ration IA avanc√©e  
        ‚úÖ Analyse de correspondance  
        ‚úÖ Optimisation ATS  
        ‚ùå Support prioritaire  
        """
        )
        st.button("Choisir Premium", type="primary")

    with col3:
        st.markdown(
            """
        ### üöÄ Pro
        **19.99‚Ç¨/mois**
        
        ‚úÖ Tout Premium inclus  
        ‚úÖ Templates exclusifs  
        ‚úÖ Coaching IA personnalis√©  
        ‚úÖ Suivi candidatures  
        ‚úÖ Support prioritaire  
        ‚úÖ API Access  
        """
        )
        st.button("Choisir Pro", type="secondary")


def render_footer():
    """Footer de l'application"""
    st.markdown("---")
    st.markdown(
        """
    <div style="text-align: center; color: #666; padding: 1rem;">
        <p>üöÄ <strong>Phoenix CV</strong> - R√©volutionnez votre reconversion professionnelle</p>
        <p>Made with ‚ù§Ô∏è in France | üõ°Ô∏è S√©curis√© & Conforme RGPD</p>
    </div>
    """,
        unsafe_allow_html=True,
    )


def main():
    """Application principale"""
    configure_page()

    # Configuration du mod√®le IA
    model = setup_gemini()

    # Header
    render_header()

    # Navigation
    current_page = render_sidebar()

    # Rendu des pages
    if current_page == "home":
        render_home_page()
    elif current_page == "create":
        render_create_cv_page(model)
    elif current_page == "analyze":
        render_analyze_cv_page(model)
    elif current_page == "templates":
        render_templates_page()
    elif current_page == "pricing":
        render_pricing_page()

    # Footer
    render_footer()


if __name__ == "__main__":
    main()
