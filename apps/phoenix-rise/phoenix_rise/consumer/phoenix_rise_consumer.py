"""
Phoenix Rise Event Consumer
Consumer pour √©couter les √©v√©nements Phoenix Rise et mettre √† jour les vues mat√©rialis√©es
"""

import os
import logging
import asyncio
from datetime import datetime
from typing import Dict, Any
from supabase import create_client, Client

logger = logging.getLogger(__name__)


class PhoenixRiseConsumer:
    """
    Consumer Phoenix Rise pour traiter les √©v√©nements et mettre √† jour les vues mat√©rialis√©es.
    """
    
    def __init__(self):
        # Configuration Supabase
        supabase_url = os.getenv("SUPABASE_URL")
        supabase_service_key = os.getenv("SUPABASE_SERVICE_ROLE_KEY")  # Cl√© service pour √©criture
        
        if not supabase_url or not supabase_service_key:
            raise ValueError("SUPABASE_URL et SUPABASE_SERVICE_ROLE_KEY requis")
        
        self.client: Client = create_client(supabase_url, supabase_service_key)
        self.is_running = False
        
        logger.info("‚úÖ Phoenix Rise Consumer initialis√©")

    async def start_consuming(self):
        """D√©marre l'√©coute des √©v√©nements (simulation pour MVP)."""
        self.is_running = True
        logger.info("üéß Phoenix Rise Consumer d√©marr√©")
        
        # En mode MVP, on peut simuler la r√©ception d'√©v√©nements
        # Dans une version compl√®te, ceci connecterait √† RabbitMQ ou Kafka
        
        while self.is_running:
            try:
                # Simulation d'attente d'√©v√©nements
                await asyncio.sleep(5)
                
                # Dans la vraie impl√©mentation:
                # - Connexion √† message broker
                # - √âcoute des √©v√©nements Phoenix Rise
                # - Traitement des √©v√©nements re√ßus
                
            except Exception as e:
                logger.error(f"‚ùå Erreur dans le consumer: {e}")
                await asyncio.sleep(10)

    def stop_consuming(self):
        """Arr√™te l'√©coute des √©v√©nements."""
        self.is_running = False
        logger.info("üõë Phoenix Rise Consumer arr√™t√©")

    def process_mood_logged_event(self, event_data: Dict[str, Any]) -> bool:
        """
        Traite un √©v√©nement MoodLogged et met √† jour journal_entries_view.
        
        Args:
            event_data: Donn√©es de l'√©v√©nement
            
        Returns:
            True si trait√© avec succ√®s
        """
        try:
            # Extraction des donn√©es
            user_id = event_data.get("user_id")
            journal_entry_id = event_data.get("journal_entry_id")
            mood = event_data.get("mood")
            confidence = event_data.get("confidence")
            notes = event_data.get("notes")
            timestamp = event_data.get("timestamp")
            
            if not all([user_id, journal_entry_id, mood, confidence]):
                logger.error("‚ùå Donn√©es d'√©v√©nement MoodLogged incompl√®tes")
                return False
            
            # Insertion dans journal_entries_view
            entry_data = {
                "user_id": user_id,
                "journal_entry_id": journal_entry_id,
                "mood": mood,
                "confidence": confidence,
                "notes": notes,
                "created_at": timestamp,
                "date_logged": datetime.fromisoformat(timestamp.replace('Z', '+00:00')).date().isoformat()
            }
            
            # Calcul des tendances (simplifi√© pour MVP)
            mood_trend = self._calculate_mood_trend(user_id, mood)
            confidence_trend = self._calculate_confidence_trend(user_id, confidence)
            
            entry_data.update({
                "mood_trend": mood_trend,
                "confidence_trend": confidence_trend
            })
            
            result = self.client.table("journal_entries_view").insert(entry_data).execute()
            
            if result.data:
                logger.info(f"‚úÖ √âv√©nement MoodLogged trait√© pour user {user_id}")
                return True
            else:
                logger.error(f"‚ùå √âchec insertion journal_entries_view pour user {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement MoodLogged: {e}")
            return False

    def process_objective_created_event(self, event_data: Dict[str, Any]) -> bool:
        """
        Traite un √©v√©nement ObjectiveCreated et met √† jour user_objectives_view.
        
        Args:
            event_data: Donn√©es de l'√©v√©nement
            
        Returns:
            True si trait√© avec succ√®s
        """
        try:
            # Extraction des donn√©es
            user_id = event_data.get("user_id")
            objective_id = event_data.get("objective_id")
            objective_title = event_data.get("objective_title")
            objective_type = event_data.get("objective_type")
            target_date = event_data.get("target_date")
            timestamp = event_data.get("timestamp")
            
            if not all([user_id, objective_id, objective_title]):
                logger.error("‚ùå Donn√©es d'√©v√©nement ObjectiveCreated incompl√®tes")
                return False
            
            # Insertion dans user_objectives_view
            objective_data = {
                "user_id": user_id,
                "objective_id": objective_id,
                "title": objective_title,
                "objective_type": objective_type or "personal",
                "target_date": target_date,
                "created_at": timestamp,
                "status": "active"
            }
            
            result = self.client.table("user_objectives_view").insert(objective_data).execute()
            
            if result.data:
                logger.info(f"‚úÖ √âv√©nement ObjectiveCreated trait√© pour user {user_id}")
                return True
            else:
                logger.error(f"‚ùå √âchec insertion user_objectives_view pour user {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement ObjectiveCreated: {e}")
            return False

    def process_coaching_session_started_event(self, event_data: Dict[str, Any]) -> bool:
        """
        Traite un √©v√©nement CoachingSessionStarted et met √† jour coaching_sessions_view.
        
        Args:
            event_data: Donn√©es de l'√©v√©nement
            
        Returns:
            True si trait√© avec succ√®s
        """
        try:
            # Extraction des donn√©es
            user_id = event_data.get("user_id")
            session_id = event_data.get("session_id")
            session_type = event_data.get("session_type")
            user_tier = event_data.get("user_tier")
            timestamp = event_data.get("timestamp")
            
            if not all([user_id, session_id, session_type]):
                logger.error("‚ùå Donn√©es d'√©v√©nement CoachingSessionStarted incompl√®tes")
                return False
            
            # Insertion dans coaching_sessions_view
            session_data = {
                "user_id": user_id,
                "session_id": session_id,
                "session_type": session_type,
                "user_tier": user_tier or "free",
                "started_at": timestamp,
                "ai_prompts_used": 1  # Session d√©marr√©e = au moins 1 prompt
            }
            
            result = self.client.table("coaching_sessions_view").insert(session_data).execute()
            
            if result.data:
                logger.info(f"‚úÖ √âv√©nement CoachingSessionStarted trait√© pour user {user_id}")
                return True
            else:
                logger.error(f"‚ùå √âchec insertion coaching_sessions_view pour user {user_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement CoachingSessionStarted: {e}")
            return False

    def process_profile_created_event(self, event_data: Dict[str, Any]) -> bool:
        """
        Traite un √©v√©nement ProfileCreated et s'assure que le profil existe.
        
        Args:
            event_data: Donn√©es de l'√©v√©nement
            
        Returns:
            True si trait√© avec succ√®s
        """
        try:
            user_id = event_data.get("user_id")
            email = event_data.get("email")
            full_name = event_data.get("full_name")
            timestamp = event_data.get("timestamp")
            
            if not all([user_id, email]):
                logger.error("‚ùå Donn√©es d'√©v√©nement ProfileCreated incompl√®tes")
                return False
            
            # V√©rifier si le profil existe d√©j√†
            existing = self.client.table("profiles").select("id").eq("id", user_id).execute()
            
            if not existing.data:
                # Cr√©er le profil
                profile_data = {
                    "id": user_id,
                    "email": email,
                    "full_name": full_name,
                    "created_at": timestamp
                }
                
                result = self.client.table("profiles").insert(profile_data).execute()
                
                if result.data:
                    logger.info(f"‚úÖ Profil cr√©√© pour user {user_id}")
                else:
                    logger.error(f"‚ùå √âchec cr√©ation profil pour user {user_id}")
                    return False
            else:
                logger.info(f"‚ÑπÔ∏è Profil {user_id} existe d√©j√†")
            
            return True
                
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement ProfileCreated: {e}")
            return False

    def _calculate_mood_trend(self, user_id: str, current_mood: int) -> str:
        """Calcule la tendance d'humeur (simplifi√©)."""
        try:
            # R√©cup√©ration de la derni√®re entr√©e
            last_entry = self.client.table("journal_entries_view") \
                .select("mood") \
                .eq("user_id", user_id) \
                .order("created_at", desc=True) \
                .limit(1) \
                .execute()
            
            if last_entry.data and len(last_entry.data) > 0:
                last_mood = last_entry.data[0]["mood"]
                
                if current_mood > last_mood:
                    return "up"
                elif current_mood < last_mood:
                    return "down"
                else:
                    return "stable"
            else:
                return "stable"  # Premi√®re entr√©e
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur calcul tendance humeur: {e}")
            return "stable"

    def _calculate_confidence_trend(self, user_id: str, current_confidence: int) -> str:
        """Calcule la tendance de confiance (simplifi√©)."""
        try:
            # R√©cup√©ration de la derni√®re entr√©e
            last_entry = self.client.table("journal_entries_view") \
                .select("confidence") \
                .eq("user_id", user_id) \
                .order("created_at", desc=True) \
                .limit(1) \
                .execute()
            
            if last_entry.data and len(last_entry.data) > 0:
                last_confidence = last_entry.data[0]["confidence"]
                
                if current_confidence > last_confidence:
                    return "up"
                elif current_confidence < last_confidence:
                    return "down"
                else:
                    return "stable"
            else:
                return "stable"  # Premi√®re entr√©e
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur calcul tendance confiance: {e}")
            return "stable"

    def process_event(self, event_type: str, event_data: Dict[str, Any]) -> bool:
        """
        Traite un √©v√©nement selon son type.
        
        Args:
            event_type: Type d'√©v√©nement
            event_data: Donn√©es de l'√©v√©nement
            
        Returns:
            True si trait√© avec succ√®s
        """
        try:
            if event_type == "MoodLogged":
                return self.process_mood_logged_event(event_data)
            elif event_type == "ObjectiveCreated":
                return self.process_objective_created_event(event_data)
            elif event_type == "CoachingSessionStarted":
                return self.process_coaching_session_started_event(event_data)
            elif event_type == "ProfileCreated":
                return self.process_profile_created_event(event_data)
            else:
                logger.warning(f"‚ö†Ô∏è Type d'√©v√©nement non support√©: {event_type}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement √©v√©nement {event_type}: {e}")
            return False


# Script standalone pour tester le consumer
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    
    # Test des √©v√©nements
    consumer = PhoenixRiseConsumer()
    
    # Test MoodLogged
    test_mood_event = {
        "user_id": "test_user_123",
        "journal_entry_id": "entry_456",
        "mood": 8,
        "confidence": 7,
        "notes": "Bonne journ√©e aujourd'hui",
        "timestamp": datetime.utcnow().isoformat()
    }
    
    print("üß™ Test √©v√©nement MoodLogged...")
    success = consumer.process_event("MoodLogged", test_mood_event)
    print(f"R√©sultat: {'‚úÖ Success' if success else '‚ùå √âchec'}")
    
    # Test ObjectiveCreated
    test_objective_event = {
        "user_id": "test_user_123",
        "objective_id": "obj_789",
        "objective_title": "Apprendre Python",
        "objective_type": "skill",
        "target_date": "2025-12-31",
        "timestamp": datetime.utcnow().isoformat()
    }
    
    print("üß™ Test √©v√©nement ObjectiveCreated...")
    success = consumer.process_event("ObjectiveCreated", test_objective_event)
    print(f"R√©sultat: {'‚úÖ Success' if success else '‚ùå √âchec'}")
    
    print("‚úÖ Tests du consumer termin√©s")