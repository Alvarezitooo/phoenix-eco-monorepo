"""
Service d'IA pour Phoenix Rise.

Ce module fournit des fonctionnalit√©s de coaching bas√©es sur l'IA,
utilisant les entr√©es de journal de l'utilisateur pour g√©n√©rer des conseils
personnalis√©s en fonction de son niveau d'abonnement (gratuit ou premium).
"""

import json
from typing import Any, Dict, List
import asyncio
import os
import sys

import google.generativeai as genai
from ..models.journal_entry import JournalEntry

# Import Event Bridge pour lire les √©v√©nements cross-app
sys.path.append(os.path.join(os.path.dirname(__file__), '../../../..'))
from phoenix_event_bridge import PhoenixEventBridge, PhoenixEventType


class AICoachService:
    """
    Service d'IA pour fournir des conseils de coaching bas√©s sur les entr√©es de journal.
    """

    def __init__(self):
        self.model = genai.GenerativeModel("gemini-pro")
        # Initialiser Event Bridge pour lire contexte utilisateur
        self.event_bridge = PhoenixEventBridge()
    
    async def get_user_context_from_events(self, user_id: str) -> Dict[str, Any]:
        """
        R√©cup√®re le contexte utilisateur depuis les √©v√©nements Phoenix
        pour contextualiser le coaching
        """
        try:
            # En mode d√©grad√©, retourner contexte vide
            if self.event_bridge.degraded_mode:
                return {"source": "mock", "events": []}
            
            # En production, ici on ferait une requ√™te Supabase pour r√©cup√©rer les √©v√©nements
            # events = await self.event_bridge.get_user_events(user_id)
            
            # Mock context pour d√©monstration
            mock_context = {
                "recent_letters": [
                    {"job_title": "Data Scientist", "company": "TechCorp", "career_change": True}
                ],
                "career_exploration": [
                    {"job_analyzed": "Data Scientist", "resistance_score": 0.85, "recommendation": "positive"}
                ],
                "source": "phoenix_ecosystem",
                "last_activity": "2025-01-11"
            }
            
            return mock_context
            
        except Exception as e:
            # Fallback silencieux
            return {"source": "fallback", "events": []}

    def _get_basic_advanced_prompt(
        self, user_profile: Dict[str, Any], journal_entries: List[JournalEntry], phoenix_context: Dict[str, Any] = None
    ) -> str:
        """
        G√©n√®re le prompt 'Basique Avanc√©' pour les utilisateurs gratuits.
        """
        # Simuler les donn√©es utilisateur pour le prompt
        profile_str = f"{{\"full_name\": \"{user_profile.get('full_name', user_profile.get('email', '').split('@')[0])}\"}}"
        journal_str = json.dumps([entry.model_dump() for entry in journal_entries])
        
        # üî• INT√âGRER CONTEXTE PHOENIX ECOSYSTEM
        phoenix_context_str = ""
        if phoenix_context and phoenix_context.get("source") != "fallback":
            context_parts = []
            if phoenix_context.get("recent_letters"):
                letters = phoenix_context["recent_letters"]
                context_parts.append(f"‚úâÔ∏è Lettres g√©n√©r√©es: {', '.join([l['job_title'] for l in letters])}")
            if phoenix_context.get("career_exploration"):
                explorations = phoenix_context["career_exploration"]
                context_parts.append(f"üîç M√©tiers explor√©s: {', '.join([e['job_analyzed'] for e in explorations])}")
            
            if context_parts:
                phoenix_context_str = f"\n<contexte_phoenix_ecosystem>\n{'‚ãÖ '.join(context_parts)}\n</contexte_phoenix_ecosystem>\n"

        return f"""
Plan Directeur N¬∞1 : Le Prompt "Basique Avanc√©" (Niveau Gratuit)
Ce prompt est con√ßu pour √™tre utile, motivant et pour donner un aper√ßu de la puissance de l'analyse, incitant subtilement √† l'upgrade.

# ROLE
Tu es Phoenix Rise, un coach de carri√®re IA bienveillant et motivant. Ton objectif est d'aider les utilisateurs en reconversion √† garder le cap en analysant leurs notes de journal.

# CONTEXTE
L'utilisateur suivant, {user_profile.get('full_name', user_profile.get('email', '').split('@')[0])}, a fourni ses 5 derni√®res entr√©es de journal. Analyse-les pour lui donner un conseil constructif.

<donnees_utilisateur>
  <profil>
    {profile_str}
  </profil>
  <journal>
    {journal_str}
  </journal>
  {phoenix_context_str}
</donnees_utilisateur>

# T√ÇCHE
1. Adresse-toi directement √† {user_profile.get('full_name', user_profile.get('email', '').split('@')[0])}.
2. Analyse ses derni√®res entr√©es, en te concentrant sur la plus r√©cente. Rel√®ve le positif.
3. Valide son sentiment de doute, c'est une √©motion normale en reconversion.
4. Si disponible, utilise le contexte Phoenix (lettres g√©n√©r√©es, m√©tiers explor√©s) pour contextualiser tes conseils.
5. Fournis UN conseil simple et actionnable pour l'aider √† clarifier sa direction.
6. Fais une allusion subtile au fait qu'une analyse plus profonde des tendances est possible.

# FORMAT
- Ton : Encourageant, clair, direct.
- Longueur : Deux paragraphes concis.
"""

    def _get_magistral_prompt(
        self, user_profile: Dict[str, Any], journal_entries: List[JournalEntry]
    ) -> str:
        """
        G√©n√®re le prompt 'Magistral' pour les utilisateurs premium.
        """
        # Simuler les donn√©es utilisateur pour le prompt
        profile_str = f"{{\"full_name\": \"{user_profile.get('full_name', user_profile.get('email', '').split('@')[0])}\"}}"
        journal_str = json.dumps([entry.model_dump() for entry in journal_entries])

        return f"""
Plan Directeur N¬∞2 : Le Prompt "Magistral" (Niveau Premium)
Ce prompt est une directive complexe pour une analyse de haut niveau, justifiant pleinement la valeur de l'abonnement Premium.

# ROLE
Tu es Phoenix Rise, un coach de carri√®re IA expert de classe mondiale. Tu agis en tant que strat√®ge en reconversion, psychologue du travail et mentor. Ta mission est de fournir une analyse profonde et transformationnelle bas√©e sur les donn√©es du journal de l'utilisateur.

# CONTEXTE
L'utilisateur Premium suivant, {user_profile.get('full_name', user_profile.get('email', '').split('@')[0])}, a fourni ses 5 derni√®res entr√©es de journal. Effectue une analyse magistrale de sa situation.

<donnees_utilisateur>
  <profil>
    {profile_str}
  </profil>
  <journal>
    {journal_str}
  </journal>
</donnees_utilisateur>

# T√ÇCHE
1. Adresse-toi √† {user_profile.get('full_name', user_profile.get('email', '').split('@')[0])} avec un ton expert et empathique.
2. Produis une analyse structur√©e en 3 parties distinctes, en utilisant les titres Markdown suivants : `### 1. Synth√®se et Sch√©mas Comportementaux`, `### 2. Plan d'Action Strat√©gique`, `### 3. Le Conseil de l'Expert`.

# FORMAT
-   **Partie 1 (Synth√®se) :**
    -   Analyse la tendance g√©n√©rale de l'humeur et de la confiance.
    -   Identifie les d√©clencheurs : qu'est-ce qui fait monter (formation) ou descendre (r√©ponse n√©gative) ses indicateurs ?
    -   Met en lumi√®re un sch√©ma comportemental cl√© (ex: ta confiance est tr√®s r√©active aux √©v√©nements ext√©rieurs).
    -   Identifie une force (ta capacit√© √† rebondir) et un point de vigilance.
-   **Partie 2 (Plan d'Action) :**
    -   Propose 2 √† 3 actions concr√®tes et sp√©cifiques, bas√©es sur l'analyse.
    -   Doit inclure au moins un exercice pratique (ex: "matrice de l'ikigai simplifi√©", "journal des petites victoires").
    -   Chaque action doit avoir un objectif clair.
-   **Partie 3 (Conseil de l'Expert) :**
    -   Introduis un concept simple de psychologie positive ou de d√©veloppement de carri√®re (ex: le "sentiment d'auto-efficacit√©", "l'√©tat de flow").
    -   Anticipe un obstacle futur et propose une strat√©gie mentale pour le surmonter.
-   Ton : Expert, empathique, strat√©gique, inspirant.
"""

    def get_coaching_advice(
        self,
        journal_entries: List[JournalEntry],
        user_profile: Dict[str, Any],
        user_tier: str,
        user_id: str = None,
    ) -> str:
        """
        G√©n√®re des conseils de coaching personnalis√©s bas√©s sur les entr√©es de journal
        et le profil de l'utilisateur, en fonction du niveau de l'utilisateur.
        Int√®gre le contexte cross-app Phoenix pour coaching contextuel.
        """
        if not journal_entries:
            return "Veuillez enregistrer quelques entr√©es de journal pour que l'IA puisse vous donner des conseils personnalis√©s."

        # üî• R√âCUP√âRER CONTEXTE CROSS-APP PHOENIX
        phoenix_context = {}
        if user_id:
            try:
                phoenix_context = asyncio.run(self.get_user_context_from_events(user_id))
            except Exception:
                phoenix_context = {"source": "fallback"}

        if user_tier == "premium":
            prompt = self._get_magistral_prompt(user_profile, journal_entries)
        else:
            prompt = self._get_basic_advanced_prompt(user_profile, journal_entries, phoenix_context)

        try:
            response = self.model.generate_content(prompt)
            return response.text
        except genai.APIError as e:
            return f"D√©sol√©, une erreur est survenue lors de la g√©n√©ration des conseils : {e}"
