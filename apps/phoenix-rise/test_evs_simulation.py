#!/usr/bin/env python3
"""
Simulation compl√®te de la persistance EmotionalVectorState.

Ce script teste toute la cha√Æne sans d√©pendances Streamlit ou Supabase.
Simule le comportement complet du syst√®me de persistance EEV.
"""

import json
import uuid
from datetime import datetime, timedelta
from dataclasses import asdict
from typing import Dict, List, Any

# Import direct des modules
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

from iris_core.event_processing.emotional_vector_state import EmotionalVectorState


class MockSupabaseClient:
    """Mock Supabase pour les tests."""
    
    def __init__(self):
        self.events_store = []
        self.snapshots_store = []
    
    def table(self, table_name: str):
        return MockTable(self, table_name)


class MockTable:
    """Mock table Supabase."""
    
    def __init__(self, client: MockSupabaseClient, table_name: str):
        self.client = client
        self.table_name = table_name
        self.store = getattr(client, f"{table_name}_store")
        self._query = {}
    
    def insert(self, data):
        if isinstance(data, list):
            for item in data:
                item['event_id'] = str(uuid.uuid4())
                self.store.append(item)
        else:
            data['event_id'] = str(uuid.uuid4())
            self.store.append(data)
        return self
    
    def select(self, columns='*'):
        return self
    
    def eq(self, column, value):
        self._query[column] = value
        return self
    
    def in_(self, column, values):
        self._query[f"{column}_in"] = values
        return self
    
    def gte(self, column, value):
        self._query[f"{column}_gte"] = value
        return self
    
    def order(self, column, desc=False):
        return self
    
    def execute(self):
        # Simuler le filtrage
        filtered_data = []
        for item in self.store:
            match = True
            for key, value in self._query.items():
                if key.endswith('_in'):
                    col = key[:-3]
                    if item.get(col) not in value:
                        match = False
                        break
                elif key.endswith('_gte'):
                    col = key[:-4]
                    if item.get(col, '') < value:
                        match = False
                        break
                elif item.get(key) != value:
                    match = False
                    break
            
            if match:
                filtered_data.append(item)
        
        return MockResult(filtered_data)


class MockResult:
    """Mock r√©sultat de requ√™te."""
    
    def __init__(self, data):
        self.data = data


def simulate_user_journey():
    """Simule un parcours utilisateur complet avec EEV."""
    print("üé≠ SIMULATION PARCOURS UTILISATEUR AVEC EEV")
    print("=" * 50)
    
    # 1. Cr√©ation utilisateur
    user_id = str(uuid.uuid4())
    print(f"üë§ Utilisateur cr√©√©: {user_id}")
    
    # 2. Initialisation EEV
    evs = EmotionalVectorState(user_id=user_id)
    print(f"üß† EEV initialis√© - √âtat initial:")
    print(f"   Mood Average 7d: {evs.mood_average_7d}")
    print(f"   Burnout Risk: {evs.burnout_risk_score}")
    
    # 3. Simulation d'√©v√©nements sur 14 jours
    print("\nüìä SIMULATION √âV√âNEMENTS SUR 14 JOURS")
    print("-" * 30)
    
    mock_client = MockSupabaseClient()
    events_created = 0
    
    base_time = datetime.utcnow() - timedelta(days=14)
    
    for day in range(14):
        current_day = base_time + timedelta(days=day)
        
        # Simuler 1-3 entr√©es par jour
        for entry_num in range(1 + (day % 3)):
            # Mood vari√© selon une courbe r√©aliste
            mood_score = 0.4 + 0.4 * (1 + day/14) + 0.1 * (entry_num - 1)  # 0.4 √† 0.9
            confidence_score = 0.3 + 0.5 * (1 + day/10) + 0.1 * entry_num  # 0.3 √† 0.9
            
            # Mettre √† jour EEV
            evs.update_mood(current_day + timedelta(hours=entry_num*4), mood_score)
            evs.update_confidence(current_day + timedelta(hours=entry_num*4), confidence_score)
            
            # Stocker √©v√©nement
            mood_event = {
                "stream_id": user_id,
                "event_type": "MoodLogged",
                "payload": {
                    "score": mood_score,
                    "confidence": confidence_score,
                    "notes": f"Journal day {day+1}, entry {entry_num+1}"
                },
                "app_source": "rise",
                "timestamp": current_day.isoformat()
            }
            
            confidence_event = {
                "stream_id": user_id,
                "event_type": "ConfidenceScoreLogged",
                "payload": {
                    "score": confidence_score
                },
                "app_source": "rise",
                "timestamp": current_day.isoformat()
            }
            
            mock_client.table('events').insert([mood_event, confidence_event]).execute()
            events_created += 2
        
        # Simuler quelques actions (objectifs, sessions)
        if day % 4 == 0:  # Tous les 4 jours
            goal_event = {
                "stream_id": user_id,
                "event_type": "GoalSet",
                "payload": {
                    "title": f"Objectif semaine {day//7 + 1}",
                    "objective_type": "personal"
                },
                "app_source": "rise",
                "timestamp": current_day.isoformat()
            }
            evs.update_action(current_day, "GoalSet")
            mock_client.table('events').insert(goal_event).execute()
            events_created += 1
        
        if day % 7 == 0:  # Chaque semaine
            session_event = {
                "stream_id": user_id,
                "event_type": "CoachingSessionStarted",
                "payload": {
                    "session_type": "free",
                    "user_tier": "free"
                },
                "app_source": "rise",
                "timestamp": current_day.isoformat()
            }
            mock_client.table('events').insert(session_event).execute()
            events_created += 1
    
    print(f"üìà {events_created} √©v√©nements cr√©√©s")
    
    # 4. Calcul final des m√©triques
    evs.calculate_burnout_risk()
    print(f"\nüéØ M√âTRIQUES FINALES:")
    print(f"   Mood Average 7d: {evs.mood_average_7d:.2f}")
    print(f"   Mood Count 7d: {evs.mood_count_7d}")
    print(f"   Confidence Trend: {evs.confidence_trend:.2f}")
    print(f"   Actions 7d: {dict(evs.actions_count_7d)}")
    print(f"   Burnout Risk: {evs.burnout_risk_score:.2f}")
    
    # 5. Test reconstruction depuis √©v√©nements
    print(f"\nüîÑ TEST RECONSTRUCTION DEPUIS √âV√âNEMENTS")
    print("-" * 40)
    
    # Simuler reconstruction
    events_data = mock_client.table('events').select().eq('stream_id', user_id).execute().data
    print(f"üìö {len(events_data)} √©v√©nements r√©cup√©r√©s depuis le store")
    
    # Cr√©er nouvel EEV et rejouer √©v√©nements
    reconstructed_evs = EmotionalVectorState(user_id=user_id)
    
    for event in events_data:
        event_formatted = {
            'type': event['event_type'],
            'timestamp': event['timestamp'],
            'payload': event['payload']
        }
        reconstructed_evs.update_from_event(event_formatted)
    
    reconstructed_evs.calculate_burnout_risk()
    
    print(f"üîç COMPARAISON √âTATS:")
    print(f"   Original Mood 7d: {evs.mood_average_7d:.2f}")
    print(f"   Reconstruit Mood 7d: {reconstructed_evs.mood_average_7d:.2f}")
    print(f"   Original Burnout: {evs.burnout_risk_score:.2f}")
    print(f"   Reconstruit Burnout: {reconstructed_evs.burnout_risk_score:.2f}")
    
    # Test √©galit√© (tol√©rance pour les arrondis)
    mood_diff = abs(evs.mood_average_7d - reconstructed_evs.mood_average_7d)
    burnout_diff = abs(evs.burnout_risk_score - reconstructed_evs.burnout_risk_score)
    
    if mood_diff < 0.01 and burnout_diff < 0.01:
        print("‚úÖ RECONSTRUCTION PARFAITE!")
    else:
        print(f"‚ö†Ô∏è Diff√©rences: mood={mood_diff:.3f}, burnout={burnout_diff:.3f}")
    
    # 6. Test s√©rialisation JSON
    print(f"\nüíæ TEST S√âRIALISATION JSON")
    print("-" * 25)
    
    json_data = evs.to_json()
    json_size = len(json_data)
    print(f"üìÑ Taille JSON EEV: {json_size} caract√®res")
    
    # Test parsing
    try:
        parsed_data = json.loads(json_data)
        print(f"‚úÖ JSON valide - {len(parsed_data)} propri√©t√©s")
        
        # V√©rifier propri√©t√©s critiques
        critical_props = ['user_id', 'mood_average_7d', 'burnout_risk_score', 'last_updated']
        for prop in critical_props:
            if prop in parsed_data:
                print(f"   ‚úì {prop}: {parsed_data[prop]}")
            else:
                print(f"   ‚ùå {prop}: MANQUANT")
                
    except json.JSONDecodeError as e:
        print(f"‚ùå Erreur JSON: {e}")
    
    # 7. Performance test
    print(f"\n‚ö° TEST PERFORMANCE")
    print("-" * 18)
    
    import time
    
    # Test mise √† jour massive
    perf_evs = EmotionalVectorState(user_id=str(uuid.uuid4()))
    start_time = time.time()
    
    for i in range(1000):
        event_time = datetime.utcnow() + timedelta(minutes=i)
        perf_evs.update_mood(event_time, 0.5 + (i % 100) / 200)
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"üìä 1000 mises √† jour mood: {duration:.3f}s")
    print(f"‚ö° {1000/duration:.0f} updates/seconde")
    print(f"üßÆ √âtat final: mood={perf_evs.mood_average_7d:.2f}, count={perf_evs.mood_count_7d}")
    
    return {
        "user_id": user_id,
        "events_created": events_created,
        "final_mood": evs.mood_average_7d,
        "final_burnout": evs.burnout_risk_score,
        "reconstruction_success": mood_diff < 0.01 and burnout_diff < 0.01,
        "json_size": json_size,
        "performance_updates_per_sec": 1000/duration
    }


def test_evs_edge_cases():
    """Test des cas limites de l'EEV."""
    print(f"\nüß™ TEST CAS LIMITES EEV")
    print("=" * 25)
    
    user_id = str(uuid.uuid4())
    evs = EmotionalVectorState(user_id=user_id)
    
    # Test avec donn√©es vides
    evs.calculate_burnout_risk()
    print(f"‚úì EEV vide: burnout={evs.burnout_risk_score:.2f}")
    
    # Test avec valeurs extr√™mes
    now = datetime.utcnow()
    evs.update_mood(now, 1.0)  # Mood maximum
    evs.update_confidence(now, 0.0)  # Confidence minimum
    evs.calculate_burnout_risk()
    print(f"‚úì Valeurs extr√™mes: mood={evs.mood_average_7d:.2f}, burnout={evs.burnout_risk_score:.2f}")
    
    # Test avec beaucoup d'actions
    for i in range(10):
        evs.update_action(now + timedelta(hours=i), f"Action{i}")
    evs.calculate_burnout_risk()
    print(f"‚úì Actions multiples: {len(evs.actions_count_7d)} types d'actions")
    
    # Test avec √©v√©nements anciens
    old_time = now - timedelta(days=10)
    evs.update_mood(old_time, 0.2)  # Ne doit pas affecter les m√©triques 7d
    print(f"‚úì √âv√©nements anciens filtr√©s: mood 7d={evs.mood_average_7d:.2f}")
    
    print("‚úÖ Tous les cas limites pass√©s")


if __name__ == "__main__":
    print("üöÄ SIMULATION COMPL√àTE PERSISTANCE EEV")
    print("=" * 50)
    
    try:
        # Test principal
        results = simulate_user_journey()
        
        # Tests cas limites
        test_evs_edge_cases()
        
        # R√©sum√© final
        print(f"\nüéâ R√âSUM√â SIMULATION")
        print("=" * 20)
        print(f"üë§ Utilisateur: {results['user_id'][:8]}...")
        print(f"üìä √âv√©nements cr√©√©s: {results['events_created']}")
        print(f"üéØ Mood final: {results['final_mood']:.2f}")
        print(f"üî• Burnout final: {results['final_burnout']:.2f}")
        print(f"üîÑ Reconstruction: {'‚úÖ' if results['reconstruction_success'] else '‚ùå'}")
        print(f"üíæ Taille JSON: {results['json_size']} chars")
        print(f"‚ö° Performance: {results['performance_updates_per_sec']:.0f} updates/s")
        
        print(f"\n‚úÖ SIMULATION R√âUSSIE - EEV PR√äT POUR PRODUCTION!")
        
    except Exception as e:
        print(f"‚ùå Erreur simulation: {e}")
        import traceback
        traceback.print_exc()