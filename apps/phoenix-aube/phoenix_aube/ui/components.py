"""
üîÆ Phoenix Aube - Composants UI R√©utilisables
Composants Streamlit modulaires pour interface Phoenix Aube
"""

import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
from typing import Dict, Any, List, Optional
from datetime import datetime


# =============================================
# COMPOSANTS HERO & BRANDING
# =============================================

def render_hero_section() -> None:
    """Section hero avec pr√©sentation concept Phoenix Aube"""
    st.markdown("""
    <div style="text-align: center; padding: 2rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 15px; margin-bottom: 2rem;">
        <h1>üîÆ Phoenix Aube</h1>
        <h3>Premier outil europ√©en d'exploration m√©tier + validation IA future-proof</h3>
        <p style="font-size: 1.2rem; margin-top: 1rem;">Transformez la peur de l'IA en superpouvoir professionnel</p>
    </div>
    """, unsafe_allow_html=True)


def render_feature_card(title: str, content: str, icon: str = "‚ú®") -> None:
    """Carte de feature avec style Phoenix Aube"""
    st.markdown(f"""
    <div style="background: white; padding: 1.5rem; border-radius: 12px; border-left: 4px solid #667eea; box-shadow: 0 4px 15px rgba(0,0,0,0.1); margin-bottom: 1rem;">
        <h4>{icon} {title}</h4>
        <p>{content}</p>
    </div>
    """, unsafe_allow_html=True)


def render_progress_bar(progress: float, label: str) -> None:
    """Barre de progression personnalis√©e"""
    progress_html = f"""
    <div style="margin: 1rem 0;">
        <div style="display: flex; justify-content: space-between; margin-bottom: 0.5rem;">
            <span><strong>{label}</strong></span>
            <span>{progress:.0%}</span>
        </div>
        <div style="background-color: #f0f0f0; border-radius: 10px; overflow: hidden;">
            <div style="background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); height: 8px; width: {progress*100}%; transition: width 0.3s;"></div>
        </div>
    </div>
    """
    st.markdown(progress_html, unsafe_allow_html=True)


# =============================================
# COMPOSANTS TEST ANXI√âT√â
# =============================================

def render_anxiety_test() -> Optional[Dict[str, Any]]:
    """Formulaire de test d'anxi√©t√© IA (feature freemium)"""
    
    st.markdown("## üß† **Test Anxi√©t√© IA - Gratuit**")
    st.markdown("*D√©couvrez en 2 minutes si votre m√©tier actuel r√©siste √† l'IA*")
    
    with st.form("anxiety_test_form"):
        # M√©tier actuel
        current_job = st.text_input(
            "Quel est votre m√©tier actuel ?",
            placeholder="Ex: Data Analyst, Coach, Chef de Projet..."
        )
        
        # Exp√©rience
        experience_years = st.slider(
            "Ann√©es d'exp√©rience dans ce m√©tier",
            min_value=0, max_value=30, value=5
        )
        
        # Inqui√©tudes
        concerns = st.multiselect(
            "Vos inqui√©tudes concernant l'IA (optionnel)",
            [
                "Remplacement par des robots",
                "Obsolescence de mes comp√©tences", 
                "Concurrence IA moins ch√®re",
                "√âvolution trop rapide du secteur",
                "Incertitude sur l'avenir"
            ]
        )
        
        # Niveau d'exposition actuelle √† l'IA
        ai_exposure = st.select_slider(
            "Votre niveau d'exposition actuel √† l'IA dans votre travail",
            options=["Aucune", "Faible", "Mod√©r√©e", "Importante", "Tr√®s importante"],
            value="Mod√©r√©e"
        )
        
        submitted = st.form_submit_button("üîç **Analyser Mon Anxi√©t√© IA**", type="primary")
        
        if submitted and current_job:
            return {
                "current_job": current_job,
                "experience_years": experience_years,
                "concerns": concerns,
                "ai_exposure": ai_exposure
            }
    
    return None


def render_anxiety_results(anxiety_result: Dict[str, Any], job_title: str) -> None:
    """Affichage des r√©sultats du test d'anxi√©t√©"""
    
    st.markdown("---")
    st.markdown("## üéØ **R√©sultats de Votre Test**")
    
    # Gauge chart principal
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        score = anxiety_result.get("score_anxi√©t√©", 0.5)
        
        fig = go.Figure(go.Indicator(
            mode = "gauge+number+delta",
            value = score * 100,
            domain = {'x': [0, 1], 'y': [0, 1]},
            title = {'text': "Score Anxi√©t√© IA"},
            delta = {'reference': 50},
            gauge = {
                'axis': {'range': [None, 100]},
                'bar': {'color': "darkblue"},
                'steps': [
                    {'range': [0, 30], 'color': "lightgreen"},
                    {'range': [30, 70], 'color': "yellow"},
                    {'range': [70, 100], 'color': "red"}
                ],
                'threshold': {
                    'line': {'color': "red", 'width': 4},
                    'thickness': 0.75,
                    'value': 80
                }
            }
        ))
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)
    
    # Message personnalis√©
    render_anxiety_message(anxiety_result, score)


def render_anxiety_message(anxiety_result: Dict[str, Any], score: float) -> None:
    """Message personnalis√© selon score anxi√©t√©"""
    
    if score < 0.3:
        st.markdown(f"""
        <div style="background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
            <h4>‚úÖ Excellente Nouvelle !</h4>
            <p>{anxiety_result.get('message_court', 'Votre m√©tier √©volue positivement avec l\'IA')}</p>
            <p><strong>Recommandation :</strong> {anxiety_result.get('recommandation_action', 'Explorez les opportunit√©s')}</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div style="background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
            <h4>‚ö†Ô∏è Attention √† Anticiper</h4>
            <p>{anxiety_result.get('message_court', 'Votre m√©tier n√©cessite une adaptation proactive')}</p>
            <p><strong>Recommandation :</strong> {anxiety_result.get('recommandation_action', 'D√©veloppez des comp√©tences compl√©mentaires')}</p>
        </div>
        """, unsafe_allow_html=True)


# =============================================
# COMPOSANTS EXPLORATION M√âTIER
# =============================================

def render_career_exploration() -> Optional[Dict[str, Any]]:
    """Interface d'exploration m√©tier compl√®te"""
    
    st.markdown("## üîç **Exploration M√©tier Approfondie**")
    
    # Tabs pour les √©tapes
    tabs = st.tabs([
        "1Ô∏è‚É£ Profil Personnel",
        "2Ô∏è‚É£ Tests Psychom√©triques", 
        "3Ô∏è‚É£ Comp√©tences",
        "4Ô∏è‚É£ Recommandations"
    ])
    
    exploration_data = {}
    
    with tabs[0]:
        profile_data = render_personal_profile_step()
        if profile_data:
            exploration_data.update(profile_data)
    
    with tabs[1]:
        psycho_data = render_psychometric_tests_step()
        if psycho_data:
            exploration_data.update(psycho_data)
    
    with tabs[2]:
        skills_data = render_skills_assessment_step()
        if skills_data:
            exploration_data.update(skills_data)
    
    with tabs[3]:
        recommendations_data = render_career_recommendations_step()
        if recommendations_data:
            exploration_data.update(recommendations_data)
    
    return exploration_data if exploration_data else None


def render_personal_profile_step() -> Optional[Dict[str, Any]]:
    """√âtape profil personnel"""
    
    st.markdown("### üë§ **Votre Profil Personnel**")
    
    col1, col2 = st.columns(2)
    
    with col1:
        age_range = st.selectbox("Tranche d'√¢ge", ["25-35", "35-45", "45-55", "55+"])
        current_sector = st.text_input("Secteur actuel", placeholder="Ex: Tech, Finance, Sant√©...")
        current_position = st.text_input("Poste actuel", placeholder="Ex: Data Analyst, Manager...")
    
    with col2:
        experience_years = st.slider("Ann√©es d'exp√©rience", 0, 30, 8)
        geographic_constraints = st.text_input(
            "Contraintes g√©ographiques", 
            placeholder="Ex: R√©gion parisienne uniquement"
        )
        salary_constraints = st.text_input(
            "Contraintes salariales", 
            placeholder="Ex: Minimum 45k‚Ç¨/an"
        )
    
    # Motivations
    motivations = st.multiselect(
        "Motivations principales de reconversion",
        [
            "Recherche de sens", "√âquilibre vie pro/perso", "√âvolution salariale",
            "Nouvelles comp√©tences", "Secteur en croissance", "Passion personnelle",
            "√âviter obsolescence IA", "Entrepreneuriat"
        ]
    )
    
    if st.button("‚û°Ô∏è Continuer vers les tests", type="primary"):
        return {
            "profile": {
                "age_range": age_range,
                "current_sector": current_sector,
                "current_position": current_position,
                "experience_years": experience_years,
                "geographic_constraints": geographic_constraints,
                "salary_constraints": salary_constraints,
                "motivations": motivations
            }
        }
    
    return None


def render_psychometric_tests_step() -> Optional[Dict[str, Any]]:
    """√âtape tests psychom√©triques"""
    
    st.markdown("### üß† **Tests Psychom√©triques Scientifiques**")
    st.info("Tests bas√©s sur Big Five et RIASEC - Standards scientifiques internationaux")
    
    # Test Big Five simplifi√©
    st.markdown("#### üìä **Test Big Five**")
    
    big_five_questions = [
        "Je suis quelqu'un qui aime essayer de nouvelles choses",
        "Je suis quelqu'un qui fait les choses de mani√®re syst√©matique", 
        "Je suis quelqu'un qui aime √™tre entour√© de monde",
        "Je suis quelqu'un qui fait confiance aux autres",
        "Je suis quelqu'un qui reste calme en situation de stress"
    ]
    
    big_five_responses = {}
    for i, question in enumerate(big_five_questions):
        big_five_responses[f"q{i}"] = st.slider(
            question,
            min_value=1, max_value=7, value=4,
            help="1 = Pas du tout d'accord, 7 = Tout √† fait d'accord"
        )
    
    # Test RIASEC
    st.markdown("#### üéØ **Test RIASEC (Int√©r√™ts Professionnels)**")
    
    interests = st.multiselect(
        "Quelles activit√©s vous int√©ressent le plus ?",
        [
            "R√©parer/Construire des objets (Realistic)",
            "Analyser/Rechercher (Investigative)", 
            "Cr√©er/Dessiner (Artistic)",
            "Aider/Former les autres (Social)",
            "Diriger/Vendre (Enterprising)",
            "Organiser/Administrer (Conventional)"
        ]
    )
    
    if st.button("üîÑ Calculer Mon Profil Psychom√©trique", type="primary"):
        
        # Simulation calcul profil
        with st.spinner("Calcul de votre profil..."):
            import time
            time.sleep(2)
            
            # G√©n√©rer r√©sultats mock
            render_psychometric_results(big_five_responses, interests)
            
            return {
                "psychometric": {
                    "big_five": big_five_responses,
                    "riasec_interests": interests
                }
            }
    
    return None


def render_psychometric_results(big_five_responses: Dict, interests: List[str]) -> None:
    """Affichage r√©sultats tests psychom√©triques"""
    
    st.success("‚úÖ Profil psychom√©trique calcul√© !")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("**Big Five Profile:**")
        mock_scores = {
            "Ouverture": 0.7, 
            "Conscience": 0.8, 
            "Extraversion": 0.6, 
            "Agr√©abilit√©": 0.9, 
            "N√©vrosisme": 0.3
        }
        df = pd.DataFrame(list(mock_scores.items()), columns=["Trait", "Score"])
        fig = px.bar(df, x="Trait", y="Score", title="Votre Profil Big Five")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.markdown("**RIASEC Profile:**")
        riasec_scores = {"Social": 0.85, "Investigative": 0.7, "Enterprising": 0.6}
        df2 = pd.DataFrame(list(riasec_scores.items()), columns=["Type", "Score"])
        fig2 = px.pie(df2, values="Score", names="Type", title="Vos Int√©r√™ts Dominants")
        st.plotly_chart(fig2, use_container_width=True)


def render_skills_assessment_step() -> Optional[Dict[str, Any]]:
    """√âtape √©valuation comp√©tences"""
    
    st.markdown("### üõ†Ô∏è **Cartographie de Vos Comp√©tences**")
    st.info("Identifiez vos comp√©tences transf√©rables et talents cach√©s")
    
    # Simulation d'√©valuation comp√©tences
    competence_categories = {
        "Techniques": ["Python", "Excel", "SQL", "Design", "Marketing Digital"],
        "Manag√©riales": ["Leadership", "Gestion projet", "N√©gociation", "Coaching"],
        "Interpersonnelles": ["Communication", "Empathie", "Travail √©quipe", "Pr√©sentation"],
        "Cognitives": ["Analyse", "R√©solution probl√®me", "Cr√©ativit√©", "Apprentissage"]
    }
    
    skills_assessment = {}
    
    for category, skills in competence_categories.items():
        st.markdown(f"#### {category}")
        
        selected_skills = st.multiselect(
            f"Comp√©tences {category.lower()} que vous poss√©dez:",
            skills,
            key=f"skills_{category}"
        )
        
        if selected_skills:
            skills_levels = {}
            for skill in selected_skills:
                level = st.slider(
                    f"Niveau en {skill}",
                    min_value=1, max_value=10, value=6,
                    key=f"level_{skill}"
                )
                skills_levels[skill] = level
            
            skills_assessment[category] = skills_levels
    
    if st.button("üìä Analyser Mes Comp√©tences", type="primary"):
        if skills_assessment:
            render_skills_analysis(skills_assessment)
            return {"skills_assessment": skills_assessment}
    
    return None


def render_skills_analysis(skills_assessment: Dict[str, Dict[str, int]]) -> None:
    """Analyse et visualisation des comp√©tences"""
    
    st.markdown("#### üéØ **Analyse de Vos Comp√©tences**")
    
    # Cr√©er DataFrame pour visualisation
    all_skills = []
    for category, skills in skills_assessment.items():
        for skill, level in skills.items():
            all_skills.append({"Comp√©tence": skill, "Niveau": level, "Cat√©gorie": category})
    
    if all_skills:
        df = pd.DataFrame(all_skills)
        
        # Graphique radar
        fig = px.bar(
            df, 
            x="Comp√©tence", 
            y="Niveau", 
            color="Cat√©gorie",
            title="Profil de Comp√©tences"
        )
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)
        
        # Top comp√©tences
        top_skills = df.nlargest(5, "Niveau")
        st.markdown("**üèÜ Vos Top 5 Comp√©tences:**")
        for _, skill in top_skills.iterrows():
            st.write(f"‚Ä¢ **{skill['Comp√©tence']}** ({skill['Cat√©gorie']}) - Niveau {skill['Niveau']}/10")


def render_career_recommendations_step() -> Optional[Dict[str, Any]]:
    """√âtape recommandations m√©tiers"""
    
    st.markdown("### üéØ **Vos Recommandations M√©tiers**")
    
    # Mock recommendations (en production, utiliserait RecommendationEngine)
    recommendations = [
        {
            "title": "Coach en Reconversion",
            "compatibility": 0.92,
            "sector": "Services",
            "justification": "Parfaite compatibilit√© avec votre profil Social et votre exp√©rience",
            "ia_resistance": 0.88,
            "salary_range": "35-55k‚Ç¨",
            "required_skills": ["√âcoute active", "Empathie", "M√©thodes coaching"]
        },
        {
            "title": "Data Scientist",
            "compatibility": 0.78,
            "sector": "Tech",
            "justification": "Vos comp√©tences analytiques et votre profil Investigative",
            "ia_resistance": 0.65,
            "salary_range": "45-70k‚Ç¨", 
            "required_skills": ["Python", "ML", "Statistiques", "Communication"]
        },
        {
            "title": "Designer UX",
            "compatibility": 0.75,
            "sector": "Cr√©atif",
            "justification": "Cr√©ativit√© et compr√©hension utilisateur excellent",
            "ia_resistance": 0.70,
            "salary_range": "40-60k‚Ç¨",
            "required_skills": ["Design thinking", "Prototypage", "User research"]
        }
    ]
    
    for i, rec in enumerate(recommendations):
        with st.expander(f"üèÜ **#{i+1} - {rec['title']}** (Compatibilit√©: {rec['compatibility']:.0%})"):
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("Compatibilit√©", f"{rec['compatibility']:.0%}")
                st.metric("R√©sistance IA", f"{rec['ia_resistance']:.0%}")
            
            with col2:
                st.write(f"**Secteur:** {rec['sector']}")
                st.write(f"**Salaire:** {rec['salary_range']}")
            
            with col3:
                st.write("**Comp√©tences requises:**")
                for skill in rec['required_skills']:
                    st.write(f"‚Ä¢ {skill}")
            
            st.write(f"**Justification:** {rec['justification']}")
            
            if st.button(f"ü§ñ Valider ce m√©tier avec l'IA", key=f"validate_{i}"):
                st.session_state[f'job_to_analyze'] = rec['title']
                st.info(f"üîÑ Analyse IA pour {rec['title']} pr√©par√©e...")
    
    return {"recommendations": recommendations}


# =============================================
# COMPOSANTS VALIDATION IA
# =============================================

def render_ia_validation() -> None:
    """Interface de validation IA"""
    
    st.markdown("## ü§ñ **Validation IA Future-Proof**")
    st.markdown("*Analyse de la r√©sistance de vos m√©tiers face √† l'IA*")
    
    job_to_analyze = st.text_input(
        "M√©tier √† analyser",
        value=st.session_state.get('job_to_analyze', ''),
        placeholder="Ex: Data Scientist, Coach, Chef de Projet..."
    )
    
    if st.button("üîç **Analyser la R√©sistance IA**", type="primary") and job_to_analyze:
        
        with st.spinner("ü§ñ Analyse approfondie en cours..."):
            # Simulation analyse (en production utiliserait IAFutureValidator)
            import time
            time.sleep(2)
            
            # Mock analysis
            mock_analysis = {
                "m√©tier_titre": job_to_analyze,
                "score_r√©sistance_ia": 0.72,
                "niveau_menace": "faible",
                "type_√©volution": "enhanced",
                "timeline_impact": "5-10 ans",
                "t√¢ches_automatisables": [
                    "Collecte de donn√©es (80%)",
                    "Rapports standardis√©s (70%)"
                ],
                "t√¢ches_humaines_critiques": [
                    "Interpr√©tation business (95%)",
                    "Communication insights (90%)",
                    "Prise de d√©cision strat√©gique (85%)"
                ],
                "opportunit√©s_ia_collaboration": [
                    "IA augmente capacit√© d'analyse",
                    "Automatisation t√¢ches r√©p√©titives",
                    "Focus sur strat√©gique"
                ],
                "comp√©tences_ia_√†_d√©velopper": [
                    "Prompt engineering",
                    "Interpr√©tation mod√®les ML",
                    "√âthique IA"
                ],
                "message_futur_positif": f"Excellente nouvelle ! Le m√©tier de {job_to_analyze} √©volue positivement avec l'IA."
            }
            
            render_ia_analysis_results(mock_analysis)


def render_ia_analysis_results(analysis: Dict[str, Any]) -> None:
    """Affichage des r√©sultats d'analyse IA"""
    
    st.markdown("---")
    st.markdown(f"## üéØ **Analyse IA : {analysis['m√©tier_titre']}**")
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("R√©sistance IA", f"{analysis['score_r√©sistance_ia']:.0%}")
    
    with col2:
        st.metric("Niveau Menace", analysis['niveau_menace'].title())
    
    with col3:
        st.metric("√âvolution", analysis['type_√©volution'].title())
    
    with col4:
        st.metric("Timeline", analysis['timeline_impact'])
    
    # Message rassurant
    st.markdown(f"""
    <div style="background: #d4edda; border: 1px solid #c3e6cb; color: #155724; padding: 1rem; border-radius: 8px; margin: 1rem 0;">
        <h4>üí° Vision Future-Proof</h4>
        <p>{analysis['message_futur_positif']}</p>
    </div>
    """, unsafe_allow_html=True)
    
    # D√©tails par onglets
    tabs = st.tabs(["ü§ñ Automatisation", "üë®‚Äçüíº Valeur Humaine", "üöÄ Opportunit√©s", "üìö Comp√©tences"])
    
    with tabs[0]:
        st.markdown("### ü§ñ **T√¢ches Automatisables**")
        for task in analysis['t√¢ches_automatisables']:
            st.write(f"‚Ä¢ {task}")
    
    with tabs[1]:
        st.markdown("### üë®‚Äçüíº **Valeur Humaine Critique**")
        for task in analysis['t√¢ches_humaines_critiques']:
            st.write(f"‚Ä¢ {task}")
    
    with tabs[2]:
        st.markdown("### üöÄ **Opportunit√©s avec l'IA**")
        for opp in analysis['opportunit√©s_ia_collaboration']:
            st.write(f"‚Ä¢ {opp}")
    
    with tabs[3]:
        st.markdown("### üìö **Comp√©tences IA √† D√©velopper**")
        for skill in analysis['comp√©tences_ia_√†_d√©velopper']:
            st.write(f"‚Ä¢ {skill}")


# =============================================
# COMPOSANTS √âCOSYST√àME
# =============================================

def render_ecosystem_transition() -> None:
    """Interface transition √©cosyst√®me Phoenix"""
    
    st.markdown("## üîó **√âcosyst√®me Phoenix**")
    st.markdown("*Continuez votre parcours avec les autres applications Phoenix*")
    
    # Applications Phoenix disponibles
    phoenix_apps = [
        {
            "name": "Phoenix CV",
            "icon": "üìÑ",
            "description": "Cr√©ez un CV optimis√© pour votre nouveau m√©tier IA-resistant",
            "features": ["Template adapt√© au secteur", "Comp√©tences IA int√©gr√©es", "ATS-friendly"],
            "url": "https://phoenix-cv.streamlit.app/",
            "context_type": "cv_creation"
        },
        {
            "name": "Phoenix Letters",
            "icon": "‚úâÔ∏è",
            "description": "Lettres de motivation personnalis√©es pour votre reconversion",
            "features": ["Narrative de reconversion", "Adaptation IA storyline", "Ultra-personnalis√©es"],
            "url": "https://phoenix-letters.streamlit.app/",
            "context_type": "cover_letter"
        },
        {
            "name": "Phoenix Rise",
            "icon": "ü¶ã",
            "description": "Coaching IA pour accompagner votre transformation",
            "features": ["Suivi personnalis√©", "Confiance en soi", "Plan d'action 90j"],
            "url": "https://phoenix-rise.streamlit.app/",
            "context_type": "coaching"
        }
    ]
    
    cols = st.columns(len(phoenix_apps))
    
    for i, app in enumerate(phoenix_apps):
        with cols[i]:
            render_feature_card(
                f"{app['icon']} {app['name']}",
                app['description']
            )
            
            st.markdown("**Fonctionnalit√©s:**")
            for feature in app['features']:
                st.write(f"‚Ä¢ {feature}")
            
            if st.button(f"‚û°Ô∏è Aller sur {app['name']}", key=f"goto_{app['name']}"):
                st.session_state[f'transition_to_{app["context_type"]}'] = True
                st.info(f"üîÑ Pr√©paration transition vers {app['name']}...")


# =============================================
# COMPOSANTS ANALYTICS
# =============================================

def render_analytics_dashboard() -> None:
    """Dashboard analytics Phoenix Aube"""
    
    st.markdown("## üìä **Analytics Phoenix Aube**")
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    metrics = [
        {"title": "Analyses IA Aujourd'hui", "value": "142", "icon": "üîç"},
        {"title": "Explorations D√©marr√©es", "value": "89", "icon": "üöÄ"},
        {"title": "M√©tiers Choisis", "value": "34", "icon": "üéØ"},
        {"title": "Satisfaction Moyenne", "value": "4.7/5", "icon": "‚≠ê"}
    ]
    
    for i, metric in enumerate(metrics):
        with [col1, col2, col3, col4][i]:
            st.markdown(f"""
            <div style="background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%); color: white; padding: 1rem; border-radius: 10px; text-align: center; margin: 0.5rem 0;">
                <h3>{metric['value']}</h3>
                <p>{metric['title']}</p>
            </div>
            """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Graphiques
    col1, col2 = st.columns(2)
    
    with col1:
        render_top_analyzed_jobs_chart()
    
    with col2:
        render_resistance_scores_chart()


def render_top_analyzed_jobs_chart() -> None:
    """Graphique top m√©tiers analys√©s"""
    
    st.markdown("### üîù Top M√©tiers Analys√©s")
    
    mock_data = {
        "M√©tier": ["Data Scientist", "Coach", "Chef de Projet", "Designer UX", "Consultant"],
        "Analyses": [45, 38, 32, 28, 24]
    }
    
    df = pd.DataFrame(mock_data)
    fig = px.bar(df, x="Analyses", y="M√©tier", orientation="h")
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)


def render_resistance_scores_chart() -> None:
    """Graphique scores r√©sistance IA par secteur"""
    
    st.markdown("### üìà Scores R√©sistance IA Moyens")
    
    mock_resistance = {
        "Secteur": ["Services", "Cr√©atif", "Tech", "Finance", "Industrie"],
        "Score": [0.82, 0.75, 0.68, 0.45, 0.38]
    }
    
    df = pd.DataFrame(mock_resistance)
    fig = px.pie(df, values="Score", names="Secteur")
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)