"""
üîÆ Phoenix Aube - Mock Providers for MVP Development
Providers simul√©s pour d√©veloppement et tests
"""

import asyncio
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
import random
import logging

from ..core.models import ProfilExploration, RecommandationCarri√®re, AnalyseR√©silienceIA
from ..core.events import √âv√©nementPhoenixAube, PhoenixEcosystemBridge

logger = logging.getLogger(__name__)


# =============================================
# MOCK EVENT STORE
# =============================================

class MockEventStore:
    """Event Store simul√© pour MVP"""
    
    def __init__(self):
        self.events: List[√âv√©nementPhoenixAube] = []
        self.user_journeys: Dict[str, List[√âv√©nementPhoenixAube]] = {}
    
    async def store_event(self, event: √âv√©nementPhoenixAube) -> bool:
        """Stocke un √©v√©nement (simulation)"""
        try:
            # Simuler delay r√©seau
            await asyncio.sleep(0.1)
            
            # Stocker √©v√©nement
            self.events.append(event)
            
            # Indexer par user
            if event.user_id not in self.user_journeys:
                self.user_journeys[event.user_id] = []
            self.user_journeys[event.user_id].append(event)
            
            logger.info(f"Event stored: {event.event_type} for user {event.user_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error storing event: {str(e)}")
            return False
    
    async def get_user_events(
        self, 
        user_id: str, 
        event_types: Optional[List[str]] = None
    ) -> List[√âv√©nementPhoenixAube]:
        """R√©cup√®re √©v√©nements utilisateur"""
        user_events = self.user_journeys.get(user_id, [])
        
        if event_types:
            user_events = [
                event for event in user_events 
                if event.event_type in event_types
            ]
        
        return sorted(user_events, key=lambda x: x.timestamp)
    
    async def get_user_journey_summary(self, user_id: str) -> Dict[str, Any]:
        """R√©sum√© du parcours utilisateur"""
        events = await self.get_user_events(user_id)
        
        if not events:
            return {"user_id": user_id, "events_count": 0, "journey_status": "not_started"}
        
        # Analyser progression
        event_types = [event.event_type for event in events]
        
        journey_status = "started"
        if "recommandations_g√©n√©r√©es" in event_types:
            journey_status = "recommendations_received"
        if "validation_ia_effectu√©e" in event_types:
            journey_status = "ia_validation_completed"
        if "m√©tier_choisi" in event_types:
            journey_status = "career_chosen"
        if "transition_√©cosyst√®me" in event_types:
            journey_status = "ecosystem_transition"
        
        return {
            "user_id": user_id,
            "events_count": len(events),
            "journey_status": journey_status,
            "first_event": events[0].timestamp,
            "last_activity": events[-1].timestamp,
            "event_types": list(set(event_types))
        }


# =============================================
# MOCK RESEARCH PROVIDER (3IA)
# =============================================

class MockResearchProvider:
    """Provider de recherche 3IA simul√©"""
    
    def __init__(self):
        self.job_database = {
            # Tech sector
            "Data Scientist": {
                "automation_risk": 0.35,
                "evolution_type": "enhanced",
                "timeline_years": "5-10 ans",
                "sector": "Tech",
                "key_human_skills": ["Interpr√©tation business", "Storytelling donn√©es", "√âthique IA"],
                "automatable_tasks": ["Nettoyage donn√©es", "Mod√®les standardis√©s", "Rapports simples"],
                "future_opportunities": ["IA explicable", "AutoML supervision", "Gouvernance donn√©es"]
            },
            
            # Services sector
            "Coach": {
                "automation_risk": 0.15,
                "evolution_type": "resistant",
                "timeline_years": ">10 ans",
                "sector": "Services",
                "key_human_skills": ["Empathie", "√âcoute active", "Intuition humaine"],
                "automatable_tasks": ["Planification basique", "Suivi KPI", "Reporting"],
                "future_opportunities": ["Coaching augment√© IA", "Analytics comportemental", "Personnalisation scale"]
            },
            
            "Chef de Projet": {
                "automation_risk": 0.45,
                "evolution_type": "transformed",
                "timeline_years": "3-7 ans",
                "sector": "Transversal",
                "key_human_skills": ["Leadership", "N√©gociation", "Vision strat√©gique"],
                "automatable_tasks": ["Planning automatique", "Reporting", "Suivi t√¢ches"],
                "future_opportunities": ["PM augment√©", "Pr√©diction risques", "Optimisation ressources"]
            },
            
            # Creative sector
            "Designer UX": {
                "automation_risk": 0.30,
                "evolution_type": "enhanced",
                "timeline_years": "5-8 ans",
                "sector": "Cr√©atif",
                "key_human_skills": ["Cr√©ativit√©", "Compr√©hension utilisateur", "Vision design"],
                "automatable_tasks": ["Wireframes basiques", "A/B testing", "Audit UX"],
                "future_opportunities": ["Design g√©n√©ratif", "UX pr√©dictive", "Personnalisation masse"]
            },
            
            # Finance sector
            "Analyste Financier": {
                "automation_risk": 0.65,
                "evolution_type": "disrupted",
                "timeline_years": "2-5 ans",
                "sector": "Finance",
                "key_human_skills": ["Analyse complexe", "Conseil strat√©gique", "Gestion relation client"],
                "automatable_tasks": ["Calculs financiers", "Rapports standards", "Veille march√©"],
                "future_opportunities": ["Finance pr√©dictive", "Conseil augment√©", "Risk management IA"]
            }
        }
    
    async def analyze_job_automation_risk(self, job_title: str) -> Dict[str, Any]:
        """Analyse risque automation d'un m√©tier"""
        await asyncio.sleep(0.2)  # Simuler appel API
        
        # Recherche exacte ou approximative
        job_data = self.job_database.get(job_title)
        
        if not job_data:
            # Fallback avec donn√©es g√©n√©riques
            job_data = {
                "automation_risk": random.uniform(0.2, 0.7),
                "evolution_type": random.choice(["enhanced", "transformed", "resistant"]),
                "timeline_years": random.choice(["3-5 ans", "5-10 ans", ">10 ans"]),
                "sector": "G√©n√©rique",
                "key_human_skills": ["Cr√©ativit√©", "Relations humaines", "R√©solution complexe"],
                "automatable_tasks": ["T√¢ches r√©p√©titives", "Analyse simple", "Reporting"],
                "future_opportunities": ["Collaboration IA", "Augmentation capacit√©s", "Nouveaux march√©s"]
            }
        
        return {
            "job_title": job_title,
            "automation_data": job_data,
            "research_confidence": 0.85 if job_title in self.job_database else 0.6,
            "last_updated": datetime.now().isoformat()
        }
    
    async def get_sector_evolution_trends(self, sector: str) -> Dict[str, Any]:
        """Tendances √©volution secteur"""
        await asyncio.sleep(0.3)
        
        sector_trends = {
            "Tech": {
                "growth_rate": 0.15,
                "ai_adoption_rate": 0.8,
                "job_creation": ["IA Ethics Officer", "Prompt Engineer", "AI Trainer"],
                "job_displacement": ["QA Manuel", "Analyste Junior", "Support Level 1"],
                "key_skills_future": ["IA Literacy", "Ethics", "Human-AI Collaboration"]
            },
            
            "Services": {
                "growth_rate": 0.08,
                "ai_adoption_rate": 0.4,
                "job_creation": ["Coach Digital", "Conseiller IA", "Experience Designer"],
                "job_displacement": ["Admin Standard", "Accueil Basique", "Support Simple"],
                "key_skills_future": ["Soft Skills", "Personnalisation", "Emotional Intelligence"]
            },
            
            "Finance": {
                "growth_rate": 0.05,
                "ai_adoption_rate": 0.7,
                "job_creation": ["Fintech Specialist", "Risk AI Analyst", "Robo-advisor Manager"],
                "job_displacement": ["Analyste Junior", "Comptable Standard", "Back Office"],
                "key_skills_future": ["R√©gulation IA", "Finance Complexe", "Client Advisory"]
            }
        }
        
        return {
            "sector": sector,
            "trends": sector_trends.get(sector, {
                "growth_rate": 0.06,
                "ai_adoption_rate": 0.5,
                "job_creation": ["Sp√©cialiste IA Sectoriel"],
                "job_displacement": ["T√¢ches Routini√®res"],
                "key_skills_future": ["Adaptabilit√©", "IA Collaboration"]
            }),
            "forecast_horizon": "2025-2035"
        }


# =============================================
# MOCK RECOMMENDATION ENGINE
# =============================================

class MockRecommendationEngine:
    """Moteur de recommandation simul√©"""
    
    def __init__(self):
        self.career_templates = [
            {
                "title": "Data Scientist",
                "base_compatibility": 0.85,
                "sector": "Tech",
                "required_traits": ["Openness", "Conscientiousness"],
                "riasec_match": ["Investigative", "Conventional"],
                "skills_needed": ["Python", "Statistics", "ML", "Communication"],
                "ia_resistance": 0.65
            },
            {
                "title": "Coach en Reconversion",
                "base_compatibility": 0.90,
                "sector": "Services",
                "required_traits": ["Agreeableness", "Extraversion"],
                "riasec_match": ["Social", "Enterprising"],
                "skills_needed": ["√âcoute", "Empathie", "M√©thodes coaching", "Psychology"],
                "ia_resistance": 0.85
            },
            {
                "title": "Chef de Projet Digital",
                "base_compatibility": 0.75,
                "sector": "Tech/Management",
                "required_traits": ["Conscientiousness", "Extraversion"],
                "riasec_match": ["Enterprising", "Conventional"],
                "skills_needed": ["Leadership", "Agile", "Communication", "Tech literacy"],
                "ia_resistance": 0.55
            },
            {
                "title": "Designer UX/UI",
                "base_compatibility": 0.80,
                "sector": "Cr√©atif",
                "required_traits": ["Openness", "Conscientiousness"],
                "riasec_match": ["Artistic", "Investigative"],
                "skills_needed": ["Design thinking", "Prototyping", "User research", "Tools"],
                "ia_resistance": 0.70
            },
            {
                "title": "Consultant en Transformation",
                "base_compatibility": 0.78,
                "sector": "Consulting",
                "required_traits": ["Openness", "Conscientiousness", "Extraversion"],
                "riasec_match": ["Enterprising", "Investigative"],
                "skills_needed": ["Analyse", "Pr√©sentation", "Change management", "Industry knowledge"],
                "ia_resistance": 0.72
            }
        ]
    
    async def generate_recommendations(
        self, 
        user_profile: Dict[str, Any]
    ) -> List[Dict[str, Any]]:
        """G√©n√®re recommandations personnalis√©es"""
        await asyncio.sleep(0.5)  # Simuler calcul
        
        # Extraire donn√©es profil
        big_five = user_profile.get("big_five", {})
        riasec = user_profile.get("riasec", {})
        constraints = user_profile.get("constraints", {})
        
        recommendations = []
        
        for career in self.career_templates:
            # Calculer score de compatibilit√©
            compatibility_score = career["base_compatibility"]
            
            # Ajuster selon Big Five (simulation)
            if big_five:
                trait_bonus = 0
                for trait in career["required_traits"]:
                    if trait.lower() in [t.lower() for t in big_five.keys()]:
                        trait_bonus += 0.05
                compatibility_score = min(1.0, compatibility_score + trait_bonus)
            
            # Ajuster selon RIASEC
            if riasec:
                riasec_bonus = 0
                for interest in career["riasec_match"]:
                    if interest in riasec:
                        riasec_bonus += 0.03
                compatibility_score = min(1.0, compatibility_score + riasec_bonus)
            
            # Appliquer contraintes (simulation basique)
            if constraints:
                if constraints.get("salary_min") and career["sector"] == "Services":
                    compatibility_score -= 0.1  # Services souvent moins pay√©s
            
            # Ajouter variance r√©aliste
            compatibility_score += random.uniform(-0.05, 0.05)
            compatibility_score = max(0.1, min(1.0, compatibility_score))
            
            recommendations.append({
                "title": career["title"],
                "compatibility_score": round(compatibility_score, 2),
                "sector": career["sector"],
                "ia_resistance_score": career["ia_resistance"],
                "required_skills": career["skills_needed"],
                "justification": self._generate_justification(career, compatibility_score),
                "training_recommendations": self._generate_training_recs(career),
                "salary_range": self._estimate_salary_range(career["sector"])
            })
        
        # Trier par compatibilit√© et retourner top 5
        recommendations.sort(key=lambda x: x["compatibility_score"], reverse=True)
        return recommendations[:5]
    
    def _generate_justification(self, career: Dict, score: float) -> str:
        """G√©n√®re justification personnalis√©e"""
        justifications = [
            f"Excellente correspondance avec votre profil ({score:.0%})",
            f"Vos comp√©tences s'alignent parfaitement avec {career['title']}",
            f"Secteur {career['sector']} en forte croissance et correspondance √©lev√©e",
            f"M√©tier r√©sistant √† l'IA ({career['ia_resistance']:.0%}) et adapt√© √† vos traits"
        ]
        return random.choice(justifications)
    
    def _generate_training_recs(self, career: Dict) -> List[str]:
        """G√©n√®re recommandations formation"""
        all_training = {
            "Data Scientist": ["Formation ML/AI", "Certification Python", "Stats avanc√©es"],
            "Coach en Reconversion": ["Certification coaching", "PNL", "Psychologie positive"],
            "Chef de Projet Digital": ["Certification Agile", "Leadership", "Digital transformation"],
            "Designer UX/UI": ["UX certification", "Design tools", "User research methods"],
            "Consultant en Transformation": ["Change management", "Industry expertise", "Consulting skills"]
        }
        return all_training.get(career["title"], ["Formation m√©tier", "Soft skills", "Certification"])
    
    def _estimate_salary_range(self, sector: str) -> str:
        """Estimation fourchette salariale"""
        ranges = {
            "Tech": "45-70k‚Ç¨",
            "Services": "35-55k‚Ç¨",
            "Consulting": "50-80k‚Ç¨",
            "Cr√©atif": "35-60k‚Ç¨",
            "Finance": "45-85k‚Ç¨"
        }
        return ranges.get(sector, "40-65k‚Ç¨")


# =============================================
# MOCK GEMINI CLIENT
# =============================================

class MockGeminiClient:
    """Client Gemini simul√© pour d√©veloppement"""
    
    async def analyze_job_resilience(self, job_title: str, context: Dict = None) -> Dict[str, Any]:
        """Analyse IA resilience avec prompts optimis√©s"""
        await asyncio.sleep(1.0)  # Simuler appel API
        
        # Base de donn√©es mock des analyses
        mock_analyses = {
            "Data Scientist": {
                "score_r√©sistance_ia": 0.65,
                "niveau_menace": "mod√©r√©e",
                "type_√©volution": "enhanced",
                "timeline_impact": "5-10 ans",
                "message_futur_positif": "L'IA augmente vos capacit√©s d'analyse ! Vous devenez le chef d'orchestre des algorithmes.",
                "t√¢ches_automatisables": [
                    "Nettoyage de donn√©es (80%)",
                    "Mod√®les pr√©dictifs simples (70%)",
                    "Rapports standardis√©s (85%)"
                ],
                "t√¢ches_humaines_critiques": [
                    "Interpr√©tation business (90%)",
                    "√âthique et biais IA (95%)",
                    "Storytelling donn√©es (85%)"
                ],
                "opportunit√©s_ia_collaboration": [
                    "AutoML pour prototypage rapide",
                    "IA explicable pour transparence",
                    "Augmentation cr√©ativit√© analyse"
                ],
                "comp√©tences_ia_√†_d√©velopper": [
                    "Prompt engineering",
                    "MLOps et gouvernance IA",
                    "√âthique et fairness",
                    "IA explicable"
                ]
            }
        }
        
        # Utiliser donn√©es mock ou g√©n√©rer al√©atoirement
        if job_title in mock_analyses:
            return mock_analyses[job_title]
        
        # G√©n√©ration proc√©durale pour m√©tiers non d√©finis
        resistance_score = random.uniform(0.3, 0.9)
        
        return {
            "score_r√©sistance_ia": round(resistance_score, 2),
            "niveau_menace": "faible" if resistance_score > 0.7 else "mod√©r√©e" if resistance_score > 0.4 else "√©lev√©e",
            "type_√©volution": random.choice(["enhanced", "transformed", "resistant"]),
            "timeline_impact": random.choice(["3-5 ans", "5-10 ans", ">10 ans"]),
            "message_futur_positif": f"Le m√©tier de {job_title} √©volue positivement avec l'IA. Nouvelles opportunit√©s √† saisir !",
            "t√¢ches_automatisables": [
                "T√¢ches administratives (70%)",
                "Calculs r√©p√©titifs (80%)",
                "Reporting basique (75%)"
            ],
            "t√¢ches_humaines_critiques": [
                "Relations humaines (90%)",
                "D√©cisions complexes (85%)",
                "Cr√©ativit√© strat√©gique (80%)"
            ],
            "opportunit√©s_ia_collaboration": [
                "Automatisation t√¢ches routini√®res",
                "Analyse augment√©e",
                "Personnalisation scale"
            ],
            "comp√©tences_ia_√†_d√©velopper": [
                "IA literacy",
                "Collaboration human-AI",
                "√âthique num√©rique"
            ]
        }
    
    async def calculate_anxiety_score(self, current_job: str) -> Dict[str, Any]:
        """Calcul score anxi√©t√© IA"""
        await asyncio.sleep(0.5)
        
        # Scores d'anxi√©t√© par m√©tier (simulation)
        anxiety_scores = {
            "Comptable": 0.8,
            "Traducteur": 0.7,
            "Analyste Junior": 0.75,
            "T√©l√©conseiller": 0.85,
            "Data Scientist": 0.35,
            "Coach": 0.2,
            "M√©decin": 0.15,
            "Enseignant": 0.3,
            "Designer": 0.4
        }
        
        score = anxiety_scores.get(current_job, random.uniform(0.2, 0.7))
        
        # D√©terminer niveau et message
        if score < 0.3:
            level = "faible"
            message = f"Excellente nouvelle ! Votre m√©tier {current_job} √©volue positivement avec l'IA. üöÄ"
            recommendation = "Explorez comment l'IA peut augmenter votre productivit√©"
        elif score < 0.6:
            level = "mod√©r√©"
            message = f"Votre m√©tier {current_job} se transforme avec l'IA. Opportunit√© d'√©volution ! ‚ö°"
            recommendation = "D√©veloppez des comp√©tences compl√©mentaires √† l'IA"
        else:
            level = "√©lev√©"
            message = f"Votre m√©tier {current_job} n√©cessite une adaptation proactive face √† l'IA. üéØ"
            recommendation = "Envisagez une reconversion ou une sp√©cialisation"
        
        return {
            "m√©tier": current_job,
            "score_anxi√©t√©": round(score, 2),
            "niveau_anxi√©t√©": level,
            "message_court": message,
            "recommandation_action": recommendation,
            "confiance_analyse": 0.85
        }