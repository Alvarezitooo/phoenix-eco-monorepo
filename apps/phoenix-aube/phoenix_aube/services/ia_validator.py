"""
üîÆ SERVICE VALIDATION IA - INNOVATION DIFF√âRENCIANTE
Phoenix Aube - Service Validation IA Future-Proof
Innovation diff√©renciante - Temps 2
Pr√©diction impact IA sur m√©tiers avec transparence scientifique
"""

import asyncio
from typing import List, Dict, Optional, Tuple, Any
from datetime import datetime, timedelta
import json
import logging
from dataclasses import dataclass
from enum import Enum

from ..core.models import (
    AnalyseR√©silienceIA, TypeEvolutionIA, NiveauConfiance,
    RecommandationCarri√®re
)

# =============================================
# TYPES & CONFIGURATIONS
# =============================================

@dataclass
class T√¢cheM√©tier:
    """Repr√©sentation d'une t√¢che m√©tier pour analyse IA"""
    titre: str
    description: str
    fr√©quence: str  # "quotidienne", "hebdomadaire", "mensuelle"
    complexit√©: int  # 1-5
    interaction_humaine_requise: bool
    cr√©ativit√©_requise: bool
    empathie_requise: bool
    automatisabilit√©_score: float  # 0-1

@dataclass
class Capacit√©IA:
    """Capacit√© IA et son niveau de maturit√©"""
    nom: str
    description: str
    maturit√©_actuelle: int  # 1-5 (1=recherche, 5=production)
    progression_estim√©e: int  # mois pour atteindre niveau production
    impact_potentiel: float  # 0-1 sur t√¢ches m√©tier

class SourceDonn√©es(str, Enum):
    """Sources de donn√©es pour l'analyse"""
    OCDE_FUTURE_WORK = "ocde_future_work"
    MIT_WORK_OF_FUTURE = "mit_work_future"
    STANFORD_AI_INDEX = "stanford_ai_index"
    ARXIV_PAPERS = "arxiv_papers"
    FRANCE_STRAT√âGIE = "france_strategie"
    INTERNAL_RESEARCH = "internal_research"
    EXPERT_CONSENSUS = "expert_consensus"

# =============================================
# SERVICE VALIDATION IA PRINCIPAL
# =============================================

class IAFutureValidator:
    """
    Validateur de p√©rennit√© m√©tiers face √† l'IA
    C≈ìur de l'innovation Phoenix Aube - Temps 2
    """
    
    def __init__(self, event_store, research_data_provider):
        self.event_store = event_store
        self.research_provider = research_data_provider
        self.logger = logging.getLogger(__name__)
        
        # Base de donn√©es m√©tiers ‚Üí t√¢ches (√† enrichir)
        self.m√©tiers_t√¢ches_db = self._init_m√©tiers_t√¢ches_database()
        
        # Capacit√©s IA actuelles et √©volution
        self.capacit√©s_ia = self._init_capacit√©s_ia_tracker()
        
        # Mod√®les pr√©dictifs (coefficients √† calibrer avec 3IA)
        self.mod√®le_coefficients = self._init_mod√®le_pr√©dictif()
    
    async def √©valuer_r√©sistance_m√©tier(self, m√©tier_titre: str) -> AnalyseR√©silienceIA:
        """
        √âvalue la r√©sistance d'un m√©tier √† l'automatisation IA
        C≈íUR DE L'INNOVATION PHOENIX AUBE
        """
        self.logger.info(f"D√©but analyse r√©sistance IA pour: {m√©tier_titre}")
        
        try:
            # 1. D√©composer le m√©tier en t√¢ches
            t√¢ches_m√©tier = await self._d√©composer_m√©tier_en_t√¢ches(m√©tier_titre)
            
            # 2. Analyser chaque t√¢che vs capacit√©s IA
            analyse_t√¢ches = await self._analyser_t√¢ches_vs_ia(t√¢ches_m√©tier)
            
            # 3. Calculer score de r√©sistance global
            score_r√©sistance = self._calculer_score_r√©sistance(analyse_t√¢ches)
            
            # 4. Pr√©dire √©volution temporelle
            √©volution_timeline = await self._pr√©dire_√©volution_temporelle(m√©tier_titre, analyse_t√¢ches)
            
            # 5. Identifier opportunit√©s collaboration IA
            opportunit√©s_collaboration = await self._identifier_opportunit√©s_ia(m√©tier_titre, t√¢ches_m√©tier)
            
            # 6. G√©n√©rer recommandations comp√©tences IA
            comp√©tences_ia_recommand√©es = await self._recommander_comp√©tences_ia(m√©tier_titre)
            
            # 7. Cr√©er message rassurant
            message_positif = self._g√©n√©rer_message_futur_positif(m√©tier_titre, score_r√©sistance, √©volution_timeline)
            
            # 8. √âvaluer niveau de confiance
            niveau_confiance = self._√©valuer_confiance_pr√©diction(m√©tier_titre, analyse_t√¢ches)
            
            # 9. Cr√©er analyse compl√®te
            analyse = AnalyseR√©silienceIA(
                m√©tier_titre=m√©tier_titre,
                score_r√©sistance_ia=score_r√©sistance,
                niveau_menace=self._convertir_score_en_niveau(score_r√©sistance),
                type_√©volution=√©volution_timeline["type"],
                timeline_impact=√©volution_timeline["timeline"],
                t√¢ches_automatisables=analyse_t√¢ches["automatisables"],
                t√¢ches_humaines_critiques=analyse_t√¢ches["humaines_critiques"],
                opportunit√©s_ia_collaboration=opportunit√©s_collaboration,
                comp√©tences_ia_√†_d√©velopper=comp√©tences_ia_recommand√©es,
                message_futur_positif=message_positif,
                avantages_√©volution=√©volution_timeline["avantages"],
                niveau_confiance=niveau_confiance,
                sources_analyse=self._get_sources_utilis√©es(m√©tier_titre)
            )
            
            # 10. Publier √©v√©nement
            await self.event_store.publish_event({
                "event_type": "validation_ia_effectu√©e",
                "user_id": "system",  # √Ä adapter selon le contexte
                "data": {
                    "m√©tier": m√©tier_titre,
                    "score_r√©sistance": score_r√©sistance,
                    "niveau_confiance": niveau_confiance.value,
                    "sources_utilis√©es": analyse.sources_analyse
                }
            })
            
            self.logger.info(f"Analyse termin√©e - Score: {score_r√©sistance:.2f}, Confiance: {niveau_confiance}")
            return analyse
            
        except Exception as e:
            self.logger.error(f"Erreur analyse IA pour {m√©tier_titre}: {str(e)}")
            # Retourner analyse par d√©faut plut√¥t que de fail
            return self._cr√©er_analyse_par_d√©faut(m√©tier_titre)
    
    async def pr√©dire_√©volution_secteur(self, secteur: str, horizon_ann√©es: int = 10) -> Dict[str, Any]:
        """
        Pr√©dit l'√©volution d'un secteur entier face √† l'IA
        """
        m√©tiers_secteur = await self.research_provider.get_m√©tiers_by_secteur(secteur)
        
        analyses_m√©tiers = []
        for m√©tier in m√©tiers_secteur:
            analyse = await self.√©valuer_r√©sistance_m√©tier(m√©tier["titre"])
            analyses_m√©tiers.append(analyse)
        
        # Synth√®se sectorielle
        √©volution_secteur = {
            "secteur": secteur,
            "m√©tiers_analys√©s": len(analyses_m√©tiers),
            "score_r√©sistance_moyen": sum(a.score_r√©sistance_ia for a in analyses_m√©tiers) / len(analyses_m√©tiers),
            "m√©tiers_stables": [a.m√©tier_titre for a in analyses_m√©tiers if a.score_r√©sistance_ia > 0.7],
            "m√©tiers_menac√©s": [a.m√©tier_titre for a in analyses_m√©tiers if a.score_r√©sistance_ia < 0.4],
            "nouvelles_opportunit√©s": await self._identifier_nouveaux_m√©tiers_ia(secteur),
            "timeline_transformation": self._calculer_timeline_sectorielle(analyses_m√©tiers)
        }
        
        return √©volution_secteur
    
    async def calculer_score_anxi√©t√©_ia(self, m√©tier_actuel: str) -> Dict[str, Any]:
        """
        Calcule un score d'anxi√©t√© IA pour le m√©tier actuel (feature freemium)
        """
        analyse = await self.√©valuer_r√©sistance_m√©tier(m√©tier_actuel)
        
        score_anxi√©t√© = 1 - analyse.score_r√©sistance_ia  # Inverse de la r√©sistance
        
        return {
            "m√©tier": m√©tier_actuel,
            "score_anxi√©t√©": score_anxi√©t√©,
            "niveau_anxi√©t√©": self._convertir_anxi√©t√©_en_niveau(score_anxi√©t√©),
            "message_court": self._g√©n√©rer_message_anxi√©t√©(score_anxi√©t√©, m√©tier_actuel),
            "recommandation_action": self._recommander_action_anxi√©t√©(score_anxi√©t√©)
        }
    
    # =============================================
    # M√âTHODES PRIV√âES - ALGORITHMES CORE
    # =============================================
    
    async def _d√©composer_m√©tier_en_t√¢ches(self, m√©tier: str) -> List[T√¢cheM√©tier]:
        """
        D√©compose un m√©tier en t√¢ches analysables
        """
        # Base de donn√©es m√©tier ‚Üí t√¢ches (√† enrichir avec donn√©es r√©elles)
        t√¢ches_base = self.m√©tiers_t√¢ches_db.get(m√©tier, [])
        
        # Enrichissement via API externe si disponible
        try:
            t√¢ches_externes = await self.research_provider.get_t√¢ches_d√©taill√©es(m√©tier)
            t√¢ches_base.extend(t√¢ches_externes)
        except:
            pass  # Fallback sur base locale
        
        return t√¢ches_base
    
    async def _analyser_t√¢ches_vs_ia(self, t√¢ches: List[T√¢cheM√©tier]) -> Dict[str, List[str]]:
        """
        Analyse chaque t√¢che face aux capacit√©s IA actuelles et futures
        """
        automatisables = []
        humaines_critiques = []
        
        for t√¢che in t√¢ches:
            # √âvaluer automatisabilit√© bas√©e sur plusieurs crit√®res
            score_auto = self._calculer_automatisabilit√©_t√¢che(t√¢che)
            
            if score_auto > 0.7:
                automatisables.append(f"{t√¢che.titre} (probabilit√©: {score_auto:.0%})")
            elif score_auto < 0.3:
                humaines_critiques.append(f"{t√¢che.titre} (valeur humaine: {1-score_auto:.0%})")
        
        return {
            "automatisables": automatisables,
            "humaines_critiques": humaines_critiques,
            "score_moyen_automatisation": sum(t.automatisabilit√©_score for t in t√¢ches) / len(t√¢ches) if t√¢ches else 0
        }
    
    def _calculer_automatisabilit√©_t√¢che(self, t√¢che: T√¢cheM√©tier) -> float:
        """
        Calcule la probabilit√© d'automatisation d'une t√¢che
        Bas√© sur recherche acad√©mique (Frey & Osborne am√©lior√©)
        """
        score = t√¢che.automatisabilit√©_score  # Score de base
        
        # Ajustements bas√©s sur caract√©ristiques humaines
        if t√¢che.empathie_requise:
            score *= 0.3  # Empathie tr√®s difficile √† automatiser
        
        if t√¢che.cr√©ativit√©_requise:
            score *= 0.5  # Cr√©ativit√© partiellement automatisable
        
        if t√¢che.interaction_humaine_requise:
            score *= 0.6  # Interaction humaine complexe
        
        # Ajustement par complexit√©
        facteur_complexit√© = 1 - (t√¢che.complexit√© - 1) * 0.15  # Plus c'est complexe, moins automatisable
        score *= facteur_complexit√©
        
        # Ajustement par capacit√©s IA actuelles
        for capacit√© in self.capacit√©s_ia:
            if self._t√¢che_utilise_capacit√©(t√¢che, capacit√©):
                facteur_maturit√© = capacit√©.maturit√©_actuelle / 5.0
                score *= (0.5 + facteur_maturit√© * 0.5)  # Impact bas√© sur maturit√©
        
        return max(0.0, min(1.0, score))
    
    def _calculer_score_r√©sistance(self, analyse_t√¢ches: Dict[str, Any]) -> float:
        """
        Calcule le score global de r√©sistance du m√©tier
        """
        score_automatisation_moyen = analyse_t√¢ches["score_moyen_automatisation"]
        
        # Score de r√©sistance = inverse de l'automatisabilit√©
        score_r√©sistance = 1 - score_automatisation_moyen
        
        # Ajustements contextuels
        # TODO: Int√©grer donn√©es march√©, demande sociale, etc.
        
        return max(0.0, min(1.0, score_r√©sistance))
    
    async def _pr√©dire_√©volution_temporelle(self, m√©tier: str, analyse_t√¢ches: Dict[str, Any]) -> Dict[str, Any]:
        """
        Pr√©dit l'√©volution temporelle du m√©tier
        """
        score_automatisation = analyse_t√¢ches["score_moyen_automatisation"]
        
        # D√©terminer type d'√©volution
        if score_automatisation < 0.3:
            type_√©volution = TypeEvolutionIA.STABLE
            timeline = "10+ ans"
            avantages = ["Valeur humaine pr√©serv√©e", "Demande croissante", "S√©curit√© d'emploi"]
        elif score_automatisation < 0.6:
            type_√©volution = TypeEvolutionIA.ENHANCED
            timeline = "5-10 ans"
            avantages = ["Productivit√© augment√©e", "T√¢ches r√©p√©titives √©limin√©es", "Focus sur valeur ajout√©e"]
        elif score_automatisation < 0.8:
            type_√©volution = TypeEvolutionIA.TRANSFORMED
            timeline = "3-5 ans"
            avantages = ["Nouveau r√¥le d'orchestrateur IA", "Comp√©tences hybrides valoris√©es", "Opportunit√©s innovation"]
        else:
            type_√©volution = TypeEvolutionIA.THREATENED
            timeline = "1-3 ans"
            avantages = ["Opportunit√© reconversion anticip√©e", "Comp√©tences transf√©rables", "Transition accompagn√©e"]
        
        return {
            "type": type_√©volution,
            "timeline": timeline,
            "avantages": avantages
        }
    
    async def _identifier_opportunit√©s_ia(self, m√©tier: str, t√¢ches: List[T√¢cheM√©tier]) -> List[str]:
        """
        Identifie comment l'IA peut am√©liorer le m√©tier
        """
        opportunit√©s = []
        
        # Analyse des t√¢ches r√©p√©titives
        t√¢ches_r√©p√©titives = [t for t in t√¢ches if t.fr√©quence == "quotidienne" and t.complexit√© <= 2]
        if t√¢ches_r√©p√©titives:
            opportunit√©s.append("Automatisation des t√¢ches r√©p√©titives pour focus sur strat√©gique")
        
        # Analyse des besoins de donn√©es
        if "analyse" in m√©tier.lower() or "data" in m√©tier.lower():
            opportunit√©s.append("IA augmente capacit√© d'analyse et d√©tection de patterns")
        
        # Analyse des interactions
        if any(t.interaction_humaine_requise for t in t√¢ches):
            opportunit√©s.append("IA assiste pr√©paration et suivi des interactions humaines")
        
        # Par d√©faut
        if not opportunit√©s:
            opportunit√©s = [
                "IA lib√®re du temps pour activit√©s √† haute valeur ajout√©e",
                "Outils IA am√©liorent qualit√© et rapidit√© d'ex√©cution"
            ]
        
        return opportunit√©s
    
    async def _recommander_comp√©tences_ia(self, m√©tier: str) -> List[str]:
        """
        Recommande les comp√©tences IA sp√©cifiques √† d√©velopper
        """
        # Mapping m√©tier ‚Üí comp√©tences IA (√† enrichir)
        comp√©tences_mapping = {
            "Data Analyst": ["Prompt engineering", "Python pour IA", "Interpr√©tation mod√®les ML"],
            "Coach": ["IA conversationnelle", "Analyse sentiment", "Personnalisation IA"],
            "Chef de Projet": ["Automatisation workflows", "IA pr√©dictive planning", "Gestion √©quipes IA"],
        }
        
        comp√©tences_sp√©cifiques = comp√©tences_mapping.get(m√©tier, [])
        
        # Comp√©tences g√©n√©riques importantes
        comp√©tences_g√©n√©riques = [
            "Ma√Ætrise outils IA courants (ChatGPT, Claude, etc.)",
            "Compr√©hension √©thique IA et biais algorithmiques",
            "Collaboration homme-machine"
        ]
        
        return comp√©tences_sp√©cifiques + comp√©tences_g√©n√©riques
    
    def _g√©n√©rer_message_futur_positif(self, m√©tier: str, score_r√©sistance: float, √©volution: Dict[str, Any]) -> str:
        """
        G√©n√®re un message rassurant sur l'avenir du m√©tier
        """
        if score_r√©sistance > 0.7:
            return f"Excellente nouvelle ! Le m√©tier de {m√©tier} conserve une forte valeur humaine. L'IA devient votre assistant, pas votre rempla√ßant. Votre expertise relationnelle et cr√©ative sera encore plus valoris√©e."
        
        elif score_r√©sistance > 0.5:
            return f"Le m√©tier de {m√©tier} √©volue positivement avec l'IA. En ma√Ætrisant les bons outils, vous deviendrez un professionnel augment√©, plus efficace et plus strat√©gique. Les t√¢ches r√©p√©titives disparaissent, la valeur ajout√©e augmente."
        
        elif score_r√©sistance > 0.3:
            return f"Le m√©tier de {m√©tier} se transforme significativement, cr√©ant de nouvelles opportunit√©s. En anticipant cette √©volution, vous pouvez devenir un expert de la collaboration homme-IA, un profil tr√®s recherch√©."
        
        else:
            return f"Le m√©tier de {m√©tier} √©volue vers de nouveaux horizons. C'est l'opportunit√© parfaite pour une reconversion anticip√©e vers des domaines en forte croissance. Votre exp√©rience reste un atout pr√©cieux pour votre transition."
    
    def _√©valuer_confiance_pr√©diction(self, m√©tier: str, analyse_t√¢ches: Dict[str, Any]) -> NiveauConfiance:
        """
        √âvalue le niveau de confiance de la pr√©diction
        """
        # Facteurs de confiance
        facteurs_confiance = []
        
        # Qualit√© des donn√©es
        if m√©tier in self.m√©tiers_t√¢ches_db:
            facteurs_confiance.append(0.3)  # Donn√©es d√©taill√©es disponibles
        
        # Consensus recherche
        try:
            sources = self._get_sources_utilis√©es(m√©tier)
            facteurs_confiance.append(min(0.4, len(sources) * 0.1))
        except:
            pass
        
        # Stabilit√© secteur
        facteurs_confiance.append(0.2)  # Base par d√©faut
        
        score_confiance = sum(facteurs_confiance)
        
        if score_confiance >= 0.9:
            return NiveauConfiance.TR√àS_√âLEV√â
        elif score_confiance >= 0.75:
            return NiveauConfiance.√âLEV√â
        elif score_confiance >= 0.6:
            return NiveauConfiance.MOYEN
        else:
            return NiveauConfiance.FAIBLE
    
    # =============================================
    # M√âTHODES UTILITAIRES
    # =============================================
    
    def _convertir_score_en_niveau(self, score: float) -> str:
        """Convertit score num√©rique en niveau texte"""
        if score > 0.8:
            return "tr√®s_faible"
        elif score > 0.6:
            return "faible"
        elif score > 0.4:
            return "mod√©r√©"
        elif score > 0.2:
            return "√©lev√©"
        else:
            return "critique"
    
    def _get_sources_utilis√©es(self, m√©tier: str) -> List[str]:
        """Sources utilis√©es pour l'analyse"""
        return [
            "OCDE Future of Work Report 2024",
            "Stanford AI Index 2024",
            "MIT Work of the Future Task Force",
            "Base de donn√©es Phoenix Aube"
        ]
    
    def _cr√©er_analyse_par_d√©faut(self, m√©tier: str) -> AnalyseR√©silienceIA:
        """Cr√©e une analyse par d√©faut en cas d'erreur"""
        return AnalyseR√©silienceIA(
            m√©tier_titre=m√©tier,
            score_r√©sistance_ia=0.5,  # Score neutre
            niveau_menace="mod√©r√©",
            type_√©volution=TypeEvolutionIA.ENHANCED,
            timeline_impact="5-10 ans",
            t√¢ches_automatisables=["Analyse en cours"],
            t√¢ches_humaines_critiques=["Expertise m√©tier", "Relations humaines"],
            opportunit√©s_ia_collaboration=["Am√©lioration productivit√©"],
            comp√©tences_ia_√†_d√©velopper=["Formation IA g√©n√©rale"],
            message_futur_positif=f"Le m√©tier de {m√©tier} √©volue avec l'IA. Une formation adapt√©e vous permettra de tirer parti de ces changements.",
            avantages_√©volution=["Productivit√© accrue"],
            niveau_confiance=NiveauConfiance.MOYEN,
            sources_analyse=["Analyse g√©n√©rique Phoenix Aube"]
        )
    
    # =============================================
    # BASES DE DONN√âES MOCK (√Ä ENRICHIR)
    # =============================================
    
    def _init_m√©tiers_t√¢ches_database(self) -> Dict[str, List[T√¢cheM√©tier]]:
        """Initialise base m√©tiers ‚Üí t√¢ches (mock √† enrichir)"""
        return {
            "Data Analyst": [
                T√¢cheM√©tier(
                    titre="Extraction de donn√©es",
                    description="Extraire donn√©es depuis bases",
                    fr√©quence="quotidienne",
                    complexit√©=2,
                    interaction_humaine_requise=False,
                    cr√©ativit√©_requise=False,
                    empathie_requise=False,
                    automatisabilit√©_score=0.8
                ),
                T√¢cheM√©tier(
                    titre="Interpr√©tation business des analyses",
                    description="Traduire insights pour business",
                    fr√©quence="hebdomadaire",
                    complexit√©=4,
                    interaction_humaine_requise=True,
                    cr√©ativit√©_requise=True,
                    empathie_requise=False,
                    automatisabilit√©_score=0.3
                )
            ],
            "Coach": [
                T√¢cheM√©tier(
                    titre="√âcoute active et empathie",
                    description="Comprendre besoins client",
                    fr√©quence="quotidienne",
                    complexit√©=4,
                    interaction_humaine_requise=True,
                    cr√©ativit√©_requise=True,
                    empathie_requise=True,
                    automatisabilit√©_score=0.1
                ),
                T√¢cheM√©tier(
                    titre="Suivi administratif",
                    description="Gestion planning et facturation",
                    fr√©quence="hebdomadaire",
                    complexit√©=2,
                    interaction_humaine_requise=False,
                    cr√©ativit√©_requise=False,
                    empathie_requise=False,
                    automatisabilit√©_score=0.9
                )
            ]
        }
    
    def _init_capacit√©s_ia_tracker(self) -> List[Capacit√©IA]:
        """Initialise tracker capacit√©s IA"""
        return [
            Capacit√©IA(
                nom="Traitement langage naturel",
                description="Compr√©hension et g√©n√©ration texte",
                maturit√©_actuelle=4,
                progression_estim√©e=6,
                impact_potentiel=0.7
            ),
            Capacit√©IA(
                nom="Vision par ordinateur",
                description="Analyse images et vid√©os",
                maturit√©_actuelle=4,
                progression_estim√©e=12,
                impact_potentiel=0.6
            ),
            Capacit√©IA(
                nom="IA √©motionnelle",
                description="Reconnaissance √©motions",
                maturit√©_actuelle=2,
                progression_estim√©e=36,
                impact_potentiel=0.4
            )
        ]
    
    def _init_mod√®le_pr√©dictif(self) -> Dict[str, float]:
        """Coefficients du mod√®le pr√©dictif (√† calibrer avec 3IA)"""
        return {
            "empathie_protection": 0.8,
            "cr√©ativit√©_protection": 0.6,
            "complexit√©_protection": 0.4,
            "interaction_protection": 0.7,
            "vitesse_progression_ia": 1.2
        }
    
    def _t√¢che_utilise_capacit√©(self, t√¢che: T√¢cheM√©tier, capacit√©: Capacit√©IA) -> bool:
        """D√©termine si une t√¢che utilise une capacit√© IA"""
        # Logique simple (√† affiner)
        if "nlp" in t√¢che.description.lower() and "langage" in capacit√©.nom:
            return True
        return False
    
    def _convertir_anxi√©t√©_en_niveau(self, score: float) -> str:
        """Convertit score d'anxi√©t√© en niveau"""
        if score < 0.2:
            return "tr√®s_faible"
        elif score < 0.4:
            return "faible"
        elif score < 0.6:
            return "mod√©r√©"
        elif score < 0.8:
            return "√©lev√©"
        else:
            return "critique"
    
    def _g√©n√©rer_message_anxi√©t√©(self, score: float, m√©tier: str) -> str:
        """G√©n√®re message court sur l'anxi√©t√© IA"""
        if score < 0.3:
            return f"Votre m√©tier {m√©tier} est tr√®s r√©sistant √† l'IA ! üòå"
        elif score < 0.6:
            return f"Votre m√©tier {m√©tier} √©volue avec l'IA. Opportunit√© d'am√©lioration ! üöÄ"
        else:
            return f"Votre m√©tier {m√©tier} se transforme. Anticipez pour rester comp√©titif ! ‚ö°"
    
    def _recommander_action_anxi√©t√©(self, score: float) -> str:
        """Recommande une action bas√©e sur le score d'anxi√©t√©"""
        if score < 0.3:
            return "Continuez √† d√©velopper vos comp√©tences humaines uniques"
        elif score < 0.6:
            return "Explorez comment l'IA peut augmenter votre productivit√©"
        else:
            return "Consid√©rez une formation ou reconversion vers des domaines IA-r√©sistants"
    
    async def _identifier_nouveaux_m√©tiers_ia(self, secteur: str) -> List[str]:
        """Identifie nouveaux m√©tiers cr√©√©s par l'IA dans un secteur"""
        return [
            "AI Trainer sp√©cialis√© secteur",
            "Coordinateur Homme-IA",
            "√âthicien IA sectoriel"
        ]
    
    def _calculer_timeline_sectorielle(self, analyses: List[AnalyseR√©silienceIA]) -> str:
        """Calcule timeline transformation sectorielle"""
        scores = [a.score_r√©sistance_ia for a in analyses]
        score_moyen = sum(scores) / len(scores) if scores else 0.5
        
        if score_moyen > 0.7:
            return "Transformation graduelle sur 10+ ans"
        elif score_moyen > 0.5:
            return "√âvolution significative dans 5-10 ans"
        else:
            return "Transformation rapide dans 3-5 ans"