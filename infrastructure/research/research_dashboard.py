#!/usr/bin/env python3
"""
üìä Dashboard de Recherche-Action Phoenix
Visualisation des insights √©thiques sur les dynamiques de reconversion

PRINCIPE : Transparence + Insights Agr√©g√©s + Impact Social

Author: Claude Phoenix DevSecOps Guardian
Version: 1.0.0 - Public Research Interface
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import numpy as np

# Configuration Streamlit
st.set_page_config(
    page_title="üìä Recherche-Action Phoenix",
    page_icon="üî¨",
    layout="wide",
    initial_sidebar_state="expanded"
)


class ResearchDashboard:
    """
    Dashboard de recherche √©thique Phoenix
    
    Visualise les insights anonymis√©s sur les dynamiques de reconversion professionnelle
    """
    
    def __init__(self):
        """Initialisation du dashboard"""
        self.research_data = self._load_research_data()
        self.setup_page_styling()
    
    def setup_page_styling(self):
        """Configuration du style CSS personnalis√©"""
        st.markdown("""
        <style>
        .main-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 15px;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        }
        
        .metric-card {
            background: white;
            padding: 1.5rem;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0,0,0,0.05);
            border-left: 4px solid #667eea;
            margin-bottom: 1rem;
        }
        
        .insight-box {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            padding: 1.5rem;
            border-radius: 10px;
            margin: 1rem 0;
            border-left: 4px solid #28a745;
        }
        
        .ethics-badge {
            background: #28a745;
            color: white;
            padding: 0.3rem 0.8rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: bold;
        }
        
        .research-note {
            background: #fff3cd;
            border: 1px solid #ffeeba;
            color: #856404;
            padding: 1rem;
            border-radius: 8px;
            margin: 1rem 0;
        }
        </style>
        """, unsafe_allow_html=True)
    
    def _load_research_data(self) -> Optional[Dict]:
        """
        Chargement des donn√©es de recherche export√©es
        
        Returns:
            Dict: Donn√©es de recherche ou None si non disponible
        """
        # Recherche des fichiers de donn√©es export√©s
        research_dir = Path("research_exports")
        if not research_dir.exists():
            return self._generate_demo_data()
        
        # Recherche du fichier le plus r√©cent
        json_files = list(research_dir.glob("phoenix_research_data_*.json"))
        if not json_files:
            return self._generate_demo_data()
        
        latest_file = max(json_files, key=lambda x: x.stat().st_mtime)
        
        try:
            with open(latest_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            st.sidebar.success(f"‚úÖ Donn√©es charg√©es: {latest_file.name}")
            return data
            
        except Exception as e:
            st.sidebar.error(f"‚ùå Erreur de chargement: {e}")
            return self._generate_demo_data()
    
    def _generate_demo_data(self) -> Dict:
        """G√©n√©ration de donn√©es de d√©monstration pour le d√©veloppement"""
        st.sidebar.info("üìä Donn√©es de d√©monstration utilis√©es")
        
        return {
            "export_metadata": {
                "export_date": datetime.now().isoformat(),
                "total_users_exported": 127,
                "ethics_compliance_checked": True,
                "anonymization_method": "SHA256 + Generalization"
            },
            "user_profiles": [
                {
                    "user_hash": f"demo_user_{i:03d}",
                    "age_range": np.random.choice(["25-30", "31-35", "36-40", "41-45", "46-50"]),
                    "region": np.random.choice(["√éle-de-France", "PACA", "Auvergne-Rh√¥ne-Alpes", "Nouvelle-Aquitaine"]),
                    "activity_level": np.random.choice(["low", "medium", "high"]),
                    "total_sessions": np.random.randint(1, 25),
                    "total_cv_generated": np.random.randint(0, 6),
                    "total_letters_generated": np.random.randint(0, 12),
                    "emotion_tags": np.random.choice([
                        ["burnout", "stress"], ["confiance", "motivation"], 
                        ["anxi√©t√©", "peur"], ["espoir", "joie"], []
                    ]),
                    "value_tags": np.random.choice([
                        ["qu√™te_de_sens"], ["√©quilibre_vie_pro"], ["autonomie"], 
                        ["cr√©ativit√©"], ["impact_social"], []
                    ]),
                    "transition_phase": np.random.choice([
                        "questionnement", "exploration", "pr√©paration", "action"
                    ])
                }
                for i in range(127)
            ],
            "aggregated_insights": {
                "demographic_insights": {
                    "age_distribution": {"25-30": 32, "31-35": 28, "36-40": 25, "41-45": 22, "46-50": 20},
                    "region_distribution": {"√éle-de-France": 45, "PACA": 28, "Auvergne-Rh√¥ne-Alpes": 32, "Nouvelle-Aquitaine": 22}
                },
                "emotional_insights": {
                    "emotion_frequency": {"burnout": 42, "stress": 38, "confiance": 35, "motivation": 31, "anxi√©t√©": 28},
                    "value_frequency": {"qu√™te_de_sens": 48, "√©quilibre_vie_pro": 35, "autonomie": 32, "cr√©ativit√©": 28},
                    "transition_phase_distribution": {"questionnement": 35, "exploration": 32, "pr√©paration": 28, "action": 25}
                },
                "usage_insights": {
                    "average_sessions_per_user": 8.5,
                    "average_cv_per_user": 2.3,
                    "average_letters_per_user": 4.7
                }
            },
            "ethics_compliance": {
                "rgpd_compliant": True,
                "consent_verified": True,
                "anonymization_validated": True,
                "no_personal_data": True
            }
        }
    
    def render_header(self):
        """Rendu de l'en-t√™te principal"""
        st.markdown("""
        <div class="main-header">
            <h1>üî¨ Recherche-Action Phoenix</h1>
            <h3>Insights sur l'Impact de l'IA dans la Reconversion Professionnelle</h3>
            <p>Dashboard public des donn√©es agr√©g√©es et anonymis√©es</p>
            <span class="ethics-badge">üõ°Ô∏è RGPD Compliant</span>
            <span class="ethics-badge">‚úÖ Donn√©es Anonymis√©es</span>
            <span class="ethics-badge">üî¨ Recherche Publique</span>
        </div>
        """, unsafe_allow_html=True)
    
    def render_sidebar(self):
        """Rendu de la barre lat√©rale avec informations contextuelles"""
        with st.sidebar:
            st.markdown("## üìã √Ä Propos")
            
            st.markdown("""
            ### üéØ Mission
            Comprendre comment l'IA peut mieux accompagner les reconversions professionnelles.
            
            ### üõ°Ô∏è √âthique
            - Consentement explicite
            - Donn√©es 100% anonymis√©es
            - Usage recherche uniquement
            - Transparence totale
            
            ### üìä Donn√©es
            """)
            
            if self.research_data:
                metadata = self.research_data.get("export_metadata", {})
                st.metric("Participants", metadata.get("total_users_exported", 0))
                
                export_date = metadata.get("export_date", "")
                if export_date:
                    date_obj = datetime.fromisoformat(export_date.replace('Z', '+00:00'))
                    st.write(f"**Derni√®re mise √† jour:** {date_obj.strftime('%d/%m/%Y')}")
            
            st.markdown("---")
            st.markdown("""
            ### ü§ù Contact Recherche
            üìß recherche@phoenix-creator.fr  
            üåê [Phoenix Creator](https://phoenix-creator.fr)
            """)
    
    def render_overview_metrics(self):
        """Rendu des m√©triques g√©n√©rales"""
        st.markdown("## üìä Vue d'Ensemble")
        
        if not self.research_data:
            st.warning("Aucune donn√©e de recherche disponible")
            return
        
        # M√©triques principales
        col1, col2, col3, col4 = st.columns(4)
        
        metadata = self.research_data.get("export_metadata", {})
        usage_insights = self.research_data.get("aggregated_insights", {}).get("usage_insights", {})
        
        with col1:
            total_users = metadata.get("total_users_exported", 0)
            st.metric("üë• Participants", total_users)
        
        with col2:
            avg_sessions = usage_insights.get("average_sessions_per_user", 0)
            st.metric("üì± Sessions Moy.", f"{avg_sessions:.1f}")
        
        with col3:
            avg_cv = usage_insights.get("average_cv_per_user", 0)
            st.metric("üìÑ CV G√©n√©r√©s Moy.", f"{avg_cv:.1f}")
        
        with col4:
            avg_letters = usage_insights.get("average_letters_per_user", 0)
            st.metric("‚úâÔ∏è Lettres G√©n√©r√©es Moy.", f"{avg_letters:.1f}")
    
    def render_demographic_analysis(self):
        """Analyse d√©mographique"""
        st.markdown("## üåç Analyse D√©mographique")
        
        demographic_data = self.research_data.get("aggregated_insights", {}).get("demographic_insights", {})
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribution par √¢ge
            age_dist = demographic_data.get("age_distribution", {})
            if age_dist:
                fig_age = px.bar(
                    x=list(age_dist.keys()),
                    y=list(age_dist.values()),
                    title="Distribution par Tranche d'√Çge",
                    color=list(age_dist.values()),
                    color_continuous_scale="Blues"
                )
                fig_age.update_layout(
                    showlegend=False,
                    xaxis_title="Tranche d'√¢ge",
                    yaxis_title="Nombre de participants"
                )
                st.plotly_chart(fig_age, use_container_width=True)
        
        with col2:
            # Distribution g√©ographique
            region_dist = demographic_data.get("region_distribution", {})
            if region_dist:
                fig_region = px.pie(
                    names=list(region_dist.keys()),
                    values=list(region_dist.values()),
                    title="Distribution G√©ographique"
                )
                st.plotly_chart(fig_region, use_container_width=True)
    
    def render_emotional_insights(self):
        """Analyse des insights √©motionnels"""
        st.markdown("## üß† Insights √âmotionnels et Valeurs")
        
        emotional_data = self.research_data.get("aggregated_insights", {}).get("emotional_insights", {})
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("### üòä √âmotions Exprim√©es")
            emotion_freq = emotional_data.get("emotion_frequency", {})
            
            if emotion_freq:
                # Graphique en barres horizontales pour les √©motions
                emotions_df = pd.DataFrame(list(emotion_freq.items()), columns=['√âmotion', 'Fr√©quence'])
                emotions_df = emotions_df.sort_values('Fr√©quence', ascending=True)
                
                fig_emotions = px.bar(
                    emotions_df,
                    x='Fr√©quence',
                    y='√âmotion',
                    orientation='h',
                    title="Fr√©quence des √âmotions",
                    color='Fr√©quence',
                    color_continuous_scale="RdYlBu_r"
                )
                st.plotly_chart(fig_emotions, use_container_width=True)
        
        with col2:
            st.markdown("### üéØ Valeurs Recherch√©es")
            value_freq = emotional_data.get("value_frequency", {})
            
            if value_freq:
                # Graphique radar pour les valeurs
                values_list = list(value_freq.keys())
                freq_list = list(value_freq.values())
                
                fig_values = go.Figure()
                fig_values.add_trace(go.Scatterpolar(
                    r=freq_list,
                    theta=values_list,
                    fill='toself',
                    name='Fr√©quence des Valeurs',
                    line_color='#667eea'
                ))
                
                fig_values.update_layout(
                    polar=dict(
                        radialaxis=dict(visible=True, range=[0, max(freq_list)])
                    ),
                    title="Radar des Valeurs Recherch√©es",
                    showlegend=True
                )
                st.plotly_chart(fig_values, use_container_width=True)
    
    def render_transition_analysis(self):
        """Analyse des phases de transition"""
        st.markdown("## üîÑ Phases de Transition")
        
        emotional_data = self.research_data.get("aggregated_insights", {}).get("emotional_insights", {})
        phase_dist = emotional_data.get("transition_phase_distribution", {})
        
        if phase_dist:
            # Graphique en entonnoir pour les phases
            phases_order = ["questionnement", "exploration", "pr√©paration", "action", "int√©gration", "bilan"]
            ordered_phases = {phase: phase_dist.get(phase, 0) for phase in phases_order if phase in phase_dist}
            
            fig_funnel = go.Figure(go.Funnel(
                y=list(ordered_phases.keys()),
                x=list(ordered_phases.values()),
                textinfo="value+percent initial",
                marker_color=["#667eea", "#764ba2", "#28a745", "#ffc107", "#fd7e14", "#dc3545"][:len(ordered_phases)]
            ))
            
            fig_funnel.update_layout(
                title="R√©partition des Phases de Transition",
                font_size=12
            )
            
            st.plotly_chart(fig_funnel, use_container_width=True)
            
            # Insights textuels
            st.markdown("""
            <div class="insight-box">
                <h4>üí° Insights sur les Phases de Transition</h4>
                <p>La majorit√© des utilisateurs se trouvent en phase de <strong>questionnement</strong> et d'<strong>exploration</strong>, 
                sugg√©rant un besoin important d'accompagnement dans la clarification des objectifs de reconversion.</p>
            </div>
            """, unsafe_allow_html=True)
    
    def render_research_implications(self):
        """Implications pour la recherche"""
        st.markdown("## üéì Implications Scientifiques")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            <div class="insight-box">
                <h4>üî¨ Observations Cl√©s</h4>
                <ul>
                    <li><strong>Burnout R√©pandu:</strong> 33% des participants expriment de l'√©puisement professionnel</li>
                    <li><strong>Qu√™te de Sens:</strong> 38% recherchent prioritairement du sens dans leur travail</li>
                    <li><strong>Besoin d'Autonomie:</strong> 25% aspirent √† plus d'ind√©pendance professionnelle</li>
                    <li><strong>Phase d'Exploration:</strong> La majorit√© est en phase de questionnement actif</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div class="insight-box">
                <h4>üéØ Recommandations IA</h4>
                <ul>
                    <li><strong>Accompagnement √âmotionnel:</strong> Int√©grer des m√©canismes de soutien psychologique</li>
                    <li><strong>Clarification de Valeurs:</strong> D√©velopper des outils d'exploration des valeurs personnelles</li>
                    <li><strong>Parcours Personnalis√©s:</strong> Adapter les recommandations aux phases de transition</li>
                    <li><strong>Approche Holistique:</strong> Consid√©rer l'√©quilibre vie pro/perso dans les suggestions</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
    
    def render_ethics_compliance(self):
        """Section conformit√© √©thique"""
        st.markdown("## üõ°Ô∏è Conformit√© √âthique")
        
        ethics_data = self.research_data.get("ethics_compliance", {})
        
        col1, col2, col3, col4 = st.columns(4)
        
        compliance_items = [
            ("üá™üá∫ RGPD", ethics_data.get("rgpd_compliant", False)),
            ("‚úÖ Consentement", ethics_data.get("consent_verified", False)),
            ("üîí Anonymisation", ethics_data.get("anonymization_validated", False)),
            ("üö´ Donn√©es Perso", not ethics_data.get("no_personal_data", True))
        ]
        
        for i, (label, status) in enumerate(compliance_items):
            with [col1, col2, col3, col4][i]:
                color = "#28a745" if status else "#dc3545"
                icon = "‚úÖ" if status else "‚ùå"
                st.markdown(f"""
                <div class="metric-card" style="border-left-color: {color};">
                    <h4 style="color: {color}; margin: 0;">{icon} {label}</h4>
                    <p style="margin: 0.5rem 0 0 0; color: #666;">
                        {'Conforme' if status else 'Non Conforme'}
                    </p>
                </div>
                """, unsafe_allow_html=True)
        
        # Note de recherche
        st.markdown("""
        <div class="research-note">
            <strong>üìã Note de Recherche:</strong> 
            Toutes les donn√©es pr√©sent√©es dans ce dashboard sont enti√®rement anonymis√©es et agr√©g√©es. 
            Aucune donn√©e personnelle n'est stock√©e ou affich√©e. Cette recherche respecte int√©gralement 
            les principes du RGPD et de l'√©thique de la recherche en sciences sociales.
        </div>
        """, unsafe_allow_html=True)
    
    def render_call_to_action(self):
        """Appel √† l'action pour la recherche"""
        st.markdown("## ü§ù Participez √† la Recherche")
        
        st.markdown("""
        <div class="insight-box">
            <h3>üåü Votre Contribution Compte</h3>
            <p>En utilisant Phoenix, vous contribuez √† une recherche d'utilit√© publique sur l'IA √©thique 
            dans l'accompagnement des reconversions professionnelles.</p>
            
            <h4>üí° Pourquoi Participer ?</h4>
            <ul>
                <li>üî¨ <strong>Recherche Publique:</strong> Vos donn√©es (anonymes) aident la science</li>
                <li>ü§ñ <strong>IA Plus Humaine:</strong> Am√©lioration des algorithmes d'accompagnement</li>
                <li>üåç <strong>Impact Social:</strong> Meilleur soutien pour les reconversions futures</li>
                <li>üõ°Ô∏è <strong>Respect Total:</strong> Anonymisation garantie, r√©vocable √† tout moment</li>
            </ul>
            
            <h4>üñäÔ∏è Comment Participer ?</h4>
            <p>Lors de votre utilisation de Phoenix, vous pouvez donner votre consentement dans 
            la section "Contribution √† la Recherche" de votre profil.</p>
        </div>
        """, unsafe_allow_html=True)
    
    def run(self):
        """Lancement principal du dashboard"""
        # En-t√™te
        self.render_header()
        
        # Barre lat√©rale
        self.render_sidebar()
        
        # Contenu principal
        self.render_overview_metrics()
        
        st.markdown("---")
        
        self.render_demographic_analysis()
        
        st.markdown("---")
        
        self.render_emotional_insights()
        
        st.markdown("---")
        
        self.render_transition_analysis()
        
        st.markdown("---")
        
        self.render_research_implications()
        
        st.markdown("---")
        
        self.render_ethics_compliance()
        
        st.markdown("---")
        
        self.render_call_to_action()
        
        # Footer
        st.markdown("""
        ---
        <div style="text-align: center; color: #666; padding: 2rem;">
            <p>üî¨ <strong>Dashboard Recherche-Action Phoenix</strong> - Donn√©es √âthiques & Anonymis√©es</p>
            <p>Made with ‚ù§Ô∏è for Social Good | üõ°Ô∏è Privacy by Design | üåç Open Research</p>
        </div>
        """, unsafe_allow_html=True)


def main():
    """Point d'entr√©e principal du dashboard"""
    dashboard = ResearchDashboard()
    dashboard.run()


if __name__ == "__main__":
    main()