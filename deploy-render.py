#!/usr/bin/env python3
"""
üöÄ PHOENIX ECOSYSTEM - Script de d√©ploiement Render
D√©ploie tous les services via l'API REST de Render
"""

import requests
import json
import os
import sys
import time
from typing import Dict, List, Optional

class RenderDeployment:
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.render.com/v1"
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        
    def get_user_info(self) -> Dict:
        """R√©cup√®re les informations utilisateur"""
        response = requests.get(f"{self.base_url}/users/me", headers=self.headers)
        if response.status_code == 200:
            return response.json()
        else:
            raise Exception(f"Erreur authentification: {response.status_code} - {response.text}")
    
    def list_services(self) -> List[Dict]:
        """Liste tous les services existants"""
        response = requests.get(f"{self.base_url}/services", headers=self.headers)
        if response.status_code == 200:
            return response.json()
        return []
    
    def create_service(self, service_config: Dict) -> Dict:
        """Cr√©e un service sur Render"""
        print(f"üöÄ Cr√©ation du service: {service_config['name']}")
        
        response = requests.post(
            f"{self.base_url}/services",
            headers=self.headers,
            json=service_config
        )
        
        if response.status_code == 201:
            service = response.json()
            print(f"‚úÖ Service cr√©√©: {service['name']} (ID: {service['id']})")
            return service
        else:
            print(f"‚ùå Erreur cr√©ation {service_config['name']}: {response.status_code}")
            print(f"   D√©tails: {response.text}")
            return {}
    
    def get_github_repo_info(self) -> Dict:
        """Configure le repo GitHub pour le d√©ploiement"""
        return {
            "type": "github",
            "repo": "https://github.com/mattvaness/phoenix-eco-monorepo",  # Remplacez par votre repo
            "branch": "main"
        }

def create_phoenix_services() -> List[Dict]:
    """G√©n√®re la configuration des services Phoenix"""
    
    # Configuration de base du repo
    repo_config = {
        "type": "github",
        "repo": "https://github.com/mattvaness/phoenix-eco-monorepo",  # √Ä adapter
        "branch": "main"
    }
    
    services = []
    
    # 1. Phoenix Letters - Streamlit App
    services.append({
        "name": "phoenix-letters",
        "type": "web_service",
        "repo": repo_config,
        "env": "docker",
        "dockerfilePath": "./Dockerfile",
        "dockerBuildArgs": ["APP_NAME=phoenix-letters"],
        "region": "oregon",
        "plan": "starter",
        "healthCheckPath": "/_stcore/health",
        "envVars": [
            {"key": "GOOGLE_API_KEY", "value": ""},
            {"key": "SUPABASE_URL", "value": ""},
            {"key": "SUPABASE_ANON_KEY", "value": ""},
            {"key": "STRIPE_SECRET_KEY", "value": ""},
            {"key": "JWT_SECRET_KEY", "value": ""}
        ]
    })
    
    # 2. Phoenix CV - Streamlit App
    services.append({
        "name": "phoenix-cv",
        "type": "web_service",
        "repo": repo_config,
        "env": "docker",
        "dockerfilePath": "./Dockerfile",
        "dockerBuildArgs": ["APP_NAME=phoenix-cv"],
        "region": "oregon", 
        "plan": "starter",
        "healthCheckPath": "/_stcore/health",
        "envVars": [
            {"key": "GOOGLE_API_KEY", "value": ""},
            {"key": "SUPABASE_URL", "value": ""},
            {"key": "SUPABASE_ANON_KEY", "value": ""}
        ]
    })
    
    # 3. Phoenix Backend Unified - FastAPI
    services.append({
        "name": "phoenix-backend-unified",
        "type": "web_service",
        "repo": repo_config,
        "env": "docker",
        "dockerfilePath": "./Dockerfile",
        "dockerBuildArgs": ["APP_NAME=phoenix-backend-unified"],
        "region": "oregon",
        "plan": "starter", 
        "healthCheckPath": "/health",
        "envVars": [
            {"key": "SUPABASE_URL", "value": ""},
            {"key": "SUPABASE_SERVICE_ROLE_KEY", "value": ""},
            {"key": "JWT_SECRET_KEY", "value": ""},
            {"key": "ALLOWED_ORIGINS", "value": "https://phoenix-aube.vercel.app,https://phoenix-rise.vercel.app"},
            {"key": "ENVIRONMENT", "value": "production"}
        ]
    })
    
    return services

def main():
    """Script principal de d√©ploiement"""
    print("üèõÔ∏è PHOENIX ECOSYSTEM - D√©ploiement Render")
    print("=" * 50)
    
    # R√©cup√©ration de la cl√© API
    api_key = os.environ.get("RENDER_API_KEY")
    if not api_key:
        print("‚ùå RENDER_API_KEY manquante dans les variables d'environnement")
        print("üí° Obtenez votre cl√© API sur: https://dashboard.render.com/account")
        sys.exit(1)
    
    try:
        # Initialisation du client
        deployer = RenderDeployment(api_key)
        
        # V√©rification authentification
        user_info = deployer.get_user_info()
        print(f"‚úÖ Connect√© en tant que: {user_info.get('email', 'N/A')}")
        
        # Liste des services existants
        existing_services = deployer.list_services()
        existing_names = [s.get('name') for s in existing_services]
        print(f"üìã Services existants: {len(existing_services)}")
        
        # Configuration des services Phoenix
        phoenix_services = create_phoenix_services()
        
        # D√©ploiement
        deployed_services = []
        for service_config in phoenix_services:
            if service_config['name'] in existing_names:
                print(f"‚ö†Ô∏è Service {service_config['name']} existe d√©j√†, ignor√©")
            else:
                deployed = deployer.create_service(service_config)
                if deployed:
                    deployed_services.append(deployed)
                time.sleep(2)  # √âviter le rate limiting
        
        # R√©sum√©
        print("\n" + "=" * 50)
        print(f"üéâ D√©ploiement termin√©: {len(deployed_services)} services cr√©√©s")
        
        for service in deployed_services:
            print(f"   ‚Ä¢ {service.get('name')}: {service.get('serviceDetails', {}).get('url', 'En cours...')}")
        
        print("\nüí° Configurez vos variables d'environnement sur:")
        print("   https://dashboard.render.com")
        
    except Exception as e:
        print(f"‚ùå Erreur d√©ploiement: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()