"""
üöÄ PHOENIX CV - G√©n√©rateur IA de CV pour Reconversions Professionnelles
Version Marketing Simplifi√©e - Pr√™t pour d√©mo
"""

import streamlit as st
import os
import google.generativeai as genai
from datetime import datetime
import json
import tempfile
import PyPDF2
import docx
from io import BytesIO

def configure_page():
    """Configuration de la page Streamlit"""
    st.set_page_config(
        page_title="Phoenix CV - G√©n√©rateur IA de CV",
        page_icon="üöÄ",
        layout="wide",
        initial_sidebar_state="expanded"
    )

def setup_gemini():
    """Configuration s√©curis√©e de Gemini AI"""
    api_key = os.environ.get('GEMINI_API_KEY') or st.secrets.get('GEMINI_API_KEY')
    
    if not api_key:
        st.error("üö´ Cl√© API Gemini manquante")
        st.info("Veuillez configurer GEMINI_API_KEY dans les variables d'environnement")
        st.stop()
    
    genai.configure(api_key=api_key)
    return genai.GenerativeModel('gemini-1.5-flash')

def extract_text_from_pdf(uploaded_file):
    """Extraction de texte depuis un PDF"""
    try:
        pdf_reader = PyPDF2.PdfReader(BytesIO(uploaded_file.read()))
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        return text
    except Exception as e:
        st.error(f"Erreur lors de la lecture du PDF: {str(e)}")
        return None

def extract_text_from_docx(uploaded_file):
    """Extraction de texte depuis un DOCX"""
    try:
        doc = docx.Document(BytesIO(uploaded_file.read()))
        text = ""
        for paragraph in doc.paragraphs:
            text += paragraph.text + "\\n"
        return text
    except Exception as e:
        st.error(f"Erreur lors de la lecture du DOCX: {str(e)}")
        return None

def generate_cv_content(model, profile_data, target_job=""):
    """G√©n√®re le contenu du CV avec Gemini AI"""
    
    prompt = f"""
    Tu es un expert en reconversion professionnelle et r√©daction de CV.
    
    Cr√©e un CV professionnel et moderne pour une reconversion professionnelle bas√© sur ces informations :
    
    PROFIL :
    {profile_data}
    
    POSTE VIS√â : {target_job if target_job else "Poste en reconversion professionnelle"}
    
    INSTRUCTIONS :
    - Mets l'accent sur les comp√©tences transf√©rables
    - Valorise l'exp√©rience m√™me si elle vient d'un autre secteur
    - Utilise un ton professionnel et confiant
    - Structure : Profil professionnel, Comp√©tences cl√©s, Exp√©rience, Formation, Atouts
    - Maximum 2 pages √©quivalent
    
    R√©ponds uniquement avec le contenu du CV format√© en markdown.
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Erreur lors de la g√©n√©ration du CV: {str(e)}")
        return None

def analyze_cv_for_job(model, cv_content, job_description):
    """Analyse la correspondance CV/Offre d'emploi"""
    
    prompt = f"""
    Tu es un expert ATS (Applicant Tracking System) et recruteur.
    
    Analyse la correspondance entre ce CV et cette offre d'emploi :
    
    CV :
    {cv_content}
    
    OFFRE D'EMPLOI :
    {job_description}
    
    Fournis une analyse structur√©e avec :
    1. Score de correspondance (0-100%)
    2. Points forts (3-5 √©l√©ments)
    3. Points d'am√©lioration (3-5 √©l√©ments)
    4. Mots-cl√©s manquants importants
    5. Recommandations d'optimisation
    
    Sois constructif et pr√©cis.
    """
    
    try:
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        st.error(f"Erreur lors de l'analyse: {str(e)}")
        return None

def render_header():
    """Rendu du header de l'application"""
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1>üöÄ Phoenix CV</h1>
        <h3>G√©n√©rateur IA de CV pour Reconversions Professionnelles</h3>
        <p style="color: #666;">R√©volutionnez votre reconversion avec l'IA</p>
    </div>
    """, unsafe_allow_html=True)

def render_sidebar():
    """Rendu de la sidebar de navigation"""
    st.sidebar.markdown("## üéØ Navigation")
    
    pages = {
        "üè† Accueil": "home",
        "‚ú® Cr√©er un CV": "create",
        "üìÑ Analyser un CV": "analyze",
        "üé® Templates": "templates",
        "üí∞ Tarifs": "pricing"
    }
    
    selected_page = st.sidebar.radio("", list(pages.keys()))
    return pages[selected_page]

def render_home_page():
    """Page d'accueil"""
    st.markdown("""
    ## üåü Pourquoi choisir Phoenix CV ?
    
    ### üéØ Sp√©cialis√© Reconversions
    - Premier g√©n√©rateur IA d√©di√© aux reconversions professionnelles
    - Valorise vos comp√©tences transf√©rables
    - Adapte votre profil au nouveau secteur vis√©
    
    ### ü§ñ Intelligence Artificielle Avanc√©e
    - Propuls√© par Google Gemini 1.5 Flash
    - Analyse s√©mantique des offres d'emploi
    - Optimisation ATS automatique
    
    ### üõ°Ô∏è S√©curit√© & Confidentialit√©
    - Traitement s√©curis√© de vos donn√©es
    - Conformit√© RGPD
    - Aucune sauvegarde de vos informations personnelles
    """)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        ### üìà Statistiques
        - **+85%** de r√©ponses positives
        - **15 min** de cr√©ation moyenne
        - **100%** optimis√© ATS
        """)
    
    with col2:
        st.markdown("""
        ### üé® Fonctionnalit√©s
        - G√©n√©ration IA personnalis√©e
        - Templates professionnels
        - Analyse de correspondance
        """)
    
    with col3:
        st.markdown("""
        ### üöÄ Avantages
        - Gain de temps consid√©rable
        - CV professionnel garanti
        - Support reconversion
        """)

def render_create_cv_page(model):
    """Page de cr√©ation de CV"""
    st.markdown("## ‚ú® Cr√©er votre CV de Reconversion")
    
    with st.form("cv_form"):
        st.markdown("### üë§ Informations Personnelles")
        col1, col2 = st.columns(2)
        
        with col1:
            prenom = st.text_input("Pr√©nom *")
            nom = st.text_input("Nom *")
            email = st.text_input("Email *")
            
        with col2:
            telephone = st.text_input("T√©l√©phone")
            ville = st.text_input("Ville")
            linkedin = st.text_input("LinkedIn (optionnel)")
        
        st.markdown("### üéØ Objectif Professionnel")
        secteur_origine = st.text_input("Secteur d'origine", placeholder="Ex: Commerce, Enseignement, Industrie...")
        secteur_cible = st.text_input("Secteur vis√© *", placeholder="Ex: D√©veloppement web, Marketing digital...")
        poste_vise = st.text_input("Poste recherch√© *", placeholder="Ex: D√©veloppeur Front-end, Chef de projet...")
        
        st.markdown("### üíº Exp√©rience Professionnelle")
        experiences = st.text_area(
            "D√©crivez vos exp√©riences principales (3-5 derni√®res)",
            height=150,
            placeholder="Ex: Manager √©quipe 15 personnes chez ABC Corp (2020-2024)\\n- Gestion budget 500K‚Ç¨\\n- Am√©lioration productivit√© +25%..."
        )
        
        st.markdown("### üéì Formation")
        formations = st.text_area(
            "Formation et certifications",
            height=100,
            placeholder="Ex: Master Marketing - Universit√© Paris (2018)\\nCertification Google Analytics (2023)..."
        )
        
        st.markdown("### ‚ö° Comp√©tences")
        competences = st.text_area(
            "Comp√©tences techniques et soft skills",
            height=100,
            placeholder="Ex: Management d'√©quipe, Gestion de projet, Excel avanc√©, Anglais courant..."
        )
        
        submitted = st.form_submit_button("üöÄ G√©n√©rer mon CV", type="primary")
        
        if submitted:
            if not prenom or not nom or not email or not secteur_cible or not poste_vise:
                st.error("‚ö†Ô∏è Veuillez remplir tous les champs obligatoires (*)")
                return
            
            # Compilation des donn√©es
            profile_data = f"""
            IDENTIT√â : {prenom} {nom}
            CONTACT : {email} | {telephone} | {ville}
            LINKEDIN : {linkedin}
            
            RECONVERSION : {secteur_origine} ‚Üí {secteur_cible}
            POSTE VIS√â : {poste_vise}
            
            EXP√âRIENCES :
            {experiences}
            
            FORMATION :
            {formations}
            
            COMP√âTENCES :
            {competences}
            """
            
            with st.spinner("ü§ñ G√©n√©ration de votre CV en cours..."):
                cv_content = generate_cv_content(model, profile_data, poste_vise)
                
                if cv_content:
                    st.success("‚úÖ CV g√©n√©r√© avec succ√®s !")
                    
                    # Affichage du CV
                    st.markdown("### üìÑ Votre CV G√©n√©r√©")
                    st.markdown(cv_content)
                    
                    # Bouton de t√©l√©chargement
                    st.download_button(
                        label="üíæ T√©l√©charger le CV (Markdown)",
                        data=cv_content,
                        file_name=f"CV_{prenom}_{nom}_{datetime.now().strftime('%Y%m%d')}.md",
                        mime="text/markdown"
                    )

def render_analyze_cv_page(model):
    """Page d'analyse de CV"""
    st.markdown("## üìÑ Analyser votre CV existant")
    
    # Upload de CV
    uploaded_file = st.file_uploader(
        "üìÅ T√©l√©chargez votre CV",
        type=['pdf', 'docx', 'txt'],
        help="Formats accept√©s: PDF, DOCX, TXT"
    )
    
    cv_text = ""
    
    if uploaded_file:
        if uploaded_file.type == "application/pdf":
            cv_text = extract_text_from_pdf(uploaded_file)
        elif uploaded_file.type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
            cv_text = extract_text_from_docx(uploaded_file)
        else:  # txt
            cv_text = str(uploaded_file.read(), "utf-8")
        
        if cv_text:
            st.success("‚úÖ CV analys√© avec succ√®s")
            
            with st.expander("üëÄ Aper√ßu du contenu extrait"):
                st.text_area("Contenu", cv_text[:1000] + "..." if len(cv_text) > 1000 else cv_text, height=200)
    
    # Analyse avec offre d'emploi
    st.markdown("### üéØ Analyse de Correspondance")
    job_description = st.text_area(
        "Collez l'offre d'emploi qui vous int√©resse",
        height=200,
        placeholder="Copiez-collez ici le texte de l'offre d'emploi pour analyser la correspondance avec votre CV..."
    )
    
    if st.button("üîç Analyser la Correspondance", type="primary") and cv_text and job_description:
        with st.spinner("ü§ñ Analyse en cours..."):
            analysis = analyze_cv_for_job(model, cv_text, job_description)
            
            if analysis:
                st.markdown("### üìä R√©sultats de l'Analyse")
                st.markdown(analysis)

def render_templates_page():
    """Page des templates"""
    st.markdown("## üé® Templates de CV")
    
    templates = [
        {
            "name": "üéØ Reconversion Moderne",
            "description": "Template optimis√© pour les reconversions professionnelles",
            "features": ["Focus comp√©tences transf√©rables", "Design moderne", "ATS-friendly"]
        },
        {
            "name": "üíº Professionnel Classic",
            "description": "Template √©l√©gant pour secteurs traditionnels",
            "features": ["Style sobre", "Mise en page claire", "Polyvalent"]
        },
        {
            "name": "üöÄ Tech & Innovation",
            "description": "Template dynamique pour secteurs technologiques",
            "features": ["Design cr√©atif", "Sections techniques", "Portfolio int√©gr√©"]
        }
    ]
    
    cols = st.columns(3)
    
    for i, template in enumerate(templates):
        with cols[i]:
            st.markdown(f"### {template['name']}")
            st.markdown(template['description'])
            
            for feature in template['features']:
                st.markdown(f"‚úÖ {feature}")
            
            st.button(f"Aper√ßu", key=f"preview_{i}", disabled=True)
            st.markdown("*Bient√¥t disponible*")

def render_pricing_page():
    """Page des tarifs"""
    st.markdown("## üí∞ Nos Offres")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        ### üÜì Gratuit
        **0‚Ç¨/mois**
        
        ‚úÖ 1 CV par mois  
        ‚úÖ Templates de base  
        ‚úÖ G√©n√©ration IA  
        ‚ùå Analyse de correspondance  
        ‚ùå Templates premium  
        ‚ùå Support prioritaire  
        """)
        st.button("Commencer Gratuit", type="secondary")
    
    with col2:
        st.markdown("""
        ### ‚≠ê Premium
        **9.99‚Ç¨/mois**
        
        ‚úÖ CV illimit√©s  
        ‚úÖ Tous les templates  
        ‚úÖ G√©n√©ration IA avanc√©e  
        ‚úÖ Analyse de correspondance  
        ‚úÖ Optimisation ATS  
        ‚ùå Support prioritaire  
        """)
        st.button("Choisir Premium", type="primary")
    
    with col3:
        st.markdown("""
        ### üöÄ Pro
        **19.99‚Ç¨/mois**
        
        ‚úÖ Tout Premium inclus  
        ‚úÖ Templates exclusifs  
        ‚úÖ Coaching IA personnalis√©  
        ‚úÖ Suivi candidatures  
        ‚úÖ Support prioritaire  
        ‚úÖ API Access  
        """)
        st.button("Choisir Pro", type="secondary")

def render_footer():
    """Footer de l'application"""
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; color: #666; padding: 1rem;">
        <p>üöÄ <strong>Phoenix CV</strong> - R√©volutionnez votre reconversion professionnelle</p>
        <p>Made with ‚ù§Ô∏è in France | üõ°Ô∏è S√©curis√© & Conforme RGPD</p>
    </div>
    """, unsafe_allow_html=True)

def main():
    """Application principale"""
    configure_page()
    
    # Configuration du mod√®le IA
    model = setup_gemini()
    
    # Header
    render_header()
    
    # Navigation
    current_page = render_sidebar()
    
    # Rendu des pages
    if current_page == "home":
        render_home_page()
    elif current_page == "create":
        render_create_cv_page(model)
    elif current_page == "analyze":
        render_analyze_cv_page(model)
    elif current_page == "templates":
        render_templates_page()
    elif current_page == "pricing":
        render_pricing_page()
    
    # Footer
    render_footer()

if __name__ == "__main__":
    main()