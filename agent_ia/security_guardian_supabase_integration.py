"""
üõ°Ô∏è SECURITY GUARDIAN - INT√âGRATION EVENT-SOURCING SUPABASE
Agent de s√©curit√© connect√© au Event Store pour audit RGPD en temps r√©el
Architecture: S√©curit√© locale + Tra√ßabilit√© cloud
"""

import asyncio
import hashlib
import json
import logging
import os
from dataclasses import asdict, dataclass
from datetime import datetime, timedelta
from enum import Enum
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

# Import Supabase
from supabase import Client, create_client

# Import de l'agent existant pour r√©utiliser la logique s√©curit√©
from .security_guardian_agent import (
    SecurityGuardianAgent,
    ThreatLevel,
    ComplianceStatus,
    SecurityThreat,
)

logger = logging.getLogger(__name__)

# ========================================
# üõ°Ô∏è STRUCTURES EVENT-SOURCING S√âCURIT√â
# ========================================

class SecurityEventType(Enum):
    """Types d'√©v√©nements s√©curit√©"""
    PII_DETECTED = "PIIDetected"
    THREAT_BLOCKED = "ThreatBlocked"
    RGPD_VIOLATION = "RGPDViolation"
    SUSPICIOUS_ACTIVITY = "SuspiciousActivity"
    COMPLIANCE_CHECK = "ComplianceCheck"
    DATA_ANONYMIZED = "DataAnonymized"
    SECURITY_SCAN_COMPLETED = "SecurityScanCompleted"

@dataclass
class SecurityEvent:
    """√âv√©nement s√©curit√© pour Event Store"""
    event_id: str
    user_id: str
    event_type: SecurityEventType
    threat_level: ThreatLevel
    details: Dict[str, Any]
    app_source: str
    timestamp: datetime
    remediation_taken: bool = False
    compliance_status: ComplianceStatus = ComplianceStatus.COMPLIANT

@dataclass
class SecurityAnalysisResult:
    """R√©sultat d'analyse s√©curit√©"""
    is_safe: bool
    threat_level: ThreatLevel
    detected_threats: List[SecurityThreat]
    compliance_status: ComplianceStatus
    recommendations: List[str]
    anonymized_content: Optional[str] = None
    analysis_timestamp: datetime = None

# ========================================
# üõ°Ô∏è SECURITY GUARDIAN EVENT PUBLISHER
# ========================================

class SecurityGuardianSupabasePublisher:
    """
    Security Guardian qui publie les √©v√©nements s√©curit√© dans Supabase
    Combine analyse locale IA avec tra√ßabilit√© Event-Sourcing
    """

    def __init__(self, supabase_url: str = None, supabase_key: str = None):
        """
        Initialise Security Guardian avec connexion Supabase
        
        Args:
            supabase_url: URL Supabase (env SUPABASE_URL si None)
            supabase_key: Cl√© Supabase (env SUPABASE_KEY si None)
        """
        # Connexion Supabase
        self.supabase_url = supabase_url or os.getenv("SUPABASE_URL")
        self.supabase_key = supabase_key or os.getenv("SUPABASE_KEY")
        
        if not self.supabase_url or not self.supabase_key:
            raise ValueError("SUPABASE_URL et SUPABASE_KEY requis")
        
        self.supabase: Client = create_client(self.supabase_url, self.supabase_key)
        
        # Agent IA local pour analyse s√©curit√©
        self.security_agent = SecurityGuardianAgent()
        
        # Configuration patterns menaces
        self.threat_patterns = {
            "prompt_injection": [
                r"ignore\s+previous\s+instructions",
                r"you\s+are\s+now\s+a\s+different",
                r"forget\s+your\s+role",
                r"act\s+as\s+if\s+you\s+are",
            ],
            "data_extraction": [
                r"show\s+me\s+all\s+data",
                r"export\s+user\s+information",
                r"list\s+all\s+users",
                r"database\s+contents",
            ],
            "malicious_content": [
                r"<script\s*>",
                r"javascript:",
                r"vbscript:",
                r"onload\s*=",
            ]
        }
        
        logger.info("‚úÖ SecurityGuardianSupabasePublisher initialis√©")

    async def analyze_content_security(self, content: str, content_type: str, 
                                     user_id: str, app_source: str) -> SecurityAnalysisResult:
        """
        Analyse s√©curit√© compl√®te d'un contenu avec publication √©v√©nement
        
        Args:
            content: Contenu √† analyser
            content_type: Type de contenu (cv, letter, message)
            user_id: ID utilisateur
            app_source: Application source (cv, letters, rise)
            
        Returns:
            SecurityAnalysisResult: R√©sultat analyse + publication event
        """
        try:
            # Analyse s√©curit√© locale avec IA
            security_result = await self._perform_local_security_analysis(content, content_type)
            
            # Publication √©v√©nement s√©curit√© dans Event Store
            await self._publish_security_event(
                user_id=user_id,
                app_source=app_source,
                analysis_result=security_result,
                content_type=content_type
            )
            
            # Log s√©curit√©
            logger.info(f"üõ°Ô∏è Analyse s√©curit√© - User: {user_id}, Threat: {security_result.threat_level.value}")
            
            return security_result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur analyse s√©curit√©: {e}")
            # Cr√©er un r√©sultat d'erreur s√©curis√©
            return SecurityAnalysisResult(
                is_safe=False,
                threat_level=ThreatLevel.HIGH,
                detected_threats=[SecurityThreat(
                    threat_type="analysis_error",
                    confidence=1.0,
                    severity=ThreatLevel.HIGH,
                    description=f"Erreur d'analyse: {str(e)}"
                )],
                compliance_status=ComplianceStatus.ATTENTION_REQUIRED,
                recommendations=["R√©essayez l'analyse ou contactez le support"],
                analysis_timestamp=datetime.now()
            )

    async def _perform_local_security_analysis(self, content: str, content_type: str) -> SecurityAnalysisResult:
        """
        Analyse s√©curit√© locale avec patterns et IA
        """
        detected_threats = []
        threat_level = ThreatLevel.NONE
        compliance_status = ComplianceStatus.COMPLIANT
        recommendations = []
        
        # 1. D√©tection patterns menaces
        for threat_type, patterns in self.threat_patterns.items():
            for pattern in patterns:
                if re.search(pattern, content, re.IGNORECASE):
                    threat = SecurityThreat(
                        threat_type=threat_type,
                        confidence=0.9,
                        severity=ThreatLevel.HIGH,
                        description=f"Pattern malveillant d√©tect√©: {pattern}"
                    )
                    detected_threats.append(threat)
                    threat_level = ThreatLevel.HIGH
        
        # 2. D√©tection PII (donn√©es personnelles)
        pii_patterns = {
            "email": r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',
            "phone": r'\b(?:\+33|0)[1-9](?:[0-9]{8})\b',
            "ssn": r'\b[1-2][0-9]{2}[0-1][0-9][0-9]{2}[0-9]{3}[0-9]{2}\b'
        }
        
        for pii_type, pattern in pii_patterns.items():
            matches = re.findall(pattern, content)
            if matches:
                threat = SecurityThreat(
                    threat_type=f"pii_{pii_type}",
                    confidence=0.8,
                    severity=ThreatLevel.MEDIUM,
                    description=f"Donn√©es personnelles d√©tect√©es: {pii_type}"
                )
                detected_threats.append(threat)
                if threat_level == ThreatLevel.NONE:
                    threat_level = ThreatLevel.MEDIUM
                
                recommendations.append(f"Anonymiser les donn√©es {pii_type}")
        
        # 3. V√©rification longueur excessive (potentiel DoS)
        if len(content) > 50000:
            threat = SecurityThreat(
                threat_type="excessive_length",
                confidence=0.7,
                severity=ThreatLevel.LOW,
                description="Contenu tr√®s volumineux d√©tect√©"
            )
            detected_threats.append(threat)
            recommendations.append("Limiter la taille du contenu")
        
        # 4. D√©terminer statut conformit√© RGPD
        pii_threats = [t for t in detected_threats if t.threat_type.startswith('pii_')]
        if pii_threats:
            compliance_status = ComplianceStatus.ATTENTION_REQUIRED
            recommendations.append("V√©rifier le consentement pour traitement donn√©es personnelles")
        
        # 5. Anonymisation si n√©cessaire
        anonymized_content = None
        if pii_threats:
            anonymized_content = await self._anonymize_content(content)
        
        # D√©terminer s√©curit√© globale
        is_safe = threat_level in [ThreatLevel.NONE, ThreatLevel.LOW]
        
        return SecurityAnalysisResult(
            is_safe=is_safe,
            threat_level=threat_level,
            detected_threats=detected_threats,
            compliance_status=compliance_status,
            recommendations=recommendations,
            anonymized_content=anonymized_content,
            analysis_timestamp=datetime.now()
        )

    async def _anonymize_content(self, content: str) -> str:
        """
        Anonymise le contenu en masquant les PII
        """
        anonymized = content
        
        # Masquer emails
        anonymized = re.sub(
            r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',
            '[EMAIL_MASQU√â]',
            anonymized
        )
        
        # Masquer t√©l√©phones
        anonymized = re.sub(
            r'\b(?:\+33|0)[1-9](?:[0-9]{8})\b',
            '[T√âL√âPHONE_MASQU√â]',
            anonymized
        )
        
        # Masquer num√©ros s√©cu
        anonymized = re.sub(
            r'\b[1-2][0-9]{2}[0-1][0-9][0-9]{2}[0-9]{3}[0-9]{2}\b',
            '[N¬∞S√âCU_MASQU√â]',
            anonymized
        )
        
        return anonymized

    async def _publish_security_event(self, user_id: str, app_source: str, 
                                    analysis_result: SecurityAnalysisResult, 
                                    content_type: str) -> bool:
        """
        Publie un √©v√©nement s√©curit√© dans Supabase Event Store
        """
        try:
            # D√©terminer type d'√©v√©nement
            if analysis_result.threat_level == ThreatLevel.HIGH:
                event_type = SecurityEventType.THREAT_BLOCKED
            elif analysis_result.compliance_status == ComplianceStatus.NON_COMPLIANT:
                event_type = SecurityEventType.RGPD_VIOLATION
            elif any(t.threat_type.startswith('pii_') for t in analysis_result.detected_threats):
                event_type = SecurityEventType.PII_DETECTED
            else:
                event_type = SecurityEventType.SECURITY_SCAN_COMPLETED
            
            # Pr√©parer payload √©v√©nement
            event_payload = {
                "content_type": content_type,
                "threat_level": analysis_result.threat_level.value,
                "compliance_status": analysis_result.compliance_status.value,
                "threats_detected": len(analysis_result.detected_threats),
                "threat_details": [asdict(threat) for threat in analysis_result.detected_threats],
                "recommendations": analysis_result.recommendations,
                "is_safe": analysis_result.is_safe,
                "has_anonymized_content": analysis_result.anonymized_content is not None
            }
            
            # Ins√©rer dans Event Store
            event_data = {
                "stream_id": user_id,
                "event_type": event_type.value,
                "payload": event_payload,
                "app_source": app_source,
                "metadata": {
                    "security_agent_version": "guardian_v2",
                    "analysis_timestamp": analysis_result.analysis_timestamp.isoformat()
                }
            }
            
            response = self.supabase.table('events').insert(event_data).execute()
            
            logger.info(f"üõ°Ô∏è √âv√©nement s√©curit√© publi√©: {event_type.value} pour user {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erreur publication √©v√©nement s√©curit√©: {e}")
            return False

    async def get_user_security_history(self, user_id: str, days: int = 30) -> List[Dict[str, Any]]:
        """
        R√©cup√®re l'historique s√©curit√© d'un utilisateur
        
        Args:
            user_id: ID utilisateur
            days: Nombre de jours √† r√©cup√©rer
            
        Returns:
            List[Dict]: Historique des √©v√©nements s√©curit√©
        """
        try:
            cutoff_date = datetime.now() - timedelta(days=days)
            
            response = self.supabase.table('events')\
                .select('*')\
                .eq('stream_id', user_id)\
                .in_('event_type', [e.value for e in SecurityEventType])\
                .gte('timestamp', cutoff_date.isoformat())\
                .order('timestamp', desc=True)\
                .execute()
            
            security_events = response.data
            
            logger.info(f"üìä R√©cup√©r√© {len(security_events)} √©v√©nements s√©curit√© pour user {user_id}")
            return security_events
            
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration historique s√©curit√©: {e}")
            return []

    async def get_security_dashboard(self) -> Dict[str, Any]:
        """
        G√©n√®re un dashboard s√©curit√© global de l'√©cosyst√®me
        
        Returns:
            Dict: M√©triques s√©curit√© globales
        """
        try:
            cutoff_date = datetime.now() - timedelta(days=7)
            
            # R√©cup√©rer tous les √©v√©nements s√©curit√© r√©cents
            response = self.supabase.table('events')\
                .select('event_type, payload, app_source, timestamp')\
                .in_('event_type', [e.value for e in SecurityEventType])\
                .gte('timestamp', cutoff_date.isoformat())\
                .execute()
            
            events = response.data
            
            # Calculs m√©triques
            total_scans = len(events)
            threats_blocked = len([e for e in events if e['event_type'] == SecurityEventType.THREAT_BLOCKED.value])
            pii_detected = len([e for e in events if e['event_type'] == SecurityEventType.PII_DETECTED.value])
            rgpd_violations = len([e for e in events if e['event_type'] == SecurityEventType.RGPD_VIOLATION.value])
            
            # R√©partition par app
            app_distribution = {}
            for event in events:
                app = event['app_source']
                app_distribution[app] = app_distribution.get(app, 0) + 1
            
            # Score s√©curit√© global
            security_score = max(0, 100 - (threats_blocked * 10) - (rgpd_violations * 20))
            
            dashboard = {
                "period": "7_days",
                "total_security_scans": total_scans,
                "threats_blocked": threats_blocked,
                "pii_detected": pii_detected,
                "rgpd_violations": rgpd_violations,
                "security_score": security_score,
                "app_distribution": app_distribution,
                "last_updated": datetime.now().isoformat()
            }
            
            logger.info(f"üõ°Ô∏è Dashboard s√©curit√©: Score {security_score}/100, {threats_blocked} menaces bloqu√©es")
            return dashboard
            
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration dashboard s√©curit√©: {e}")
            return {}

# ========================================
# üöÄ INTERFACE API SECURITY
# ========================================

class SecurityGuardianAPI:
    """
    API REST pour Security Guardian avec Event-Sourcing
    """
    
    def __init__(self):
        self.guardian = SecurityGuardianSupabasePublisher()
    
    async def scan_content(self, content: str, content_type: str, 
                          user_id: str, app_source: str) -> Dict[str, Any]:
        """Endpoint: Scan s√©curit√© contenu"""
        result = await self.guardian.analyze_content_security(
            content, content_type, user_id, app_source
        )
        return asdict(result)
    
    async def get_user_security_status(self, user_id: str) -> Dict[str, Any]:
        """Endpoint: Statut s√©curit√© utilisateur"""
        history = await self.guardian.get_user_security_history(user_id)
        
        # R√©sum√© statut
        recent_threats = [h for h in history if h['payload'].get('threat_level') in ['high', 'critical']]
        
        return {
            "user_id": user_id,
            "security_level": "high" if not recent_threats else "attention",
            "recent_scans": len(history),
            "threats_detected": len(recent_threats),
            "last_scan": history[0]['timestamp'] if history else None
        }
    
    async def get_security_dashboard(self) -> Dict[str, Any]:
        """Endpoint: Dashboard s√©curit√© global"""
        return await self.guardian.get_security_dashboard()

# ========================================
# üß™ TESTS & EXEMPLES
# ========================================

async def test_security_integration():
    """Test de l'int√©gration Security Guardian Event-Sourcing"""
    try:
        guardian = SecurityGuardianSupabasePublisher()
        
        # Test contenu s√©curis√©
        safe_content = "Je souhaite cr√©er un CV pour ma reconversion professionnelle"
        result = await guardian.analyze_content_security(
            content=safe_content,
            content_type="cv",
            user_id="test-user-security",
            app_source="cv"
        )
        print(f"‚úÖ Contenu s√©curis√©: {result.is_safe}, Niveau: {result.threat_level.value}")
        
        # Test contenu avec PII
        pii_content = "Mon email est test@example.com et mon t√©l√©phone 0123456789"
        result = await guardian.analyze_content_security(
            content=pii_content,
            content_type="letter",
            user_id="test-user-security",
            app_source="letters"
        )
        print(f"üîç PII d√©tect√©: {len(result.detected_threats)} menaces")
        print(f"üìù Contenu anonymis√©: {result.anonymized_content}")
        
        # Dashboard s√©curit√©
        dashboard = await guardian.get_security_dashboard()
        print(f"üõ°Ô∏è Dashboard: Score {dashboard.get('security_score', 0)}/100")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Test s√©curit√© √©chou√©: {e}")
        return False

if __name__ == "__main__":
    # Test de l'int√©gration s√©curit√©
    asyncio.run(test_security_integration())